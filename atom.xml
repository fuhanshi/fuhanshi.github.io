<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个大学狗的日常</title>
  
  <subtitle>放弃不难，但坚持一定很酷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-09T10:13:51.284Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凡希</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL基础总结</title>
    <link href="http://yoursite.com/2020/04/09/MySQL%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/09/MySQL基础总结/</id>
    <published>2020-04-09T10:11:29.000Z</published>
    <updated>2020-04-09T10:13:51.284Z</updated>
    
    <content type="html"><![CDATA[<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h3 id="基本操作命令"><a href="#基本操作命令" class="headerlink" title="基本操作命令"></a>基本操作命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#显示全部已有的数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">#创建一个新的数据库</span><br><span class="line">create database test;</span><br><span class="line"></span><br><span class="line">#选择/切换要使用的某一个数据库</span><br><span class="line">use test;</span><br><span class="line"></span><br><span class="line">#显示选中的数据库中的全部表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">#在数据库test中创建一个新的表</span><br><span class="line">create table pet(name VARCHAR(20),owner VARCHAR(20),species VARCHAR(20),sex CHAR(1),birth DATE,death DATE);</span><br><span class="line"></span><br><span class="line">#查看表的结构</span><br><span class="line">mysql&gt; desc(ribe) pet;</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field   | Type        | Null | Key | Default | Extra |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">| name    | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| owner   | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| species | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| sex     | char(1)     | YES  |     | NULL    |       |</span><br><span class="line">| birth   | date        | YES  |     | NULL    |       |</span><br><span class="line">| death   | date        | YES  |     | NULL    |       |</span><br><span class="line">+---------+-------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">#插入几条数据</span><br><span class="line">insert into pet values(&apos;Puffball&apos;,&apos;Diane&apos;,&apos;hamster&apos;,&apos;f&apos;,&apos;1999-03-30&apos;,NULL);</span><br><span class="line">insert into pet values(&apos;旺财&apos;,&apos;周星驰&apos;,&apos;狗&apos;,&apos;公&apos;,&apos;1990-01-01&apos;,NULL);</span><br><span class="line">insert into pet values(&apos;Fluffy&apos;,&apos;Harold&apos;,&apos;cat&apos;,&apos;f&apos;,&apos;1993-02-04&apos;,NULL);</span><br><span class="line">insert into pet values(&apos;Claws&apos;,&apos;Gwen&apos;,&apos;cat&apos;,&apos;m&apos;,&apos;1994-03-17&apos;,NULL);</span><br><span class="line">insert into pet values(&apos;Buffy&apos;,&apos;Harold&apos;,&apos;dog&apos;,&apos;f&apos;,&apos;1989-05-03&apos;,NULL);</span><br><span class="line">insert into pet values(&apos;Fang&apos;,&apos;Benny&apos;,&apos;dog&apos;,&apos;m&apos;,&apos;1979-08-31&apos;,&apos;1995-07-29&apos;);</span><br><span class="line"></span><br><span class="line">#查询表pet中的所有元素</span><br><span class="line">mysql&gt; select * from pet;</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">| name     | owner     | species | sex  | birth      | death      |</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">| Puffball | Diane     | hamster | f    | 1999-03-30 | NULL       |</span><br><span class="line">| 旺财     | 周星驰    | 狗      | 公   | 1990-01-01 | NULL       |</span><br><span class="line">| Fluffy   | Harold    | cat     | f    | 1993-02-04 | NULL       |</span><br><span class="line">| Claws    | Gwen      | cat     | m    | 1994-03-17 | NULL       |</span><br><span class="line">| Buffy    | Harold    | dog     | f    | 1989-05-03 | NULL       |</span><br><span class="line">| Fang     | Benny     | dog     | m    | 1979-08-31 | 1995-07-29 |</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#删除一条数据</span><br><span class="line">mysql&gt; delete from pet where name=&apos;Fluffy&apos;;</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from pet;</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">| name     | owner     | species | sex  | birth      | death      |</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">| Puffball | Diane     | hamster | f    | 1999-03-30 | NULL       |</span><br><span class="line">| 旺财     | 周星驰    | 狗      | 公   | 1990-01-01 | NULL       |</span><br><span class="line">| Claws    | Gwen      | cat     | m    | 1994-03-17 | NULL       |</span><br><span class="line">| Buffy    | Harold    | dog     | f    | 1989-05-03 | NULL       |</span><br><span class="line">| Fang     | Benny     | dog     | m    | 1979-08-31 | 1995-07-29 |</span><br><span class="line">+----------+-----------+---------+------+------------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#修改一条数据</span><br><span class="line">mysql&gt; update pet set name=&apos;旺旺财&apos; where owner=&apos;周星驰&apos;;</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from pet;</span><br><span class="line">+-----------+-----------+---------+------+------------+------------+</span><br><span class="line">| name      | owner     | species | sex  | birth      | death      |</span><br><span class="line">+-----------+-----------+---------+------+------------+------------+</span><br><span class="line">| Puffball  | Diane     | hamster | f    | 1999-03-30 | NULL       |</span><br><span class="line">| 旺旺财    | 周星驰    | 狗      | 公   | 1990-01-01 | NULL       |</span><br><span class="line">| Claws     | Gwen      | cat     | m    | 1994-03-17 | NULL       |</span><br><span class="line">| Buffy     | Harold    | dog     | f    | 1989-05-03 | NULL       |</span><br><span class="line">| Fang      | Benny     | dog     | m    | 1979-08-31 | 1995-07-29 |</span><br><span class="line">+-----------+-----------+---------+------+------------+------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#查询满足特定条件的元组</span><br><span class="line">mysql&gt; select name from pet where sex=&apos;m&apos;;</span><br><span class="line">+-------+</span><br><span class="line">| name  |</span><br><span class="line">+-------+</span><br><span class="line">| Claws |</span><br><span class="line">| Fang  |</span><br><span class="line">+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="建表约束"><a href="#建表约束" class="headerlink" title="建表约束"></a>建表约束</h3><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><blockquote><p> 作为主键的字段，其值不能重复，不能为空。</p></blockquote><p>声明某个属性作为主键，常用有以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#方法1</span><br><span class="line">mysql&gt; create table user(</span><br><span class="line">    -&gt; id int primary key,#主键是id</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#方法2</span><br><span class="line">mysql&gt; create table user(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; primary key (id)#主键是id</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><p>如果一开始并没有定义主键，也可以之后再添加(两种方法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#一开始并没有声明主键</span><br><span class="line">mysql&gt; create table user(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">#现在使id作为主键</span><br><span class="line">#方法1</span><br><span class="line">alter table user add primary key(id);</span><br><span class="line">#方法2</span><br><span class="line">alter table user modify id int primary key;</span><br></pre></td></tr></table></figure><p>当然也可以删除主键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user drop primary key;</span><br></pre></td></tr></table></figure><p>还有一种<strong>联合主键</strong>，这种主键是由两个或两个以上的字段形成一个元组，把这个元组整体作为主键</p><p>在添加一条记录时，只要联合主键中有一个字段的值不一样就能添加成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user2(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; password varchar(20),</span><br><span class="line">    -&gt; primary key (id,name)#id与name作为联合主键</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc user2;</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field    | Type        | Null | Key | Default | Extra |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">| id       | int(11)     | NO   | PRI | NULL    |       |</span><br><span class="line">| name     | varchar(20) | NO   | PRI | NULL    |       |</span><br><span class="line">| password | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+----------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="自增约束"><a href="#自增约束" class="headerlink" title="自增约束"></a>自增约束</h4><blockquote><p> 主键由系统自动递增分配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user3(</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><p>这样就可以在添加元组时只添加name字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user3(</span><br><span class="line">    -&gt; id int primary key auto_increment,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user3 values(1,&apos;狗子&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user3;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 狗子   |</span><br><span class="line">+----+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user3 (name)values(&apos;小猫&apos;);#只写了name字段</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user3;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 狗子   |</span><br><span class="line">|  2 | 小猫   |</span><br><span class="line">+----+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><blockquote><p>使用unique来表明某字段必须是唯一的</p></blockquote><p>可以在定义表时就说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user4(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; unique(name)#name具有唯一性</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe user4;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  | UNI | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><p>也可以在定义完一个表之后再添加唯一约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user5(</span><br><span class="line">    -&gt; id int ,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">#方法1</span><br><span class="line">alter table user5 add unique(name);</span><br><span class="line">#方法2</span><br><span class="line">alter table user5 modify name varchar(20) unique;</span><br></pre></td></tr></table></figure><p>删除唯一约束可以使用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user5 drop index name;</span><br></pre></td></tr></table></figure><p>类似联合主键，也可以定义如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user7(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; unique(id,name)#保证了id和name不能同时一样</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; describe user7;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  | MUL | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><p>表明某字段不能为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user9(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20) not null#name字段不允许为空</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc user9;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)     | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | NO   |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user9 (name)values(&apos;狗&apos;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">#添加失败，因为name字段没有传值，默认为空了</span><br><span class="line">mysql&gt; insert into user9 (id)values(2);</span><br><span class="line">ERROR 1364 (HY000): Field &apos;name&apos; doesn&apos;t have a default value</span><br></pre></td></tr></table></figure><h4 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h4><p>当插入字段值时，如果没有传值，就会使用默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table user10(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; age int default 10#默认值为10</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into user10 (id,name ) values(1,&apos;猫咪&apos;);#没有给age传值</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user10;</span><br><span class="line">+------+--------+------+</span><br><span class="line">| id   | name   | age  |</span><br><span class="line">+------+--------+------+</span><br><span class="line">|    1 | 猫咪   |   10 |</span><br><span class="line">+------+--------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>涉及到两个表</p><p>子表的操作要参照父表，父表只有在未被子表refer时才能变动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#父表</span><br><span class="line">mysql&gt; create table classes(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">#子表</span><br><span class="line">mysql&gt; create table students(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20),</span><br><span class="line">    -&gt; class_id int,</span><br><span class="line">    -&gt; foreign key(class_id) references classes(id)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#在父表中插入数据</span><br><span class="line">mysql&gt; insert into classes values(1,&apos;一班&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into classes values(2,&apos;二班&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into classes values(3,&apos;三班&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into classes values(4,&apos;四班&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">#查看父表</span><br><span class="line">mysql&gt; select * from classes;</span><br><span class="line">+----+--------+</span><br><span class="line">| id | name   |</span><br><span class="line">+----+--------+</span><br><span class="line">|  1 | 一班   |</span><br><span class="line">|  2 | 二班   |</span><br><span class="line">|  3 | 三班   |</span><br><span class="line">|  4 | 四班   |</span><br><span class="line">+----+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#在子表中插入数据</span><br><span class="line">mysql&gt; insert into students values(1001,&apos;张安&apos;,1);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into students values(1002,&apos;张安&apos;,2);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into students values(1003,&apos;张安&apos;,3);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into students values(1004,&apos;张安&apos;,4);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure><p>但是当插入<code>(1005,&#39;李四&#39;，5)</code>时会报错，因为父表的id字段中只有1，2，3，4而没有5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into students values(1005,&apos;李四&apos;,5);</span><br><span class="line">ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`test`.`students`, CONSTRAINT `students_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `classes` (`id`))</span><br></pre></td></tr></table></figure><p><strong>总结一下</strong>：</p><p>父表classes中没有的数据值，在子表中，是不能使用的</p><p>父表中的记录若被子表引用，是不可被删除的</p><h3 id="数据库的三大设计范式"><a href="#数据库的三大设计范式" class="headerlink" title="数据库的三大设计范式"></a>数据库的三大设计范式</h3><h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>数据包中的所有字段都是不可分割的原子值</p><h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p> 在满足第一范式的前提下，除主键以外的其他列都必须完全依赖于主键列。如果出现不完全依赖，只可能发生在联合主键的情况下 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table myoder(</span><br><span class="line">    -&gt; product_id int,</span><br><span class="line">    -&gt; customer_id int,</span><br><span class="line">    -&gt; product_name varchar(20),</span><br><span class="line">    -&gt; customer_name varchar(20),</span><br><span class="line">    -&gt; primary key(product_id,customer_id)</span><br><span class="line">    -&gt; );</span><br></pre></td></tr></table></figure><p>在表<code>myorder</code>中，<code>product_name</code> 只依赖于 <code>product_id</code> ，<code>customer_name</code> 只依赖于 <code>customer_id</code> 。也就是说，<code>product_name</code> 和 <code>customer_id</code> 是没有关系的，<code>customer_name</code> 和 <code>product_id</code> 也是没有关系的 </p><p>这就不满足第二范式：其他列都必须完全依赖于主键列！ </p><p>可以通过拆分的方法使其满足第二范式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table myorder(</span><br><span class="line">    -&gt; order_id int primary key,</span><br><span class="line">    -&gt; product_id int,</span><br><span class="line">    -&gt; customer_id int</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table product (</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table customer(</span><br><span class="line">    -&gt; id int primary key,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure><p>这三个表都分别满足第二范式</p><h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>在满足第二范式的前提下，除了主键列之外，其他列之间不能有传递依赖关系</p><p>也就是要确保数据表中的每一列数据都和主键直接相关，而不能间接相关 ，这样能减小数据冗余</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT,</span><br><span class="line">    customer_phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表中的 <code>customer_phone</code> 有可能依赖于 <code>order_id</code> （主键）、 <code>customer_id</code>（非主键） 两列，也就不满足第三范式的设计：其他列之间不能有传递依赖关系。</p><p>同样可以通过拆分来使其满足第三范式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE myorder (</span><br><span class="line">    order_id INT PRIMARY KEY,</span><br><span class="line">    product_id INT,</span><br><span class="line">    customer_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    phone VARCHAR(15)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>修改后就不存在其他列之间的传递依赖关系，其他列都只依赖于主键列，满足了第三范式的设计！</p><h3 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h3><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">#创建一个新的数据库</span><br><span class="line">create database selectTest;</span><br><span class="line">#选择该数据库</span><br><span class="line">use selectTest;</span><br><span class="line"></span><br><span class="line">#创建学生表</span><br><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt; sno varchar(20) primary key,</span><br><span class="line">    -&gt; sname varchar(20) not null,</span><br><span class="line">    -&gt; ssex varchar(10) not null,</span><br><span class="line">    -&gt; sbirthday datetime,</span><br><span class="line">    -&gt; class varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line"></span><br><span class="line">#创建教师表</span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    tno VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    tname VARCHAR(20) NOT NULL,</span><br><span class="line">    tsex VARCHAR(10) NOT NULL,</span><br><span class="line">    tbirthday datetime,</span><br><span class="line">    prof VARCHAR(20) NOT NULL, -- 职称</span><br><span class="line">    depart VARCHAR(20) NOT NULL -- 部门</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#创建课程表</span><br><span class="line">CREATE TABLE course (</span><br><span class="line">    cno VARCHAR(20) PRIMARY KEY,</span><br><span class="line">    cname VARCHAR(20) NOT NULL,</span><br><span class="line">    tno VARCHAR(20) NOT NULL, -- 教师编号</span><br><span class="line">    -- 表示该 tno 来自于 teacher 表中的 tno 字段值</span><br><span class="line">    FOREIGN KEY(tno) REFERENCES teacher(tno) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#创建成绩表</span><br><span class="line">CREATE TABLE score (</span><br><span class="line">    sno VARCHAR(20),-- 学生编号</span><br><span class="line">    cno VARCHAR(20) NOT NULL, -- 课程号</span><br><span class="line">    degree DECIMAL,-- 成绩</span><br><span class="line">    -- 表示该 sno, cno 分别来自于 student, course 表中的 no 字段值</span><br><span class="line">    FOREIGN KEY(sno) REFERENCES student(sno),</span><br><span class="line">    FOREIGN KEY(cno) REFERENCES course(cno),</span><br><span class="line">    PRIMARY KEY(sno,cno)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加学生表数据</span><br><span class="line">INSERT INTO student VALUES(&apos;101&apos;, &apos;曾华&apos;, &apos;男&apos;, &apos;1977-09-01&apos;, &apos;95033&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;102&apos;, &apos;匡明&apos;, &apos;男&apos;, &apos;1975-10-02&apos;, &apos;95031&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;103&apos;, &apos;王丽&apos;, &apos;女&apos;, &apos;1976-01-23&apos;, &apos;95033&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;104&apos;, &apos;李军&apos;, &apos;男&apos;, &apos;1976-02-20&apos;, &apos;95033&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;105&apos;, &apos;王芳&apos;, &apos;女&apos;, &apos;1975-02-10&apos;, &apos;95031&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;106&apos;, &apos;陆军&apos;, &apos;男&apos;, &apos;1974-06-03&apos;, &apos;95031&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;107&apos;, &apos;王尼玛&apos;, &apos;男&apos;, &apos;1976-02-20&apos;, &apos;95033&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;108&apos;, &apos;张全蛋&apos;, &apos;男&apos;, &apos;1975-02-10&apos;, &apos;95031&apos;);</span><br><span class="line">INSERT INTO student VALUES(&apos;109&apos;, &apos;赵铁柱&apos;, &apos;男&apos;, &apos;1974-06-03&apos;, &apos;95031&apos;);</span><br><span class="line"></span><br><span class="line">-- 添加教师表数据</span><br><span class="line">INSERT INTO teacher VALUES(&apos;804&apos;, &apos;李诚&apos;, &apos;男&apos;, &apos;1958-12-02&apos;, &apos;副教授&apos;, &apos;计算机系&apos;);</span><br><span class="line">INSERT INTO teacher VALUES(&apos;856&apos;, &apos;张旭&apos;, &apos;男&apos;, &apos;1969-03-12&apos;, &apos;讲师&apos;, &apos;电子工程系&apos;);</span><br><span class="line">INSERT INTO teacher VALUES(&apos;825&apos;, &apos;王萍&apos;, &apos;女&apos;, &apos;1972-05-05&apos;, &apos;助教&apos;, &apos;计算机系&apos;);</span><br><span class="line">INSERT INTO teacher VALUES(&apos;831&apos;, &apos;刘冰&apos;, &apos;女&apos;, &apos;1977-08-14&apos;, &apos;助教&apos;, &apos;电子工程系&apos;);</span><br><span class="line"></span><br><span class="line">-- 添加课程表数据</span><br><span class="line">INSERT INTO course VALUES(&apos;3-105&apos;, &apos;计算机导论&apos;, &apos;825&apos;);</span><br><span class="line">INSERT INTO course VALUES(&apos;3-245&apos;, &apos;操作系统&apos;, &apos;804&apos;);</span><br><span class="line">INSERT INTO course VALUES(&apos;6-166&apos;, &apos;数字电路&apos;, &apos;856&apos;);</span><br><span class="line">INSERT INTO course VALUES(&apos;9-888&apos;, &apos;高等数学&apos;, &apos;831&apos;);</span><br><span class="line"></span><br><span class="line">-- 添加添加成绩表数据</span><br><span class="line">INSERT INTO score VALUES(&apos;103&apos;, &apos;3-105&apos;, &apos;92&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;103&apos;, &apos;3-245&apos;, &apos;86&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;103&apos;, &apos;6-166&apos;, &apos;85&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;105&apos;, &apos;3-105&apos;, &apos;88&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;105&apos;, &apos;3-245&apos;, &apos;75&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;105&apos;, &apos;6-166&apos;, &apos;79&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;109&apos;, &apos;3-105&apos;, &apos;76&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;109&apos;, &apos;3-245&apos;, &apos;68&apos;);</span><br><span class="line">INSERT INTO score VALUES(&apos;109&apos;, &apos;6-166&apos;, &apos;81&apos;);</span><br></pre></td></tr></table></figure><h4 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a>1-10</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">#1.查询student表的所有记录</span><br><span class="line">mysql&gt; select * from student;</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 101 | 曾华      | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 104 | 李军      | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#2.查询student表中的所有记录的sname、ssex和class列</span><br><span class="line">mysql&gt; select sname ,ssex,class from student;</span><br><span class="line">+-----------+------+-------+</span><br><span class="line">| sname     | ssex | class |</span><br><span class="line">+-----------+------+-------+</span><br><span class="line">| 曾华      | 男   | 95033 |</span><br><span class="line">| 匡明      | 男   | 95031 |</span><br><span class="line">| 王丽      | 女   | 95033 |</span><br><span class="line">| 李军      | 男   | 95033 |</span><br><span class="line">| 王芳      | 女   | 95031 |</span><br><span class="line">| 陆军      | 男   | 95031 |</span><br><span class="line">| 王尼玛    | 男   | 95033 |</span><br><span class="line">| 张全蛋    | 男   | 95031 |</span><br><span class="line">| 赵铁柱    | 男   | 95031 |</span><br><span class="line">+-----------+------+-------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 3.查询教师的所有单位，即不重复的depart列</span><br><span class="line">mysql&gt; select distinct depart from teacher;#distinct用于去重</span><br><span class="line">+-----------------+</span><br><span class="line">| depart          |</span><br><span class="line">+-----------------+</span><br><span class="line">| 计算机系        |</span><br><span class="line">| 电子工程系      |</span><br><span class="line">+-----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 4.查询score表中成绩在60到80之间的所有记录</span><br><span class="line"></span><br><span class="line">### 方法1：使用between...and...</span><br><span class="line">mysql&gt; select * from score where degree between 60 and 80;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">### 方法2：使用比较运算符</span><br><span class="line">mysql&gt; select * from score where degree &gt;60 and degree &lt;80;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#5.查询score表中成绩为85，86或88的记录</span><br><span class="line">mysql&gt; select* from score where degree in(85,86,88);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |     86 |</span><br><span class="line">| 103 | 6-166 |     85 |</span><br><span class="line">| 105 | 3-105 |     88 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.查询student表中“95031”班或性别为女的同学的记录</span><br><span class="line">mysql&gt; select * from student where class =&apos;95031&apos; or ssex=&apos;女&apos;;</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 7.以class降序查询student表的所有记录</span><br><span class="line">mysql&gt; select * from student order by class desc;#默认是升序asc，desc表示降序</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 101 | 曾华      | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 103 | 王丽      | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 104 | 李军      | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 8.以cno升序、degree降序(当cno相同时)查询score表的所有记录</span><br><span class="line">mysql&gt; select* from score order by cno asc,degree desc;</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |     92 |</span><br><span class="line">| 105 | 3-105 |     88 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">| 103 | 3-245 |     86 |</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">| 103 | 6-166 |     85 |</span><br><span class="line">| 109 | 6-166 |     81 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 9.查询“95031”班的学生人数</span><br><span class="line">mysql&gt; select count(*) from student where class=&apos;95031&apos;;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|        5 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 10.查询score表中的最高分的学生学号和课程号(子查询或者排序)</span><br><span class="line"></span><br><span class="line"># 子查询方式</span><br><span class="line">mysql&gt; select sno,cno from score where degree =(select max(degree) from score);</span><br><span class="line">+-----+-------+</span><br><span class="line">| sno | cno   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 103 | 3-105 |</span><br><span class="line">+-----+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">#排序方式</span><br><span class="line">mysql&gt; select sno,cno from score order by degree (desc) limit 0,1;</span><br><span class="line">+-----+-------+</span><br><span class="line">| sno | cno   |</span><br><span class="line">+-----+-------+</span><br><span class="line">| 109 | 3-245 |</span><br><span class="line">+-----+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#注释：limit和python中的range作用类似</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># 11.查询每门课的平均成绩</span><br><span class="line"></span><br><span class="line">#先看一下总共有哪些课程</span><br><span class="line">mysql&gt; select * from course;</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| cno   | cname           | tno |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">| 3-105 | 计算机导论      | 825 |</span><br><span class="line">| 3-245 | 操作系统        | 804 |</span><br><span class="line">| 6-166 | 数字电路        | 856 |</span><br><span class="line">| 9-888 | 高等数学        | 831 |</span><br><span class="line">+-------+-----------------+-----+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#然后可以使用avg函数求平均值</span><br><span class="line">mysql&gt; select avg(degree) from score where cno=&apos;3-105&apos;;</span><br><span class="line">+-------------+</span><br><span class="line">| avg(degree) |</span><br><span class="line">+-------------+</span><br><span class="line">|     85.3333 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(degree) from score where cno=&apos;3-245&apos;;</span><br><span class="line">+-------------+</span><br><span class="line">| avg(degree) |</span><br><span class="line">+-------------+</span><br><span class="line">|     76.3333 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(degree) from score where cno=&apos;6-166&apos;;</span><br><span class="line">+-------------+</span><br><span class="line">| avg(degree) |</span><br><span class="line">+-------------+</span><br><span class="line">|     81.6667 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select avg(degree) from score where cno=&apos;9-888&apos;;</span><br><span class="line">+-------------+</span><br><span class="line">| avg(degree) |</span><br><span class="line">+-------------+</span><br><span class="line">|        NULL |</span><br><span class="line">+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#也可以写在一条SQL语句中（使用group by）</span><br><span class="line">mysql&gt; select cno,avg(degree) from score group by cno;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| cno   | avg(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#12.查询score表中至少有2名学生选修的并以3开头的课程的平均分数</span><br><span class="line">mysql&gt; select cno,avg(degree) from score group by cno;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| cno   | avg(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">| 6-166 |     81.6667 |</span><br><span class="line">+-------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line">#这样查出来是所有课程的平均成绩，接下来只选出以3开头的(使用like)</span><br><span class="line">mysql&gt; select cno,avg(degree) from score group by cno</span><br><span class="line">    -&gt; having cno like &apos;3%&apos;;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| cno   | avg(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">+-------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#那还有&quot;至少有两名同学选修&quot;这个条件，这个例子只是刚好凑巧了，我们需要这样写才对：</span><br><span class="line">mysql&gt; select cno,avg(degree) from score group by cno</span><br><span class="line">    -&gt; having count(cno)&gt;=2 and cno like &apos;3%&apos;;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| cno   | avg(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     85.3333 |</span><br><span class="line">| 3-245 |     76.3333 |</span><br><span class="line">+-------+-------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>注释 ：having(过滤的意思) 用于分组后，where用于分组前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 13. 查询分数大于70，小于90的sno列</span><br><span class="line">mysql&gt; select sno ,degree from score where degree &gt;70 and degree &lt; 90;</span><br><span class="line">+-----+--------+</span><br><span class="line">| sno | degree |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 103 |     86 |</span><br><span class="line">| 103 |     85 |</span><br><span class="line">| 105 |     88 |</span><br><span class="line">| 105 |     75 |</span><br><span class="line">| 105 |     79 |</span><br><span class="line">| 109 |     76 |</span><br><span class="line">| 109 |     81 |</span><br><span class="line">+-----+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br><span class="line">#或者</span><br><span class="line">mysql&gt; select sno ,degree from score where degree between 70 and 90;</span><br><span class="line">+-----+--------+</span><br><span class="line">| sno | degree |</span><br><span class="line">+-----+--------+</span><br><span class="line">| 103 |     86 |</span><br><span class="line">| 103 |     85 |</span><br><span class="line">| 105 |     88 |</span><br><span class="line">| 105 |     75 |</span><br><span class="line">| 105 |     79 |</span><br><span class="line">| 109 |     76 |</span><br><span class="line">| 109 |     81 |</span><br><span class="line">+-----+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 14.查询所有学生的sname、cno和degree列</span><br><span class="line">mysql&gt; select sname ,cno,degree from student,score where student.sno=score.sno ;</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| sname     | cno   | degree |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">| 王丽      | 3-105 |     92 |</span><br><span class="line">| 王丽      | 3-245 |     86 |</span><br><span class="line">| 王丽      | 6-166 |     85 |</span><br><span class="line">| 王芳      | 3-105 |     88 |</span><br><span class="line">| 王芳      | 3-245 |     75 |</span><br><span class="line">| 王芳      | 6-166 |     79 |</span><br><span class="line">| 赵铁柱    | 3-105 |     76 |</span><br><span class="line">| 赵铁柱    | 3-245 |     68 |</span><br><span class="line">| 赵铁柱    | 6-166 |     81 |</span><br><span class="line">+-----------+-------+--------+</span><br><span class="line">9 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 15.查询所有学生的sno、cname和degree列</span><br><span class="line">mysql&gt; select sno,cname,degree from course,score where course.cno=score.cno;</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| sno | cname           | degree |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">| 103 | 计算机导论      |     92 |</span><br><span class="line">| 103 | 操作系统        |     86 |</span><br><span class="line">| 103 | 数字电路        |     85 |</span><br><span class="line">| 105 | 计算机导论      |     88 |</span><br><span class="line">| 105 | 操作系统        |     75 |</span><br><span class="line">| 105 | 数字电路        |     79 |</span><br><span class="line">| 109 | 计算机导论      |     76 |</span><br><span class="line">| 109 | 操作系统        |     68 |</span><br><span class="line">| 109 | 数字电路        |     81 |</span><br><span class="line">+-----+-----------------+--------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#16. 查询所有学生的sname、cname和degree列</span><br><span class="line">mysql&gt; select sname,cname,degree from student,course,score where student.sno=score.sno and course.cno=score.cno;</span><br><span class="line">+-----------+-----------------+--------+</span><br><span class="line">| sname     | cname           | degree |</span><br><span class="line">+-----------+-----------------+--------+</span><br><span class="line">| 王丽      | 计算机导论      |     92 |</span><br><span class="line">| 王丽      | 操作系统        |     86 |</span><br><span class="line">| 王丽      | 数字电路        |     85 |</span><br><span class="line">| 王芳      | 计算机导论      |     88 |</span><br><span class="line">| 王芳      | 操作系统        |     75 |</span><br><span class="line">| 王芳      | 数字电路        |     79 |</span><br><span class="line">| 赵铁柱    | 计算机导论      |     76 |</span><br><span class="line">| 赵铁柱    | 操作系统        |     68 |</span><br><span class="line">| 赵铁柱    | 数字电路        |     81 |</span><br><span class="line">+-----------+-----------------+--------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#more,用as给字段起个别名</span><br><span class="line">mysql&gt; select sname,cname,degree ,student.sno as stu_no,course.cno as cour_no from student,course,score where student.sno=score.sno and course.cno=score.cno;</span><br><span class="line">+-----------+-----------------+--------+--------+---------+</span><br><span class="line">| sname     | cname           | degree | stu_no | cour_no |</span><br><span class="line">+-----------+-----------------+--------+--------+---------+</span><br><span class="line">| 王丽      | 计算机导论      |     92 | 103    | 3-105   |</span><br><span class="line">| 王丽      | 操作系统        |     86 | 103    | 3-245   |</span><br><span class="line">| 王丽      | 数字电路        |     85 | 103    | 6-166   |</span><br><span class="line">| 王芳      | 计算机导论      |     88 | 105    | 3-105   |</span><br><span class="line">| 王芳      | 操作系统        |     75 | 105    | 3-245   |</span><br><span class="line">| 王芳      | 数字电路        |     79 | 105    | 6-166   |</span><br><span class="line">| 赵铁柱    | 计算机导论      |     76 | 109    | 3-105   |</span><br><span class="line">| 赵铁柱    | 操作系统        |     68 | 109    | 3-245   |</span><br><span class="line">| 赵铁柱    | 数字电路        |     81 | 109    | 6-166   |</span><br><span class="line">+-----------+-----------------+--------+--------+---------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line">#more，不指明哪个表的sno和cno会报错，因为有多个表(如score表中有这两个字段)都有该字段</span><br><span class="line">mysql&gt; select sname,cname,degree ,student.sno,course.cno from student,course,score where student.sno=score.sno and course.cno=score.cno;</span><br><span class="line">+-----------+-----------------+--------+-----+-------+</span><br><span class="line">| sname     | cname           | degree | sno | cno   |</span><br><span class="line">+-----------+-----------------+--------+-----+-------+</span><br><span class="line">| 王丽      | 计算机导论      |     92 | 103 | 3-105 |</span><br><span class="line">| 王丽      | 操作系统        |     86 | 103 | 3-245 |</span><br><span class="line">| 王丽      | 数字电路        |     85 | 103 | 6-166 |</span><br><span class="line">| 王芳      | 计算机导论      |     88 | 105 | 3-105 |</span><br><span class="line">| 王芳      | 操作系统        |     75 | 105 | 3-245 |</span><br><span class="line">| 王芳      | 数字电路        |     79 | 105 | 6-166 |</span><br><span class="line">| 赵铁柱    | 计算机导论      |     76 | 109 | 3-105 |</span><br><span class="line">| 赵铁柱    | 操作系统        |     68 | 109 | 3-245 |</span><br><span class="line">| 赵铁柱    | 数字电路        |     81 | 109 | 6-166 |</span><br><span class="line">+-----------+-----------------+--------+-----+-------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 17.查询“95031”班学生每门课的平均分</span><br><span class="line">mysql&gt; select cno ,avg(degree) from score where sno in(select sno from student where class=&apos;95031&apos;) group by cno;</span><br><span class="line">+-------+-------------+</span><br><span class="line">| cno   | avg(degree) |</span><br><span class="line">+-------+-------------+</span><br><span class="line">| 3-105 |     82.0000 |</span><br><span class="line">| 3-245 |     71.5000 |</span><br><span class="line">| 6-166 |     80.0000 |</span><br><span class="line">+-------+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 18.查询选修“3-105”课程的成绩高于“109”号同学“3-105”成绩的所有同学的记录</span><br><span class="line">mysql&gt; select * from score where cno=&apos;3-105&apos;and  degree&gt;(select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |     92 |</span><br><span class="line">| 105 | 3-105 |     88 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 19.查询成绩高于学号为“109”、课程号为“3-105”的成绩的所有记录</span><br><span class="line">mysql&gt; select * from score where degree&gt;(select degree from score where sno=&apos;109&apos; and cno=&apos;3-105&apos;);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |     92 |</span><br><span class="line">| 103 | 3-245 |     86 |</span><br><span class="line">| 103 | 6-166 |     85 |</span><br><span class="line">| 105 | 3-105 |     88 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 6-166 |     81 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 20. 查询和学号为108、101的同学同年出生的所有学生的sno、sanme和sbirthday列</span><br><span class="line">mysql&gt; select sno,sname,sbirthday from student  where year(sbirthday) in (select year(sbirthday) from student where sno in(108,101));</span><br><span class="line">+-----+-----------+---------------------+</span><br><span class="line">| sno | sname     | sbirthday           |</span><br><span class="line">+-----+-----------+---------------------+</span><br><span class="line">| 101 | 曾华      | 1977-09-01 00:00:00 |</span><br><span class="line">| 102 | 匡明      | 1975-10-02 00:00:00 |</span><br><span class="line">| 105 | 王芳      | 1975-02-10 00:00:00 |</span><br><span class="line">| 108 | 张全蛋    | 1975-02-10 00:00:00 |</span><br><span class="line">+-----+-----------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 21.查询“张旭”教师任课的学生成绩</span><br><span class="line">mysql&gt; select * from score where cno=(select cno from course where tno =( select tno from teacher where tname=&quot;张旭&quot;));</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 6-166 |     85 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 6-166 |     81 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 22. 查询选修某课程的同学人数多于5人的教师姓名</span><br><span class="line">#先再插入几条数据</span><br><span class="line">mysql&gt; insert into score values(&apos;101&apos;,&apos;3-105&apos;,&apos;90&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into score values(&apos;102&apos;,&apos;3-105&apos;,&apos;91&apos;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into score values(&apos;104&apos;,&apos;3-105&apos;,&apos;89&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">#开始查询</span><br><span class="line">mysql&gt; select tname from teacher where tno in (select tno from course where cno=(select cno from score  group by cno having count(*)&gt;5));</span><br><span class="line">+--------+</span><br><span class="line">| tname  |</span><br><span class="line">+--------+</span><br><span class="line">| 王萍   |</span><br><span class="line">+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 23.查询95033班和95031班全体学生的记录</span><br><span class="line">#先插入几条数据</span><br><span class="line">mysql&gt; insert into student values(&apos;110&apos;,&apos;张飞&apos;,&apos;男&apos;,&apos;1974-06-03&apos;,&apos;95038&apos;);</span><br><span class="line">Query OK, 1 row affected (0.04 sec)</span><br><span class="line">#查询</span><br><span class="line">mysql&gt; select * from student where class in(&apos;95031&apos;,&apos;95033&apos;);</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 101 | 曾华      | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 103 | 王丽      | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 104 | 李军      | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 105 | 王芳      | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 107 | 王尼玛    | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">+-----+-----------+------+--</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 24查询存在有85分以上成绩的课程cno</span><br><span class="line">mysql&gt; select  cno,degree from score where degree&gt;85;</span><br><span class="line">+-------+--------+</span><br><span class="line">| cno   | degree |</span><br><span class="line">+-------+--------+</span><br><span class="line">| 3-105 |     90 |</span><br><span class="line">| 3-105 |     91 |</span><br><span class="line">| 3-105 |     92 |</span><br><span class="line">| 3-245 |     86 |</span><br><span class="line">| 3-105 |     89 |</span><br><span class="line">| 3-105 |     88 |</span><br><span class="line">+-------+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 25. 查询出“计算机系”教师所教课程的成绩表</span><br><span class="line">mysql&gt; select * from score where cno in (select cno from course where tno in (select tno from teacher where depart=&quot;计算机系&quot;));</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-245 |     86 |</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">| 101 | 3-105 |     90 |</span><br><span class="line">| 102 | 3-105 |     91 |</span><br><span class="line">| 103 | 3-105 |     92 |</span><br><span class="line">| 104 | 3-105 |     89 |</span><br><span class="line">| 105 | 3-105 |     88 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="union-求并集-和not-in"><a href="#union-求并集-和not-in" class="headerlink" title="union(求并集) 和not in"></a>union(求并集) 和not in</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 26. 查询“计算机系”与“电子工程系”不同职称的教师的tname和prof(取交集之外的记录)</span><br><span class="line">mysql&gt; select tname,prof from teacher where depart =&apos;计算机系&apos; and prof not in (select prof from teacher where depart =&apos;电子工程系&apos;)</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select tname,prof from teacher where depart =&apos;电子工程系&apos; and prof not in (select prof from teacher where depart =&apos;计算机系&apos;);</span><br><span class="line">+--------+-----------+</span><br><span class="line">| tname  | prof      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">| 李诚   | 副教授    |</span><br><span class="line">| 张旭   | 讲师      |</span><br><span class="line">+--------+-----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h4 id="any：至少一个（只要有一个就行）"><a href="#any：至少一个（只要有一个就行）" class="headerlink" title="any：至少一个（只要有一个就行）"></a>any：至少一个（只要有一个就行）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 27. 查询选修编号为“3-105”课程且成绩至少高于选修编号为“3-245”的同学的成绩中的任意一个的cno、sno和degree</span><br><span class="line">mysql&gt; select cno,sno,degree from score</span><br><span class="line">    -&gt; where cno=&apos;3-105&apos;</span><br><span class="line">    -&gt; and degree&gt;any(select degree from score where cno=&apos;3-245&apos;)</span><br><span class="line">    -&gt; order by degree desc;</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">| cno   | sno | degree |</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">| 3-105 | 103 |     92 |</span><br><span class="line">| 3-105 | 102 |     91 |</span><br><span class="line">| 3-105 | 101 |     90 |</span><br><span class="line">| 3-105 | 104 |     89 |</span><br><span class="line">| 3-105 | 105 |     88 |</span><br><span class="line">| 3-105 | 109 |     76 |</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="all：全部（都要满足）"><a href="#all：全部（都要满足）" class="headerlink" title="all：全部（都要满足）"></a>all：全部（都要满足）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 28.查询编号为‘3-105’且成绩高于编号为‘3-245’课程的同学的cno、sno和degree</span><br><span class="line">mysql&gt; select cno,sno,degree from score</span><br><span class="line">    -&gt; where cno=&apos;3-105&apos;</span><br><span class="line">    -&gt; and degree&gt;all(select degree from score where cno=&apos;3-245&apos;)</span><br><span class="line">    -&gt; order by degree desc;</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">| cno   | sno | degree |</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">| 3-105 | 103 |     92 |</span><br><span class="line">| 3-105 | 102 |     91 |</span><br><span class="line">| 3-105 | 101 |     90 |</span><br><span class="line">| 3-105 | 104 |     89 |</span><br><span class="line">| 3-105 | 105 |     88 |</span><br><span class="line">+-------+-----+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="as取别名"><a href="#as取别名" class="headerlink" title="as取别名"></a>as取别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 29.查询所有教师和同学的name、sex和birthday</span><br><span class="line">mysql&gt; select tname as 姓名,tsex as 性别,tbirthday 生日 from teacher</span><br><span class="line">    -&gt; union#列名跟随第一个</span><br><span class="line">    -&gt; select sname,ssex,sbirthday from student;</span><br><span class="line">+-----------+--------+---------------------+</span><br><span class="line">| 姓名      | 性别   | 生日                |</span><br><span class="line">+-----------+--------+---------------------+</span><br><span class="line">| 李诚      | 男     | 1958-12-02 00:00:00 |</span><br><span class="line">| 王萍      | 女     | 1972-05-05 00:00:00 |</span><br><span class="line">| 刘冰      | 女     | 1977-08-14 00:00:00 |</span><br><span class="line">| 张旭      | 男     | 1969-03-12 00:00:00 |</span><br><span class="line">| 曾华      | 男     | 1977-09-01 00:00:00 |</span><br><span class="line">| 匡明      | 男     | 1975-10-02 00:00:00 |</span><br><span class="line">| 王丽      | 女     | 1976-01-23 00:00:00 |</span><br><span class="line">| 李军      | 男     | 1976-02-20 00:00:00 |</span><br><span class="line">| 王芳      | 女     | 1975-02-10 00:00:00 |</span><br><span class="line">| 陆军      | 男     | 1974-06-03 00:00:00 |</span><br><span class="line">| 王尼玛    | 男     | 1976-02-20 00:00:00 |</span><br><span class="line">| 张全蛋    | 男     | 1975-02-10 00:00:00 |</span><br><span class="line">| 赵铁柱    | 男     | 1974-06-03 00:00:00 |</span><br><span class="line">| 张飞      | 男     | 1974-06-03 00:00:00 |</span><br><span class="line">+-----------+--------+---------------------+</span><br><span class="line">14 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="union求并集"><a href="#union求并集" class="headerlink" title="union求并集"></a>union求并集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 30.查询所有“女”教师和“女”同学的name，sex和birthday</span><br><span class="line">mysql&gt; select tname as 姓名,tsex as 性别,tbirthday 生日 from teacher where tsex=&apos;女&apos;</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select sname,ssex,sbirthday from student where ssex=&apos;女&apos;;</span><br><span class="line">+--------+--------+---------------------+</span><br><span class="line">| 姓名   | 性别   | 生日                |</span><br><span class="line">+--------+--------+---------------------+</span><br><span class="line">| 王萍   | 女     | 1972-05-05 00:00:00 |</span><br><span class="line">| 刘冰   | 女     | 1977-08-14 00:00:00 |</span><br><span class="line">| 王丽   | 女     | 1976-01-23 00:00:00 |</span><br><span class="line">| 王芳   | 女     | 1975-02-10 00:00:00 |</span><br><span class="line">+--------+--------+---------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 31. 查询成绩比该课程平均成绩低的同学的成绩表</span><br><span class="line">mysql&gt; select * from score a where degree&lt;(select avg(degree) from score b where a.cno=b.cno);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">| 109 | 6-166 |     81 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">-- 但是我感觉上面的不对，正确的如下：</span><br><span class="line">mysql&gt; select * from score a where degree&lt;(select avg(degree) from score b group by cno having a.cno=b.cno);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 105 | 3-245 |     75 |</span><br><span class="line">| 105 | 6-166 |     79 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">| 109 | 3-245 |     68 |</span><br><span class="line">| 109 | 6-166 |     81 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 32.查询所有任课教师的tname和depart</span><br><span class="line">mysql&gt; select tname ,depart from teacher where tno in (select tno from course);</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| tname  | depart          |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">| 李诚   | 计算机系        |</span><br><span class="line">| 王萍   | 计算机系        |</span><br><span class="line">| 刘冰   | 电子工程系      |</span><br><span class="line">| 张旭   | 电子工程系      |</span><br><span class="line">+--------+-----------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 33. 查询至少有两名男生的班号</span><br><span class="line">mysql&gt; select class from student  where ssex=&apos;男&apos; group by class having count(class)&gt;=2;</span><br><span class="line">+-------+</span><br><span class="line">| class |</span><br><span class="line">+-------+</span><br><span class="line">| 95031 |</span><br><span class="line">| 95033 |</span><br><span class="line">+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="not-like"><a href="#not-like" class="headerlink" title="not like"></a>not like</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查询student表中不姓“王”的同学记录</span><br><span class="line">mysql&gt; select * from student where sname not like &apos;王%&apos; ;</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 101 | 曾华      | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">| 104 | 李军      | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 110 | 张飞      | 男   | 1974-06-03 00:00:00 | 95038 |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="year和now函数"><a href="#year和now函数" class="headerlink" title="year和now函数"></a>year和now函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 35.查询student表中每个学生的姓名和年龄</span><br><span class="line">mysql&gt; select sname,year(now())-year(sbirthday) as &apos;年龄&apos; from student;#as可省略</span><br><span class="line">+-----------+--------+</span><br><span class="line">| sname     | 年龄   |</span><br><span class="line">+-----------+--------+</span><br><span class="line">| 曾华      |     43 |</span><br><span class="line">| 匡明      |     45 |</span><br><span class="line">| 王丽      |     44 |</span><br><span class="line">| 李军      |     44 |</span><br><span class="line">| 王芳      |     45 |</span><br><span class="line">| 陆军      |     46 |</span><br><span class="line">| 王尼玛    |     44 |</span><br><span class="line">| 张全蛋    |     45 |</span><br><span class="line">| 赵铁柱    |     46 |</span><br><span class="line">| 张飞      |     46 |</span><br><span class="line">+-----------+--------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="max与min"><a href="#max与min" class="headerlink" title="max与min"></a>max与min</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 36. 查询student表中最大和最小的sbirthday日期值</span><br><span class="line">mysql&gt; select max(sbirthday)as &apos;最大&apos;,min(sbirthday) as &apos;最小&apos; from student;</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| 最大                | 最小                |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">| 1977-09-01 00:00:00 | 1974-06-03 00:00:00 |</span><br><span class="line">+---------------------+---------------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure><h4 id="多字段排序"><a href="#多字段排序" class="headerlink" title="多字段排序"></a>多字段排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 37.以班号和年龄从大到小的顺序查询student表中的全部记录</span><br><span class="line">mysql&gt; select * from student order by class desc,sbirthday;</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| sno | sname     | ssex | sbirthday           | class |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">| 110 | 张飞      | 男   | 1974-06-03 00:00:00 | 95038 |</span><br><span class="line">| 103 | 王丽      | 女   | 1976-01-23 00:00:00 | 95033 |</span><br><span class="line">| 104 | 李军      | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 107 | 王尼玛    | 男   | 1976-02-20 00:00:00 | 95033 |</span><br><span class="line">| 101 | 曾华      | 男   | 1977-09-01 00:00:00 | 95033 |</span><br><span class="line">| 106 | 陆军      | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 109 | 赵铁柱    | 男   | 1974-06-03 00:00:00 | 95031 |</span><br><span class="line">| 105 | 王芳      | 女   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 108 | 张全蛋    | 男   | 1975-02-10 00:00:00 | 95031 |</span><br><span class="line">| 102 | 匡明      | 男   | 1975-10-02 00:00:00 | 95031 |</span><br><span class="line">+-----+-----------+------+---------------------+-------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 38.查询“男”教师及其所上的课程</span><br><span class="line">mysql&gt; select * from course where tno in (select tno from teacher where tsex=&apos;男&apos;);</span><br><span class="line">+-------+--------------+-----+</span><br><span class="line">| cno   | cname        | tno |</span><br><span class="line">+-------+--------------+-----+</span><br><span class="line">| 3-245 | 操作系统     | 804 |</span><br><span class="line">| 6-166 | 数字电路     | 856 |</span><br><span class="line">+-------+--------------+-----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="max函数与子查询"><a href="#max函数与子查询" class="headerlink" title="max函数与子查询"></a>max函数与子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 39.查询最高分同学的sno、cno和degree列</span><br><span class="line">mysql&gt; select sno,cno,degree from score where degree =(select max(degree) from score);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 103 | 3-105 |     92 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="继续子查询"><a href="#继续子查询" class="headerlink" title="继续子查询"></a>继续子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 40.查询和“李军”同性别的所有同学的sname</span><br><span class="line">mysql&gt; select sname from student where ssex =(select ssex from student where sname=&apos;李军&apos;);</span><br><span class="line">+-----------+</span><br><span class="line">| sname     |</span><br><span class="line">+-----------+</span><br><span class="line">| 曾华      |</span><br><span class="line">| 匡明      |</span><br><span class="line">| 李军      |</span><br><span class="line">| 陆军      |</span><br><span class="line">| 王尼玛    |</span><br><span class="line">| 张全蛋    |</span><br><span class="line">| 赵铁柱    |</span><br><span class="line">| 张飞      |</span><br><span class="line">+-----------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 41.查询和&quot;李军&quot;同性别且同班级的同学的sname</span><br><span class="line">mysql&gt; select sname from student</span><br><span class="line">    -&gt; where ssex =(select ssex from student where sname=&apos;李军&apos;)</span><br><span class="line">    -&gt; and</span><br><span class="line">    -&gt; class=(select class from student where sname =&apos;李军&apos;);</span><br><span class="line">+-----------+</span><br><span class="line">| sname     |</span><br><span class="line">+-----------+</span><br><span class="line">| 曾华      |</span><br><span class="line">| 李军      |</span><br><span class="line">| 王尼玛    |</span><br><span class="line">+-----------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 42.查询所有选修“计算机导论”课程的“男”同学的成绩</span><br><span class="line">mysql&gt; select * from score where</span><br><span class="line">    -&gt; cno=(select cno from course where cname=&apos;计算机导论&apos;)</span><br><span class="line">    -&gt; and</span><br><span class="line">    -&gt; sno in (select sno from student where ssex=&apos;男&apos;);</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| sno | cno   | degree |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">| 101 | 3-105 |     90 |</span><br><span class="line">| 102 | 3-105 |     91 |</span><br><span class="line">| 104 | 3-105 |     89 |</span><br><span class="line">| 109 | 3-105 |     76 |</span><br><span class="line">+-----+-------+--------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="按等级查询"><a href="#按等级查询" class="headerlink" title="按等级查询"></a>按等级查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"># 43.假设建立一个 grade 表代表学生的成绩等级，并插入数据：</span><br><span class="line"></span><br><span class="line">CREATE TABLE grade (</span><br><span class="line">    low INT(3),</span><br><span class="line">    upp INT(3),</span><br><span class="line">    grade char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO grade VALUES (90, 100, &apos;A&apos;);</span><br><span class="line">INSERT INTO grade VALUES (80, 89, &apos;B&apos;);</span><br><span class="line">INSERT INTO grade VALUES (70, 79, &apos;C&apos;);</span><br><span class="line">INSERT INTO grade VALUES (60, 69, &apos;D&apos;);</span><br><span class="line">INSERT INTO grade VALUES (0, 59, &apos;E&apos;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM grade;</span><br><span class="line">+------+------+-------+</span><br><span class="line">| low  | upp  | grade |</span><br><span class="line">+------+------+-------+</span><br><span class="line">|   90 |  100 | A     |</span><br><span class="line">|   80 |   89 | B     |</span><br><span class="line">|   70 |   79 | C     |</span><br><span class="line">|   60 |   69 | D     |</span><br><span class="line">|    0 |   59 | E     |</span><br><span class="line">+------+------+-------+</span><br><span class="line"></span><br><span class="line"># 现在查询所有同学的sno,cno和grade列</span><br><span class="line">mysql&gt; select sno ,cno,grade from score,grade where degree between low and upp;</span><br><span class="line">+-----+-------+-------+</span><br><span class="line">| sno | cno   | grade |</span><br><span class="line">+-----+-------+-------+</span><br><span class="line">| 101 | 3-105 | A     |</span><br><span class="line">| 102 | 3-105 | A     |</span><br><span class="line">| 103 | 3-105 | A     |</span><br><span class="line">| 103 | 3-245 | B     |</span><br><span class="line">| 103 | 6-166 | B     |</span><br><span class="line">| 104 | 3-105 | B     |</span><br><span class="line">| 105 | 3-105 | B     |</span><br><span class="line">| 105 | 3-245 | C     |</span><br><span class="line">| 105 | 6-166 | C     |</span><br><span class="line">| 109 | 3-105 | C     |</span><br><span class="line">| 109 | 3-245 | D     |</span><br><span class="line">| 109 | 6-166 | B     |</span><br><span class="line">+-----+-------+-------+</span><br><span class="line">12 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="SQL的四种连接查询"><a href="#SQL的四种连接查询" class="headerlink" title="SQL的四种连接查询"></a>SQL的四种连接查询</h4><p>内连接：inner join 或者join</p><p>外连接：</p><p>​    左连接：left join 或者left outer join</p><p>​    右连接：right join 或者right outer join</p><p>完全外连接：full join 或者full outer join</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 先准备一些数据，用于连接查询练习</span><br><span class="line">CREATE DATABASE testJoin;</span><br><span class="line"></span><br><span class="line">CREATE TABLE person (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    cardId INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE card (</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO card VALUES (1, &apos;饭卡&apos;), (2, &apos;建行卡&apos;), (3, &apos;农行卡&apos;), (4, &apos;工商卡&apos;), (5, &apos;邮政卡&apos;);</span><br><span class="line">SELECT * FROM card;</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">|    1 | 饭卡      |</span><br><span class="line">|    2 | 建行卡    |</span><br><span class="line">|    3 | 农行卡    |</span><br><span class="line">|    4 | 工商卡    |</span><br><span class="line">|    5 | 邮政卡    |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">INSERT INTO person VALUES (1, &apos;张三&apos;, 1), (2, &apos;李四&apos;, 3), (3, &apos;王五&apos;, 6);</span><br><span class="line">SELECT * FROM person;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | name   | cardId |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">|    1 | 张三   |      1 |</span><br><span class="line">|    2 | 李四   |      3 |</span><br><span class="line">|    3 | 王五   |      6 |</span><br><span class="line">+------+--------+--------+</span><br></pre></td></tr></table></figure><p>注意：</p><p>​    我们并没有创建外键</p><p>​    王五的cardID不能对应id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># inner join (内连接)查询(求交集，其实就是两张表中的数据通过某个字段相等查询出相关记录)</span><br><span class="line">mysql&gt; select * from person (inner) join card on person.cardId=card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># left join (左外连接)查询，这种方式会把左边表的所有数据取出来，而右边的数据，如果有相等的就取出来，如果没有就会补NULL</span><br><span class="line">mysql&gt; select * from person left (outer) join card on person.cardId =card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">|    3 | 王五   |      6 | NULL | NULL      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># right join(右外连接)，这种方式会把右边表的所有数据取出来，而左边的数据，如果有相等的就显示出来，如果没有就会补NULL</span><br><span class="line">mysql&gt; select * from person right (outer) join card on person.cardId =card.id;</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">| id   | name   | cardId | id   | name      |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">|    1 | 张三   |      1 |    1 | 饭卡      |</span><br><span class="line">|    2 | 李四   |      3 |    3 | 农行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    2 | 建行卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    4 | 工商卡    |</span><br><span class="line">| NULL | NULL   |   NULL |    5 | 邮政卡    |</span><br><span class="line">+------+--------+--------+------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#  full join (全外连接)：没有就补NULL，一个也不能落下</span><br><span class="line">-- mysql不支持</span><br></pre></td></tr></table></figure><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p> 在 MySQL 中，事务其实是一个最小的不可分割的工作单元。事务能够<strong>保证一个业务的完整性</strong>。 </p><p>在实际项目中，假设只有一条 SQL 语句执行成功，而另外一条执行失败了，就会出现数据前后不一致。</p><p>因此，在执行多条有关联 SQL 语句时，<strong>事务</strong>可能会要求这些 SQL 语句要么同时执行成功，要么就都执行失败。</p><h5 id="如何控制事务"><a href="#如何控制事务" class="headerlink" title="如何控制事务"></a>如何控制事务</h5><p>在MySQL中，事务的自动提交默认开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@autocommit;</span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>开启之后，不能回滚(无法反悔)，可以设置autocommit为0来关闭自动提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@autocommit;</span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>此时可以通过rollback回滚来回到上一次提交的状态，通过commit来手动提交，举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE bank;</span><br><span class="line"></span><br><span class="line">USE bank;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user VALUES (1, &apos;a&apos;, 1000);</span><br><span class="line">INSERT INTO user VALUES (2, &apos;b&apos;, 1000);</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#由于关闭了autocommit，所以可以回滚到上一次提交的状态（上一次提交时我们还没有创建这里的表，所以是空了）</span><br><span class="line">mysql&gt; rollback;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">Empty set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#现在再把数据插入一条</span><br><span class="line">mysql&gt; INSERT INTO user VALUES (1, &apos;a&apos;, 1000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br><span class="line">#select * from user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#然后手动提交</span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">#现在再插入一条数据</span><br><span class="line">mysql&gt; INSERT INTO user VALUES (2, &apos;b&apos;, 1000);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#再次回滚</span><br><span class="line">mysql&gt; rollback;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">+----+------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">#由于手动提交了一次，所以现在只能回到上次提交时的状态了</span><br></pre></td></tr></table></figure><h5 id="手动开启一个事务-局部"><a href="#手动开启一个事务-局部" class="headerlink" title="手动开启一个事务(局部)"></a>手动开启一个事务(局部)</h5><p>可以使用 begin 或者 start transaction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-- 使用 BEGIN 或者 START TRANSACTION 手动开启一个事务</span><br><span class="line">#先开启自动提交</span><br><span class="line">mysql&gt; set autocommit=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select@@autocommit;</span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            1 |</span><br><span class="line">+--------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">#开启一个事务</span><br><span class="line">-- START TRANSACTION;</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &apos;a&apos;;</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &apos;b&apos;;</span><br><span class="line"></span><br><span class="line">-- 由于手动开启的事务没有开启自动提交，</span><br><span class="line">-- 此时发生变化的数据仍然是被保存在一张临时表中。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 测试回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line">#看，在开启自动提交时，使用beigin或者start transaction可以回滚</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |  1000 |</span><br><span class="line">|  2 | b    |  1000 |</span><br><span class="line">+----+------+-------+</span><br></pre></td></tr></table></figure><p>仍然使用 <code>COMMIT</code> 提交数据，提交后无法再发生本次事务的回滚。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#此时已开启自动提交，但是之后又开启了一个事务，当事务结束时，我们可以通过手动提交的方式来结束事务，现在再来测试</span><br><span class="line">BEGIN;</span><br><span class="line">UPDATE user set money = money - 100 WHERE name = &apos;a&apos;;</span><br><span class="line">UPDATE user set money = money + 100 WHERE name = &apos;b&apos;;</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line"></span><br><span class="line">-- 手动提交数据</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 测试回滚（无效，因为表的数据已经被提交）</span><br><span class="line">ROLLBACK;</span><br><span class="line">mysql&gt; SELECT * FROM user;</span><br><span class="line">+----+------+-------+</span><br><span class="line">| id | name | money |</span><br><span class="line">+----+------+-------+</span><br><span class="line">|  1 | a    |   900 |</span><br><span class="line">|  2 | b    |  1100 |</span><br><span class="line">+----+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="事务的四大特性"><a href="#事务的四大特性" class="headerlink" title="事务的四大特性"></a>事务的四大特性</h5><p>A 原子性</p><blockquote><p> 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。 </p></blockquote><p>C 一致性</p><blockquote><p> 一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p></blockquote><p>I 隔离性</p><blockquote><p>事务1和是事务2之间是具有隔离性的</p></blockquote><p>D 持久性</p><blockquote><p>事务一旦结束，就不可返回(比如commit之后就不能rollback)</p></blockquote><h5 id="事务的隔离性可分为4种-性能由低到高-：隔离级别越高，性能越低"><a href="#事务的隔离性可分为4种-性能由低到高-：隔离级别越高，性能越低" class="headerlink" title="事务的隔离性可分为4种(性能由低到高)：隔离级别越高，性能越低"></a>事务的隔离性可分为4种(性能由低到高)：隔离级别越高，性能越低</h5><ol><li><p><strong>READ UNCOMMITTED ( 读取未提交 )</strong></p><p>如果有多个事务，那么任意事务都可以看见其他事务的<strong>未提交数据</strong>。</p></li><li><p><strong>READ COMMITTED ( 读取已提交 )</strong></p><p>只能读取到其他事务<strong>已经提交的数据</strong>。</p></li><li><p><strong>REPEATABLE READ ( 可被重复读 )</strong>,默认是这个</p><p>如果有多个连接都开启了事务，那么事务之间不能共享数据记录，否则只能共享已提交的记录。</p></li><li><p><strong>SERIALIZABLE ( 串行化 )</strong></p><p>所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong>。</p></li></ol><p>查看当前数据库的默认隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- MySQL 8.x, GLOBAL 表示系统级别，不加表示会话级别。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">SELECT @@TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                | -- MySQL的默认隔离级别，可以重复读。</span><br><span class="line">+--------------------------------+</span><br><span class="line"></span><br><span class="line">-- MySQL 5.x</span><br><span class="line">SELECT @@GLOBAL.TX_ISOLATION;</span><br><span class="line">SELECT @@TX_ISOLATION;</span><br></pre></td></tr></table></figure><p>修改隔离级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 设置系统隔离级别，LEVEL 后面表示要设置的隔离级别 (READ UNCOMMITTED)。</span><br><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br><span class="line"></span><br><span class="line">-- 查询系统隔离级别，发现已经被修改。</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-UNCOMMITTED               |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p><strong>1.脏读（READ UNCOMMITTED）</strong></p><p>测试 <strong>READ UNCOMMITTED ( 读取未提交的 )</strong> 的隔离性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (3, &apos;小明&apos;, 1000);</span><br><span class="line">INSERT INTO user VALUES (4, &apos;淘宝店&apos;, 1000);</span><br><span class="line"></span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 开启一个事务操作数据</span><br><span class="line">-- 假设小明在淘宝店买了一双800块钱的鞋子：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money = money - 800 WHERE name = &apos;小明&apos;;</span><br><span class="line">UPDATE user SET money = money + 800 WHERE name = &apos;淘宝店&apos;;</span><br><span class="line"></span><br><span class="line">-- 然后淘宝店在另一方查询结果，发现钱已到账。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>由于小明的转账是在新开启的事务上进行操作的，而该操作的结果是可以被其他事务（另一方的淘宝店）看见的，因此淘宝店的查询结果是正确的，淘宝店确认到账。但就在这时，如果小明在它所处的事务上又执行了 <code>ROLLBACK</code> 命令，会发生什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 小明所处的事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 此时无论对方是谁，如果再去查询结果就会发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>这就是所谓的<strong>脏读</strong>，一个事务读取到另外一个事务还未提交的数据。这在实际开发中是不允许出现的。</p><p><strong>2.不可重复读：READ COMMITTED ( 读取已提交 的)  </strong></p><p>把隔离级别设置为 <strong>READ COMMITTED</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| READ-COMMITTED                 |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>这样，再有新的事务连接进来时，它们就只能查询到已经提交过的事务数据了。但是对于当前事务来说，它们看到的还是未提交的数据，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 正在操作数据事务（当前事务）</span><br><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE user SET money = money - 800 WHERE name = &apos;小明&apos;;</span><br><span class="line">UPDATE user SET money = money + 800 WHERE name = &apos;淘宝店&apos;;</span><br><span class="line"></span><br><span class="line">-- 虽然隔离级别被设置为了 READ COMMITTED，但在当前事务中，</span><br><span class="line">-- 它看到的仍然是数据表中临时改变数据，而不是真正提交过的数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 假设此时在远程开启了一个新事务，连接到数据库。</span><br><span class="line">$ mysql -u root -p</span><br><span class="line"></span><br><span class="line">-- 此时远程连接查询到的数据只能是已经提交过的</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>但是这样还有问题，那就是假设一个事务在操作数据时，其他事务干扰了这个事务的数据。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">-- 小张在查询数据的时候发现：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |   200 |</span><br><span class="line">|  4 | 淘宝店    |  1800 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 在小张求表的 money 平均值之前，小王做了一个操作：</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (5, &apos;c&apos;, 100);</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">-- 此时表的真实数据是：</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 这时小张再求平均值的时候，就会出现计算不相符合的情况：</span><br><span class="line">SELECT AVG(money) FROM user;</span><br><span class="line">+------------+</span><br><span class="line">| AVG(money) |</span><br><span class="line">+------------+</span><br><span class="line">|  820.0000  |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure><p>虽然 <strong>READ COMMITTED</strong> 让我们只能读取到其他事务已经提交的数据，但还是会出现问题，就是<strong>在读取同一个表的数据时，可能会发生前后不一致的情况。这被称为</strong>不可重复读现象 ( READ COMMITTED )。</p><p><strong>3.幻读：REPEATABLE READ ( 可被重复读 )</strong></p><p>将隔离级别设置为 <strong>REPEATABLE READ ( 可被重复读取 )</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| REPEATABLE-READ                |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>测试 <strong>REPEATABLE READ</strong> ，假设在两个不同的连接上分别执行 <code>START TRANSACTION</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO user VALUES (6, &apos;d&apos;, 1000);</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小张 - 成都</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>当前事务开启后，没提交之前，查询不到，提交后可以被查询到。但是，在提交之前其他事务被开启了，那么在这条事务线上，就不会查询到当前有操作事务的连接。相当于开辟出一条单独的线程。</p><p>无论小张是否执行过 <code>COMMIT</code> ，在小王这边，都不会查询到小张的事务记录，而是只会查询到自己所处事务的记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">+----+-----------+-------+</span><br></pre></td></tr></table></figure><p>这是<strong>因为小王在此之前开启了一个新的事务 ( <code>START TRANSACTION</code> ) ，那么在他的这条新事务的线上，跟其他事务是没有联系的</strong>，也就是说，此时如果其他事务正在操作数据，它是不知道的。</p><p>然而事实是，在真实的数据表中，小张已经插入了一条数据。但是小王此时并不知道，也插入了同一条数据，会发生什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user VALUES (6, &apos;d&apos;, 1000);</span><br><span class="line">-- ERROR 1062 (23000): Duplicate entry &apos;6&apos; for key &apos;PRIMARY&apos;</span><br></pre></td></tr></table></figure><p>报错了，操作被告知已存在主键为 <code>6</code> 的字段。这种现象也被称为<strong>幻读，一个事务提交的数据，不能被其他事务读取到</strong>。</p><p><strong>4.串行化：SERIALIZABLE</strong> </p><p>顾名思义，就是所有事务的<strong>写入操作</strong>全都是串行化的。什么意思？把隔离级别修改成 <strong>SERIALIZABLE</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;</span><br><span class="line">SELECT @@GLOBAL.TRANSACTION_ISOLATION;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| @@GLOBAL.TRANSACTION_ISOLATION |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| SERIALIZABLE                   |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>还是拿小张和小王来举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 小张 - 成都</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 小王 - 北京</span><br><span class="line">START TRANSACTION;</span><br><span class="line"></span><br><span class="line">-- 开启事务之前先查询表，准备操作数据。</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">| id | name      | money |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line">|  1 | a         |   900 |</span><br><span class="line">|  2 | b         |  1100 |</span><br><span class="line">|  3 | 小明      |  1000 |</span><br><span class="line">|  4 | 淘宝店    |  1000 |</span><br><span class="line">|  5 | c         |   100 |</span><br><span class="line">|  6 | d         |  1000 |</span><br><span class="line">+----+-----------+-------+</span><br><span class="line"></span><br><span class="line">-- 发现没有 7 号王小花，于是插入一条数据：</span><br><span class="line">INSERT INTO user VALUES (7, &apos;王小花&apos;, 1000);</span><br></pre></td></tr></table></figure><p>此时会发生什么呢？由于现在的隔离级别是 <strong>SERIALIZABLE ( 串行化 )</strong> ，串行化的意思就是：假设把所有的事务都放在一个串行的队列中，那么所有的事务都会按照<strong>固定顺序执行</strong>，执行完一个事务后再继续执行下一个事务的<strong>写入操作</strong> ( <strong>这意味着队列中同时只能执行一个事务的写入操作</strong> ) 。</p><p>根据这个解释，小王在插入数据时，会出现等待状态，直到小张执行 <code>COMMIT</code> 结束它所处的事务，或者出现等待超时。</p><blockquote><p> 参考：</p></blockquote><p> <a href="https://www.bilibili.com/video/BV1Vt411z7wy?p=64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Vt411z7wy?p=64</a> </p><p><a href="https://github.com/hjzCy/sql_node/blob/master/mysql/MySQL学习笔记.md" target="_blank" rel="noopener">https://github.com/hjzCy/sql_node/blob/master/mysql/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.md</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;登录&quot;&gt;&lt;a href=&quot;#登录&quot; class=&quot;headerlink&quot; title=&quot;登录&quot;&gt;&lt;/a&gt;登录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>[C语言刷题]挖掘机技术哪家强</title>
    <link href="http://yoursite.com/2020/04/05/%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/"/>
    <id>http://yoursite.com/2020/04/05/挖掘机技术哪家强/</id>
    <published>2020-04-05T08:34:57.000Z</published>
    <updated>2020-04-05T08:38:27.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是PAT乙级的一道题，我的代码没有通过最后一个测试点，原因推测是两层for循环在n较大时超时了。转而在牛客网运行，结果竟然神奇地AC了，可能牛客放宽了时间限制吧<br></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 100000 的正整数 <em>N</em>，即参赛人数。随后 <em>N</em> 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="comment">//保存起来到a数组 </span></span><br><span class="line"><span class="keyword">int</span> a[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a[i][<span class="number">0</span>],&amp;a[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按学校编号分组，统计各组的总成绩，存到b数组 </span></span><br><span class="line"><span class="keyword">int</span> b[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">b[<span class="number">0</span>][<span class="number">0</span>]=a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>]=a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;<span class="comment">//某学校编号出现过的标志 ，0代表没目前还有出现过 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k][<span class="number">0</span>]==a[i][<span class="number">0</span>])<span class="comment">//出现过了! </span></span><br><span class="line">&#123;</span><br><span class="line">b[k][<span class="number">1</span>]+=a[i][<span class="number">1</span>]; </span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="comment">//目前还没有出现过 </span></span><br><span class="line">&#123;</span><br><span class="line">b[j][<span class="number">0</span>]=a[i][<span class="number">0</span>];</span><br><span class="line">b[j][<span class="number">1</span>]=a[i][<span class="number">1</span>];</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找出b数组中的最大值以及最大值对应的学校编号</span></span><br><span class="line"><span class="keyword">int</span> max=b[<span class="number">0</span>][<span class="number">1</span>],maxnum=b[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[k][<span class="number">1</span>]&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=b[k][<span class="number">1</span>];</span><br><span class="line">maxnum=b[k][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,maxnum,max);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是牛客网上的代码，但是在PTA平台运行仍然不能AC，但是当我把a数组的长度再加一个0时，竟然又神奇地AC 了。。。<br></p><p>其实是这样的：第四个测试点是最大边界值，也就是100000，只要a数组的长度比100000大一点儿就可以了，于是取100001，这样即可AC。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链接：https://www.nowcoder.com/questionTerminal/8ec60eb06fad461eb82ff30562eedc31?toCommentId=5770176&amp;ran=351</span></span><br><span class="line"><span class="comment">来源：牛客网</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//开了个大数组，下标可以对应到全部的学校编号</span></span><br><span class="line"><span class="keyword">int</span> n,x,y;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>;<span class="comment">//分数最高的学校编号</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">a[x]+=y;</span><br><span class="line">  <span class="keyword">if</span>(a[x]&gt;a[max])<span class="comment">//实时更新某校最大分数</span></span><br><span class="line">max=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>,max,a[max]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种解法不用保存输入的信息，降低了时间复杂度(不需要像我写的一样的两层循环了)<br></p><p>开头直接开一个100001长度的数组，算是用空间换时间吧(<em>PTA上这题的内存限制是64MB ，够用了)</em>。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是PAT乙级的一道题，我的代码没有通过最后一个测试点，原因推测是两层for循环在n较大时超时了。转而在牛客网运行，结果竟然神奇地AC了，可能牛客放宽了时间限制吧&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="http://yoursite.com/2020/03/28/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2020/03/28/逻辑回归/</id>
    <published>2020-03-28T10:02:30.000Z</published>
    <updated>2020-03-30T08:37:38.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、逻辑回归综述"><a href="#一、逻辑回归综述" class="headerlink" title="一、逻辑回归综述"></a>一、逻辑回归综述</h3><p>先做线性回归，得到预测值$\hat{y}$ <br><br>$$\hat{y}=\theta^Tx_b,\hat{y}\in(-\infty,+\infty)$$ <br><br>然后利用$Sigmoid$函数<br><br>$$\sigma(t)=\frac{1}{1+e^{-t}}$$ <br><br><img src="1.png" alt="sigmoid函数图像"> <br><br>将$\hat{y}$的值域映射到$[0,1]$，用于表示概率，即<br><br>$$\hat{p}=\sigma(\hat{y})=\sigma(\theta^Tx_b)==\frac{1}{1+e^{-\theta^Tx_b}},\hat{p}\in(0,1)$$ <br><br>由于$Sigmoid$函数$\sigma(t)=\frac{1}{1+e^{-t}}$具有如下性质<br><br>$$ \begin{cases}<br>\sigma(t)&gt;0.5  &amp; t&gt;0\<br>\sigma(t)&lt;0.5 &amp; t&lt;0<br>\end{cases}$$ <br><br>并且t越大，$\sigma(t)$越接近于1，t越小，$\sigma(t)$越接近于0（这一点从图像上很容易看出来）. <br></p><p>所以按照以下标准 <br><br>$$ lable_{pred}=\begin{cases}<br>1 &amp; \hat{p}&gt;0.5 \<br>0 &amp; \hat{p}&lt;0.5<br>\end{cases}$$ <br><br>便完成了$lable$的分类。<br></p><h3 id="二、求解-theta"><a href="#二、求解-theta" class="headerlink" title="二、求解$\theta$"></a>二、求解$\theta$</h3><h4 id="2-1-寻找损失函数"><a href="#2-1-寻找损失函数" class="headerlink" title="2.1 寻找损失函数"></a>2.1 寻找损失函数</h4><p>和线性回归中使用均方误差作为损失函数一样，在逻辑回归中我们也需要一个损失函数$cost$。<br><br>在前面我们已经定义了分类标准<br>$$ lable_{pred}=\begin{cases}<br>1 &amp; \hat{p}&gt;0.5 \<br>0 &amp; \hat{p}&lt;0.5<br>\end{cases}$$ <br><br>为了统一，将$lable_{pred}$用$\hat{y}$表示。注意，不要和最开始的线性回归的预测值搞混了，我们这里只是为了统一起来，便于读写和记忆。你只要记住从现在开始，$\hat{y}$代表逻辑回归的预测标签就好了。<br><br>于是，我们有以下分类标准<br><br>$$ \hat{y}=\begin{cases}<br>1 &amp; \hat{p}&gt;0.5 \<br>0 &amp; \hat{p}&lt;0.5<br>\end{cases}$$ <br><br>则逻辑回归的损失函数$cost$的字面理解如下<br><br>$$ cost=\begin{cases}<br>如果y=1 &amp; p越小，cost越大 \<br>如果y=0 &amp; p越大，cost越大<br>\end{cases}$$ <br><br>这里的$y$代表的是真实标签。<br><br>可以这样理解，拿第一个为例，已知我们的真实标签是1，若p越小，则p是更接近于0的(因为p的值域已经被$Sigmoid$函数限定在$(0,1)$了)，这样子的分类结果就犯错了，所以此时的损失应该大些。<br></p><p>将以上思想转换成数学语言，得到</p><p>$$ cost=\begin{cases}<br>-log(\hat{p})&amp; if –y=1 \<br>-log(1-\hat{p}) &amp; if –y=0<br>\end{cases}$$ <br></p><p><img src="2.png" alt="cost图像"> <br></p><p>我们可以将上面的函数cost用一个式子来表达，也就是<br>$$cost=-ylog(\hat{p})-(1-y)log(1-\hat{p})$$ <br><br>这是对于一个样本点而言，那对于全部样本点，只需要把他们加起来就好了，最后再求平均值，便得到了最终的损失函数<br>$$J(\theta)=-\frac{1}{m}\sum_{i=1}^my^{(i)}log(\hat{p^{(i)}})+(1-y^{(i)})log(1-\hat{p^{(i)}})$$ <br><br>其中<br>$$\hat{p^{(i)}}=\sigma({X_b}^{(i)}\theta)=\frac{1}{1+e^{-{X_b}^{(i)}\theta}}$$ <br></p><p>接下来寻找一组$\theta$，使得$J(\theta)$最小。<br></p><h4 id="2-2-梯度下降法求解-theta"><a href="#2-2-梯度下降法求解-theta" class="headerlink" title="2.2 梯度下降法求解$\theta$"></a>2.2 梯度下降法求解$\theta$</h4><p>$J(\theta)$为下凸函数，存在全局最小值，但是$J(\theta)$不存在数学解析解，所以使用梯度下降法求解使得$J(\theta)$最小的一组$\theta$。<br></p><p>只需让$J(\theta)$对$\theta$求导，即可得到梯度<br>$$\nabla J(\theta)=\frac{1}{m}{X_b}^{T}(\sigma(X_b\theta)-y)$$ <br></p><p>然后利用<br>$$\theta=theta-学习率*\nabla J(\theta)$$<br>经过多次迭代更新便得到了要求的$\theta$。<br></p><p>到这里，逻辑回归的全部数学原理便介绍完了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、逻辑回归综述&quot;&gt;&lt;a href=&quot;#一、逻辑回归综述&quot; class=&quot;headerlink&quot; title=&quot;一、逻辑回归综述&quot;&gt;&lt;/a&gt;一、逻辑回归综述&lt;/h3&gt;&lt;p&gt;先做线性回归，得到预测值$\hat{y}$ &lt;br&gt;&lt;br&gt;$$\hat{y}=\theta
      
    
    </summary>
    
      <category term="入门机器学习" scheme="http://yoursite.com/categories/%E5%85%A5%E9%97%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>常用排序算法总结</title>
    <link href="http://yoursite.com/2020/03/28/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/28/常用排序算法总结/</id>
    <published>2020-03-28T06:09:50.000Z</published>
    <updated>2020-03-28T06:14:55.512Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>狐狸和绳子的故事</title>
    <link href="http://yoursite.com/2020/03/26/%E7%8B%90%E7%8B%B8%E5%92%8C%E7%BB%B3%E5%AD%90%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2020/03/26/狐狸和绳子的故事/</id>
    <published>2020-03-26T09:31:02.000Z</published>
    <updated>2020-03-26T09:36:46.353Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解题思路</strong></p><blockquote><p>升序排列(前提)，把每一个当前的自己都活成最小值，一直向前看，看看自己距离终点有多远(最大绳子个数)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> a[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="comment">//每一个组合中的最小值乘以组合中的绳子个数，就是最大承受重量</span></span><br><span class="line"><span class="comment">//但是我这种想法如何实现排列呢？n层循环？递归？</span></span><br><span class="line"><span class="comment">//不，我不会，呜呜。。。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//换个思路！！！</span></span><br><span class="line"><span class="comment">//可以先对这n根绳子从小到大排序，</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[j];</span><br><span class="line">a[j]=a[i];</span><br><span class="line">a[i]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;++i)printf("%d ",a[i]);</span></span><br><span class="line"><span class="comment">//每一个组合中的最小值乘以组合中的绳子个数</span></span><br><span class="line"><span class="comment">//这个最小值可以通过遍历a数组，那绳子个数呢？</span></span><br><span class="line"><span class="comment">//往前看，比如sample2中，</span></span><br><span class="line"><span class="comment">//a[0]=1，所有情况有&#123;1&#125;,&#123;1,10&#125;,&#123;1,15&#125;,&#123;1,10,15&#125;</span></span><br><span class="line"><span class="comment">//a[1]=10,所以情况有&#123;10&#125;,&#123;10,1&#125;,&#123;10,15&#125;,&#123;10,1,15&#125;</span></span><br><span class="line"><span class="comment">//a[2]=15,所有情况有&#123;15&#125;,&#123;15,10&#125;,&#123;15,1&#125;,&#123;15,1,10&#125;</span></span><br><span class="line"><span class="comment">//但是有许多重复项</span></span><br><span class="line"><span class="comment">//观察一下，可以发现，后面出现的重复项都是第一个元素之后有比第一个元素大的元素</span></span><br><span class="line"><span class="comment">//由此，我们可以先将所有元素升序排序，然后一直向前看就可以啦</span></span><br><span class="line"><span class="comment">//此时，所谓最大绳子个数，就是看看前方还有多少个元素</span></span><br><span class="line"><span class="comment">//我们要求的，就是包括当前元素在内的组合&amp;&amp;最大绳子长度(都是排序的功劳，我们才能这样子做)</span></span><br><span class="line"><span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a[i]*(n-i))&gt;max)</span><br><span class="line">max=a[i]*(n-i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>题目描述</strong></p><p>当年狐狸智斗绳子，换来了生命的重生，心里美滋滋的，尾巴翘的更高了。猎人可谓是机智、勇敢，而这件事情让他颜面扫尽，因此猎人决定夺回面子，再次和狡猾的狐狸一分高下。 大家都知道当年猎人输就输在绳子上面，因此猎人所要做的第一件事情就是从绳子上做文章。 假设一根绳子所能承受的最大的重量为k，若一个物体的重量超过了k，明显这根绳子就会断掉。若将n根绳子扭在一起来吊起一个重量为w的物体，那每根绳子所承受的重量为w/n。 例如：有三根绳子所能承受的最大的重量分别为1N、2N、4N(其中N表示重量的单位牛顿)，那当物体的重量大于3N时第一根绳子就会断掉。计算这三根绳子所能承受的最大的重量就是计算这三根绳子所有的组合中所能承受的最大的重量，这些组合分别为{1}、{2}、{4}、{1、2}、{1、4}、{2、4}、{1，2，4}，当你挑选出其中的一种组合来吊起一个物体时要保证这个组合中的每根绳子都不可断，如{1、4}所能承受的最大的重量为2N，很明显这三根绳子所能承受的最大的重量为4N。 现在的问题是猎人交给你n根绳子，请你帮他计算下这n根绳子所能承受的最大的重量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">输入的第一行为一个整数t，代表了测试数据的组数。 接下来的每组数据的第一行为一个整数n，表示有n根绳子，第二行为n个整数，代表每根绳子的最大承受重量。</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">每组测试数据对应着一个输出，为这n根绳子所能承受的最大的重量。</span><br><span class="line"></span><br><span class="line">Sample Input:</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 2 4</span><br><span class="line">3</span><br><span class="line">1 10 15</span><br><span class="line">Sample Output:</span><br><span class="line">4</span><br><span class="line">20</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;解题思路&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;升序排列(前提)，把每一个当前的自己都活成最小值，一直向前看，看看自己距离终点有多远(最大绳子个数)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>初探R语言绘图工具包--ggplot2</title>
    <link href="http://yoursite.com/2020/03/23/%E5%88%9D%E6%8E%A2R%E8%AF%AD%E8%A8%80%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E5%8C%85-ggplot2/"/>
    <id>http://yoursite.com/2020/03/23/初探R语言绘图工具包-ggplot2/</id>
    <published>2020-03-23T08:51:08.000Z</published>
    <updated>2020-03-23T08:53:16.739Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、在R中安装ggplot2"><a href="#一、在R中安装ggplot2" class="headerlink" title="一、在R中安装ggplot2"></a>一、在R中安装ggplot2</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">"ggplot2"</span>)</span><br></pre></td></tr></table></figure><h3 id="二、ggplot2全局总览"><a href="#二、ggplot2全局总览" class="headerlink" title="二、ggplot2全局总览"></a>二、ggplot2全局总览</h3><p>ggplot2中的函数可以分为以下几大类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">element_  主题设置中的参数，调整细节</span><br><span class="line">geom_     主要作图函数，区分作图类型，比如是柱状图还是点图</span><br><span class="line">scale_    修改默认颜色等设置</span><br><span class="line">stat_     数据变换</span><br><span class="line">theme_    主题设置</span><br><span class="line">coord_    坐标轴转换</span><br><span class="line">facet_    分面作图，分组作图，放在不同页面上</span><br></pre></td></tr></table></figure></p><h3 id="三、gplot2的绘图步骤"><a href="#三、gplot2的绘图步骤" class="headerlink" title="三、gplot2的绘图步骤"></a>三、gplot2的绘图步骤</h3><h4 id="3-1-初始化一个ggplot对象"><a href="#3-1-初始化一个ggplot对象" class="headerlink" title="3.1.初始化一个ggplot对象"></a>3.1.初始化一个ggplot对象</h4><ul><li><p>在绘制图形之前，需要使用ggplot函数(<code>ggplot()</code>)初始化一个ggplot对象，可以理解为创建一块画布，接下来的一切工作都在这块画布上进行。官网给出的初始化代码是这样的：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(data = NULL, mapping = aes(), ..., environment = parent.frame())</span><br></pre></td></tr></table></figure></li><li><p>我们主要修改的是前两个参数，即<code>data</code>和<code>mapping</code></p><blockquote><p><strong>data</strong>：你的数据框；<br><br><strong>mapping</strong>：用于绘图的变量，通俗来说就是x轴和y轴所代表的变量。<br></p></blockquote></li></ul><h4 id="3-2-画一个散点图"><a href="#3-2-画一个散点图" class="headerlink" title="3.2 画一个散点图"></a>3.2 画一个散点图</h4><ul><li>上一步已经创建了一块画布，现在就在画布上画一幅散点图：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先生成自变量x和因变量y</span></span><br><span class="line">x = factor(rep(letters[<span class="number">1</span>:<span class="number">3</span>], each = <span class="number">10</span>))<span class="comment">#使用了rep函数生成因子a，b，c各10个</span></span><br><span class="line">y=rnorm(<span class="number">30</span>)</span><br><span class="line"><span class="comment">#然后将x和y组合成数据框,命名为df</span></span><br><span class="line">df=data.frame(x,y)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#现在可以画图了</span><br><span class="line">ggplot(df, aes(x, y))</span><br></pre></td></tr></table></figure><ul><li>画出来是这样的：<br><br><img src="/home/fanxi/1.png" alt=""> <br></li></ul><p>上面什么都没显示，只是一张空画布，这是因为并没有指定绘图格式(<strong>此时我们仅仅告诉了系统要画一幅画，并且所用数据为df这个数据框，x和y轴分别是x，y这两个变量，但是并没有具体讲要怎么画，画什么</strong>)<br><br>现在加上一层<code>geom_point()</code>,用于绘制散点图。这样绘图代码就变成了这个样子：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ggplot(df, aes(x, y)) +geom_point()</span><br></pre></td></tr></table></figure></p><p>画出来的图像是这样的：<br><br><img src="/home/fanxi/2.png" alt=""> <br><br>这次的结果和预想的就一样了。</p><h4 id="3-3-尝试再添加一层"><a href="#3-3-尝试再添加一层" class="headerlink" title="3.3 尝试再添加一层"></a>3.3 尝试再添加一层</h4><ul><li>在上面已经绘制了散点图的画布上再添加一层（注意是在同一张画布上操作）：<br></li></ul><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成新的数据框ds，本行代码具体解释见下方【注释】</span></span><br><span class="line">ds=do.call(rbind, lapply(split(df, df$x), <span class="keyword">function</span>(d) &#123;</span><br><span class="line">  data.frame(mean = mean(d$y), sd = sd(d$y), x = d$x)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">#可以画图啦</span></span><br><span class="line">ggplot(df, aes(x, y)) +</span><br><span class="line">  geom_point() +</span><br><span class="line">  geom_point(data = ds, aes(y = mean), colour = <span class="string">'red'</span>, size = <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><img src="/home/fanxi/3.png" alt=""> <br><br>【注释】<br></p><blockquote><p>在生成ds时，用到了<code>do.call()</code>和<code>lapply()</code>。<br><br>先看<code>lapply</code>，它有两个参数，一个是<code>split(df, df$x)</code>，另一个是匿名函数<code>function(d)</code>：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function(d) &#123;</span><br><span class="line">  data.frame(mean = mean(d$y), sd = sd(d$y), x = d$x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><code>split(df, df$x)</code>的作用是将df这个数据框按照x列的取值不同分为3部分(因为x可取a，b，c)：<br></p></blockquote> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&gt; split(df, df$x)</span><br><span class="line">$a</span><br><span class="line">   x          y</span><br><span class="line"><span class="number">1</span>  a -<span class="number">2.0918912</span></span><br><span class="line"><span class="number">2</span>  a -<span class="number">2.2824544</span></span><br><span class="line"><span class="number">3</span>  a  <span class="number">0.1987116</span></span><br><span class="line"><span class="number">4</span>  a -<span class="number">1.7204838</span></span><br><span class="line"><span class="number">5</span>  a  <span class="number">1.6355444</span></span><br><span class="line"><span class="number">6</span>  a -<span class="number">0.3358297</span></span><br><span class="line"><span class="number">7</span>  a  <span class="number">1.0307883</span></span><br><span class="line"><span class="number">8</span>  a -<span class="number">0.6142356</span></span><br><span class="line"><span class="number">9</span>  a -<span class="number">0.7293628</span></span><br><span class="line"><span class="number">10</span> a -<span class="number">0.4128977</span></span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">   x           y</span><br><span class="line"><span class="number">11</span> b  <span class="number">1.99706479</span></span><br><span class="line"><span class="number">12</span> b  <span class="number">0.15562728</span></span><br><span class="line"><span class="number">13</span> b -<span class="number">1.58374617</span></span><br><span class="line"><span class="number">14</span> b  <span class="number">0.41752970</span></span><br><span class="line"><span class="number">15</span> b  <span class="number">0.53430369</span></span><br><span class="line"><span class="number">16</span> b  <span class="number">0.06285871</span></span><br><span class="line"><span class="number">17</span> b -<span class="number">0.53760935</span></span><br><span class="line"><span class="number">18</span> b  <span class="number">1.35068305</span></span><br><span class="line"><span class="number">19</span> b -<span class="number">0.91601690</span></span><br><span class="line"><span class="number">20</span> b  <span class="number">2.43169420</span></span><br><span class="line"></span><br><span class="line">$c</span><br><span class="line">   x          y</span><br><span class="line"><span class="number">21</span> c  <span class="number">1.4711247</span></span><br><span class="line"><span class="number">22</span> c  <span class="number">0.6199710</span></span><br><span class="line"><span class="number">23</span> c  <span class="number">0.9347642</span></span><br><span class="line"><span class="number">24</span> c  <span class="number">1.1362680</span></span><br><span class="line"><span class="number">25</span> c -<span class="number">1.5553590</span></span><br><span class="line"><span class="number">26</span> c -<span class="number">0.5053353</span></span><br><span class="line"><span class="number">27</span> c  <span class="number">0.8935274</span></span><br><span class="line"><span class="number">28</span> c -<span class="number">0.1612125</span></span><br><span class="line"><span class="number">29</span> c -<span class="number">0.3308873</span></span><br><span class="line"><span class="number">30</span> c -<span class="number">0.2126249</span></span><br></pre></td></tr></table></figure><blockquote><p>通过<code>lapply</code>函数，对上面的这3个子数据框分别用<code>匿名函数</code>进行作用，得到的结果是这样子的：<br></p></blockquote> <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> &gt; lapply(split(df,df$x),<span class="keyword">function</span>(d)&#123;data.frame(mean=mean(d$y),sd=sd(d$y),x=d$x)&#125;)</span><br><span class="line">$a</span><br><span class="line">         mean       sd x</span><br><span class="line"><span class="number">1</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">2</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">3</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">4</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">5</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">6</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">7</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">8</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">9</span>  -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"><span class="number">10</span> -<span class="number">0.5322111</span> <span class="number">1.277268</span> a</span><br><span class="line"></span><br><span class="line">$b</span><br><span class="line">        mean       sd x</span><br><span class="line"><span class="number">1</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">2</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">3</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">4</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">5</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">6</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">7</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">8</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">9</span>  <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"><span class="number">10</span> <span class="number">0.3912389</span> <span class="number">1.261367</span> b</span><br><span class="line"></span><br><span class="line">$c</span><br><span class="line">        mean        sd x</span><br><span class="line"><span class="number">1</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">2</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">3</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">4</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">5</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">6</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">7</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">8</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">9</span>  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line"><span class="number">10</span> <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br></pre></td></tr></table></figure><blockquote><p>最后在最外层用<code>do.call()</code>将上面的3个子数据框按行合并(使用<code>rbind()</code>)，就得到了最终的数据框ds了：<br></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt; ds</span><br><span class="line">           mean        sd x</span><br><span class="line">a.1  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.2  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.3  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.4  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.5  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.6  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.7  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.8  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.9  -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">a.10 -<span class="number">0.5322111</span> <span class="number">1.2772680</span> a</span><br><span class="line">b.1   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.2   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.3   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.4   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.5   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.6   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.7   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.8   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.9   <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">b.10  <span class="number">0.3912389</span> <span class="number">1.2613668</span> b</span><br><span class="line">c.1   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.2   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.3   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.4   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.5   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.6   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.7   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.8   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.9   <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br><span class="line">c.10  <span class="number">0.2290236</span> <span class="number">0.9334836</span> c</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、在R中安装ggplot2&quot;&gt;&lt;a href=&quot;#一、在R中安装ggplot2&quot; class=&quot;headerlink&quot; title=&quot;一、在R中安装ggplot2&quot;&gt;&lt;/a&gt;一、在R中安装ggplot2&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>科学计数法【这题做了1个多小时才AC，记录一下】</title>
    <link href="http://yoursite.com/2020/03/15/%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95%E3%80%90%E8%BF%99%E9%A2%98%E5%81%9A%E4%BA%861%E4%B8%AA%E5%A4%9A%E5%B0%8F%E6%97%B6%E6%89%8DAC%EF%BC%8C%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E3%80%91/"/>
    <id>http://yoursite.com/2020/03/15/科学计数法【这题做了1个多小时才AC，记录一下】/</id>
    <published>2020-03-15T10:00:34.000Z</published>
    <updated>2020-03-15T10:04:44.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 <code>[+-][1-9].[0-9]+E[+-][0-9]+</code>，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。<br></p><p>现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。<br></p><p><code>输入格式</code>：<br></p><p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p><p><code>输出格式：</code><br><br>对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。<br></p><p><code>输入样例 1：</code><br>+1.23400E-03</p><p><code>输出样例 1：</code><br>0.00123400</p><p><code>输入样例 2：</code><br>-1.2E+10</p><p><code>输出样例 2：</code><br>-12000000000</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="keyword">char</span> sign=a[<span class="number">0</span>];<span class="comment">//数的符号</span></span><br><span class="line"><span class="comment">//寻找E</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> e=<span class="number">0</span>;<span class="comment">//指数大小</span></span><br><span class="line"><span class="keyword">char</span> sign1=a[i+<span class="number">1</span>];<span class="comment">//指数的符号</span></span><br><span class="line"><span class="comment">//计算指数的大小</span></span><br><span class="line"><span class="keyword">int</span> pro=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;=i+<span class="number">2</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">e+=(a[j]-<span class="string">'0'</span>)*pro;</span><br><span class="line">pro*=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("e=%d\n",e);</span></span><br><span class="line"><span class="comment">//printf("sign1=%c\n",sign1);</span></span><br><span class="line"><span class="comment">//先把符号打印粗来</span></span><br><span class="line"><span class="keyword">if</span>(sign==<span class="string">'-'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码</span></span><br><span class="line"><span class="keyword">if</span>(sign1==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0."</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;e<span class="number">-1</span>;++m)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">3</span>;q&lt;=i<span class="number">-1</span>;++q)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[q]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sign1==<span class="string">'+'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">3</span>;w&lt;=i<span class="number">-1</span>;++w)</span><br><span class="line">&#123;</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("cnt=%d\n",cnt);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不用小数点了</span></span><br><span class="line"><span class="keyword">if</span>(cnt&lt;=e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">3</span>;w&lt;=i<span class="number">-1</span>;++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[w]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[w]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[w]==<span class="string">'0'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">3</span>;b&lt;=w<span class="number">-1</span>;++b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[b]!=<span class="string">'0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>||a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[w]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">0</span>;w&lt;e-cnt;++w)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//需要小数点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="comment">//打印小数点之前的，注意判断是否打印0</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">3</span>;k&lt;<span class="number">3</span>+e;++k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span>(a[k]!=<span class="string">'0'</span>)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span>(a[k]==<span class="string">'0'</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">3</span>;b&lt;=k<span class="number">-1</span>;++b)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(a[b]!=<span class="string">'0'</span>)</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                        flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span>(flag==<span class="number">1</span>||a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line">                                                <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line"><span class="comment">//小数点之后的是一定都要打印的</span></span><br><span class="line"><span class="keyword">for</span>(k+<span class="number">1</span>;k&lt;=i<span class="number">-1</span>;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 &lt;code&gt;[+-][1-9].[0-9]+E
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>竖式除法【转】</title>
    <link href="http://yoursite.com/2020/03/15/%E7%AB%96%E5%BC%8F%E9%99%A4%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/15/竖式除法/</id>
    <published>2020-03-15T07:49:40.000Z</published>
    <updated>2020-03-15T07:54:31.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</span><br><span class="line"></span><br><span class="line">输入格式：</span><br><span class="line">输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</span><br><span class="line"></span><br><span class="line">输出格式：</span><br><span class="line">在一行中依次输出 Q 和 R，中间以 1 空格分隔。</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">123456789050987654321 7</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例：</span><br><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1、本题是高精度除法，1000位的数远远超过了整型的范围，所以我们需要选择字符数组来存储 A ，并且通过字符数组来存储 Q 。<br><br>2、由于已经限定 B 为 1 位整数，所以我们可以从 A 的最高位逐位进行除法，并将余数乘 10 加到下一位上。<br><br>3、注意存储时是数字字符，所以我们需要将数字字符转换为数字。<br><br>4、不要忘了在 Q 后添加 ‘\0’ 作为字符串的结束。<br><br>5、注意当 A 小于 B 时的情况。<br></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">char</span> A[<span class="number">1000</span>], Q[<span class="number">1000</span>];    </span><br><span class="line"><span class="keyword">int</span> B, R = <span class="number">0</span>;    </span><br><span class="line"><span class="keyword">int</span> i, j, len;    </span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, A, &amp;B);    </span><br><span class="line">len = <span class="built_in">strlen</span>(A);    </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; len; i++, j++)    </span><br><span class="line">&#123;        </span><br><span class="line">Q[i] = (A[j] + <span class="number">10</span> * R - <span class="string">'0'</span>) / B + <span class="string">'0'</span>;        </span><br><span class="line">R = (A[j] + <span class="number">10</span> * R - <span class="string">'0'</span>) % B;        </span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; Q[i] == <span class="string">'0'</span>)        </span><br><span class="line">&#123;            </span><br><span class="line">i--;        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;    </span><br><span class="line">Q[i] = <span class="string">'\0'</span>;    </span><br><span class="line">len = <span class="built_in">strlen</span>(Q);    </span><br><span class="line"><span class="keyword">if</span> (!len)    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0 %d\n"</span>, R);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">else</span>    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, Q, R);    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/shiawaseli/article/details/89740352" target="_blank" rel="noopener">https://blog.csdn.net/shiawaseli/article/details/89740352</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>R语言原生数据结构总结</title>
    <link href="http://yoursite.com/2020/03/15/R%E8%AF%AD%E8%A8%80%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/15/R语言原生数据结构总结/</id>
    <published>2020-03-15T05:20:46.000Z</published>
    <updated>2020-03-15T07:05:10.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录</strong>：向量、数组、矩阵、因子、列表、数据框</p><h3 id="一、向量"><a href="#一、向量" class="headerlink" title="一、向量"></a>一、向量</h3><blockquote><p>生成方法</p></blockquote><p><code>c()</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c(<span class="number">1</span>,<span class="number">7</span>:<span class="number">9</span>)</span><br><span class="line">c(<span class="number">1</span>:<span class="number">5</span>, <span class="number">10.5</span>, <span class="string">"next"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## uses with a single argument to drop attributes</span></span><br><span class="line">x &lt;- <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">names(x) &lt;- letters[<span class="number">1</span>:<span class="number">4</span>]<span class="comment">#把字母表的前四个作为x的名字（利用names()函数）</span></span><br><span class="line">x</span><br><span class="line">c(x)          <span class="comment"># has names</span></span><br><span class="line">as.vector(x)  <span class="comment"># no names</span></span><br><span class="line">dim(x) &lt;- c(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">x</span><br><span class="line">c(x)</span><br><span class="line">as.vector(x)<span class="comment">#转换成向量格式</span></span><br></pre></td></tr></table></figure></p><p><code>seq()</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; seq(<span class="number">0</span>, <span class="number">1</span>, length.out = <span class="number">11</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.5</span> <span class="number">0.6</span> <span class="number">0.7</span> <span class="number">0.8</span> <span class="number">0.9</span> <span class="number">1.0</span></span><br><span class="line">&gt; seq(stats::rnorm(<span class="number">20</span>)) <span class="comment"># effectively 'along'</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">9</span>, by = <span class="number">2</span>)     <span class="comment"># matches 'end'</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">9</span>, by = pi)    <span class="comment"># stays below 'end'</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">4.141593</span> <span class="number">7.283185</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">6</span>, by = <span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">4</span></span><br><span class="line">&gt; seq(<span class="number">1.575</span>, <span class="number">5.125</span>, by = <span class="number">0.05</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1.575</span> <span class="number">1.625</span> <span class="number">1.675</span> <span class="number">1.725</span> <span class="number">1.775</span> <span class="number">1.825</span> <span class="number">1.875</span> <span class="number">1.925</span> <span class="number">1.975</span> <span class="number">2.025</span></span><br><span class="line">[<span class="number">11</span>] <span class="number">2.075</span> <span class="number">2.125</span> <span class="number">2.175</span> <span class="number">2.225</span> <span class="number">2.275</span> <span class="number">2.325</span> <span class="number">2.375</span> <span class="number">2.425</span> <span class="number">2.475</span> <span class="number">2.525</span></span><br><span class="line">[<span class="number">21</span>] <span class="number">2.575</span> <span class="number">2.625</span> <span class="number">2.675</span> <span class="number">2.725</span> <span class="number">2.775</span> <span class="number">2.825</span> <span class="number">2.875</span> <span class="number">2.925</span> <span class="number">2.975</span> <span class="number">3.025</span></span><br><span class="line">[<span class="number">31</span>] <span class="number">3.075</span> <span class="number">3.125</span> <span class="number">3.175</span> <span class="number">3.225</span> <span class="number">3.275</span> <span class="number">3.325</span> <span class="number">3.375</span> <span class="number">3.425</span> <span class="number">3.475</span> <span class="number">3.525</span></span><br><span class="line">[<span class="number">41</span>] <span class="number">3.575</span> <span class="number">3.625</span> <span class="number">3.675</span> <span class="number">3.725</span> <span class="number">3.775</span> <span class="number">3.825</span> <span class="number">3.875</span> <span class="number">3.925</span> <span class="number">3.975</span> <span class="number">4.025</span></span><br><span class="line">[<span class="number">51</span>] <span class="number">4.075</span> <span class="number">4.125</span> <span class="number">4.175</span> <span class="number">4.225</span> <span class="number">4.275</span> <span class="number">4.325</span> <span class="number">4.375</span> <span class="number">4.425</span> <span class="number">4.475</span> <span class="number">4.525</span></span><br><span class="line">[<span class="number">61</span>] <span class="number">4.575</span> <span class="number">4.625</span> <span class="number">4.675</span> <span class="number">4.725</span> <span class="number">4.775</span> <span class="number">4.825</span> <span class="number">4.875</span> <span class="number">4.925</span> <span class="number">4.975</span> <span class="number">5.025</span></span><br><span class="line">[<span class="number">71</span>] <span class="number">5.075</span> <span class="number">5.125</span></span><br><span class="line">&gt; seq(<span class="number">17</span>) <span class="comment"># same as 1:17, or even better seq_len(17)</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br></pre></td></tr></table></figure></p><p><code>start:end</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>:<span class="number">10</span> <span class="comment">#等价于seq(1:10)</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">&gt; seq(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><blockquote><p>可调用接口</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(data = <span class="literal">NA</span>, dim = length(data), dimnames = <span class="literal">NULL</span>)<span class="comment">#生成一个数组</span></span><br><span class="line">as.array(x, <span class="keyword">...</span>)<span class="comment">#强制类型转换为数组</span></span><br><span class="line">is.array(x)<span class="comment">#判断是否是数组类型</span></span><br><span class="line">dim(x)<span class="comment">#查看数组维度（注：dim是个通用函数）</span></span><br></pre></td></tr></table></figure><blockquote><p>生成方法</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    array(<span class="number">1</span>:<span class="number">3</span>, c(<span class="number">2</span>,<span class="number">4</span>)) <span class="comment"># recycle 1:3 "2 2/3 times"</span></span><br><span class="line">    <span class="comment">#     [,1] [,2] [,3] [,4]</span></span><br><span class="line">    <span class="comment">#[1,]    1    3    2    1</span></span><br><span class="line">    <span class="comment">#[2,]    2    1    3    2</span></span><br><span class="line"></span><br><span class="line">array(c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>),dim=c(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注：可以看到，若指定的维度所需元素个数大于已有元素个数，则按列重复<br></p></blockquote><h3 id="三、矩阵"><a href="#三、矩阵" class="headerlink" title="三、矩阵"></a>三、矩阵</h3><blockquote><p>可调用接口 </p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix(data = <span class="literal">NA</span>, nrow = <span class="number">1</span>, ncol = <span class="number">1</span>, byrow = <span class="literal">FALSE</span>,dimnames = <span class="literal">NULL</span>)</span><br><span class="line">    </span><br><span class="line">    as.matrix(x, <span class="keyword">...</span>)</span><br><span class="line">    <span class="comment">## S3 method for class 'data.frame'</span></span><br><span class="line">    as.matrix(x, rownames.force = <span class="literal">NA</span>, <span class="keyword">...</span>)</span><br><span class="line">    </span><br><span class="line">    is.matrix(x)</span><br></pre></td></tr></table></figure><blockquote><p>生成方法</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>,</span><br><span class="line">                    dimnames = list(c(<span class="string">"row1"</span>, <span class="string">"row2"</span>),</span><br><span class="line">                                    c(<span class="string">"C.1"</span>, <span class="string">"C.2"</span>, <span class="string">"C.3"</span>)))</span><br></pre></td></tr></table></figure><p>这里的dimnames是给矩阵的行列命名。<br><br>当然也可以事先不命名，等生成矩阵之后再命名：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt; dimnames(mdat)=list(c(<span class="string">'a'</span>,<span class="string">'b'</span>),c(<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'p'</span>))</span><br><span class="line">&gt; mdat</span><br><span class="line">   r  g  p</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br></pre></td></tr></table></figure></p><p>那单独给列或者行命名呢？可以这样：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt; colnames(mdat) &lt;- c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">      a  b  c</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,] <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line">&gt; rownames(mdat)=c(<span class="string">'zz'</span>,<span class="string">'hh'</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">    a  b  c</span><br><span class="line">zz  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">hh <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="四、因子"><a href="#四、因子" class="headerlink" title="四、因子"></a>四、因子</h3><p>在R语言中，factor指的就是那些非数值型变量。<br></p><blockquote><p>可调用接口</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">factor(x = character(), levels, labels = levels,</span><br><span class="line">           exclude = <span class="literal">NA</span>, ordered = is.ordered(x), nmax = <span class="literal">NA</span>)</span><br><span class="line">    </span><br><span class="line">    ordered(x, <span class="keyword">...</span>)</span><br><span class="line">    </span><br><span class="line">    is.factor(x)</span><br><span class="line">    is.ordered(x)</span><br><span class="line">    </span><br><span class="line">    as.factor(x)</span><br><span class="line">    as.ordered(x)</span><br><span class="line">    </span><br><span class="line">    addNA(x, ifany = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><blockquote><p>生成方法<br></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; x=c(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line">&gt; factor(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Levels: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>当然，在选取数据框中某一列非数值型变量时，返回的结果就是factor<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; a=data.frame(name=c(<span class="string">'Mike'</span>,<span class="string">'Jane'</span>,<span class="string">'King'</span>,<span class="string">'Tom'</span>),height=c(<span class="number">160</span>,<span class="number">155</span>,<span class="number">166</span>,<span class="number">159</span>),weight=c(<span class="number">65</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">53</span>))</span><br><span class="line">&gt; a</span><br><span class="line">  name height weight</span><br><span class="line"><span class="number">1</span> Mike    <span class="number">160</span>     <span class="number">65</span></span><br><span class="line"><span class="number">2</span> Jane    <span class="number">155</span>     <span class="number">48</span></span><br><span class="line"><span class="number">3</span> King    <span class="number">166</span>     <span class="number">55</span></span><br><span class="line"><span class="number">4</span>  Tom    <span class="number">159</span>     <span class="number">53</span></span><br><span class="line">&gt; a$name</span><br><span class="line">[<span class="number">1</span>] Mike Jane King Tom </span><br><span class="line">Levels: Jane King Mike Tom</span><br><span class="line">&gt; a$height</span><br><span class="line">[<span class="number">1</span>] <span class="number">160</span> <span class="number">155</span> <span class="number">166</span> <span class="number">159</span></span><br><span class="line">&gt; is.factor(a$name)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure></p><h3 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h3><p>列表是个大杂烩，啥都可以往里面装<br><br>最简单粗暴的方法，就是用list()函数去作用一下：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; s=<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">&gt; s</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">&gt; is.list(s)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; lis=list(s)</span><br><span class="line">&gt; is.list(lis)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure></p><h3 id="六、数据框"><a href="#六、数据框" class="headerlink" title="六、数据框"></a>六、数据框</h3><p>不多说，直接上栗子<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; L3 &lt;- LETTERS[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#选定'A','B','C'</span></span><br><span class="line">&gt; fac &lt;- sample(L3, <span class="number">10</span>, replace = <span class="literal">TRUE</span>)<span class="comment">#从选定的'A','B','C'中随机取样，取10次</span></span><br><span class="line">&gt; d &lt;- data.frame(x = <span class="number">1</span>, y = <span class="number">1</span>:<span class="number">10</span>, fac = fac)</span><br><span class="line">&gt; d</span><br><span class="line">   x  y fac</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A</span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A</span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A</span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A</span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C</span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C</span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C</span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B</span><br></pre></td></tr></table></figure></p><p>上面的栗子指定了列名字，若不指定，则默认输出列名，如下：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; data.frame(<span class="number">1</span>, <span class="number">1</span>:<span class="number">10</span>, <span class="number">11</span>:<span class="number">20</span>)</span><br><span class="line">   X1 X1.10 X11.20</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>     <span class="number">1</span>     <span class="number">11</span></span><br><span class="line"><span class="number">2</span>   <span class="number">1</span>     <span class="number">2</span>     <span class="number">12</span></span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>     <span class="number">3</span>     <span class="number">13</span></span><br><span class="line"><span class="number">4</span>   <span class="number">1</span>     <span class="number">4</span>     <span class="number">14</span></span><br><span class="line"><span class="number">5</span>   <span class="number">1</span>     <span class="number">5</span>     <span class="number">15</span></span><br><span class="line"><span class="number">6</span>   <span class="number">1</span>     <span class="number">6</span>     <span class="number">16</span></span><br><span class="line"><span class="number">7</span>   <span class="number">1</span>     <span class="number">7</span>     <span class="number">17</span></span><br><span class="line"><span class="number">8</span>   <span class="number">1</span>     <span class="number">8</span>     <span class="number">18</span></span><br><span class="line"><span class="number">9</span>   <span class="number">1</span>     <span class="number">9</span>     <span class="number">19</span></span><br><span class="line"><span class="number">10</span>  <span class="number">1</span>    <span class="number">10</span>     <span class="number">20</span></span><br><span class="line">&gt; data.frame(<span class="number">2</span>, <span class="number">1</span>:<span class="number">10</span>, <span class="number">11</span>:<span class="number">20</span>)</span><br><span class="line">   X2 X1.10 X11.20</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>     <span class="number">1</span>     <span class="number">11</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>     <span class="number">2</span>     <span class="number">12</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2</span>     <span class="number">3</span>     <span class="number">13</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2</span>     <span class="number">4</span>     <span class="number">14</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2</span>     <span class="number">5</span>     <span class="number">15</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2</span>     <span class="number">6</span>     <span class="number">16</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2</span>     <span class="number">7</span>     <span class="number">17</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2</span>     <span class="number">8</span>     <span class="number">18</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2</span>     <span class="number">9</span>     <span class="number">19</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2</span>    <span class="number">10</span>     <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>选取某一列的方法：<code>df[&#39;colname&#39;]</code>或者<code>df$colname</code><br><br>选取多个列的方法：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; d</span><br><span class="line">   x  y fac</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A</span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A</span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A</span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A</span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C</span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C</span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C</span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B</span><br><span class="line">&gt; d[,<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">   x  y</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>若要添加一列，直接将向量/数组赋值即可，继续上面的栗子：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; d[<span class="string">'newcol'</span>]=array(<span class="number">31</span>:<span class="number">40</span>)</span><br><span class="line">&gt; d</span><br><span class="line">   x  y fac newcol</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A     <span class="number">31</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B     <span class="number">32</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A     <span class="number">33</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A     <span class="number">34</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A     <span class="number">35</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C     <span class="number">36</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C     <span class="number">37</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C     <span class="number">38</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B     <span class="number">39</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B     <span class="number">40</span></span><br></pre></td></tr></table></figure></p><p>还有合并两个数据框可以用cbind（注意两个数据框的第一个维度（行）必须一样）：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; d1=data.frame(f1=seq(<span class="number">61</span>:<span class="number">70</span>),f2=c(<span class="number">101</span>:<span class="number">110</span>))</span><br><span class="line">&gt; d1</span><br><span class="line">   f1  f2</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span> <span class="number">101</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span> <span class="number">102</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span> <span class="number">103</span></span><br><span class="line"><span class="number">4</span>   <span class="number">4</span> <span class="number">104</span></span><br><span class="line"><span class="number">5</span>   <span class="number">5</span> <span class="number">105</span></span><br><span class="line"><span class="number">6</span>   <span class="number">6</span> <span class="number">106</span></span><br><span class="line"><span class="number">7</span>   <span class="number">7</span> <span class="number">107</span></span><br><span class="line"><span class="number">8</span>   <span class="number">8</span> <span class="number">108</span></span><br><span class="line"><span class="number">9</span>   <span class="number">9</span> <span class="number">109</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">110</span></span><br><span class="line">&gt; cbind(d,d1)</span><br><span class="line">   x  y fac newcol f1  f2</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A     <span class="number">31</span>  <span class="number">1</span> <span class="number">101</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B     <span class="number">32</span>  <span class="number">2</span> <span class="number">102</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A     <span class="number">33</span>  <span class="number">3</span> <span class="number">103</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A     <span class="number">34</span>  <span class="number">4</span> <span class="number">104</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A     <span class="number">35</span>  <span class="number">5</span> <span class="number">105</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C     <span class="number">36</span>  <span class="number">6</span> <span class="number">106</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C     <span class="number">37</span>  <span class="number">7</span> <span class="number">107</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C     <span class="number">38</span>  <span class="number">8</span> <span class="number">108</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B     <span class="number">39</span>  <span class="number">9</span> <span class="number">109</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B     <span class="number">40</span> <span class="number">10</span> <span class="number">110</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;：向量、数组、矩阵、因子、列表、数据框&lt;/p&gt;
&lt;h3 id=&quot;一、向量&quot;&gt;&lt;a href=&quot;#一、向量&quot; class=&quot;headerlink&quot; title=&quot;一、向量&quot;&gt;&lt;/a&gt;一、向量&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;生成方
      
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>计组问答</title>
    <link href="http://yoursite.com/2020/03/14/%E8%AE%A1%E7%BB%84%E9%97%AE%E7%AD%94/"/>
    <id>http://yoursite.com/2020/03/14/计组问答/</id>
    <published>2020-03-14T08:38:22.000Z</published>
    <updated>2020-04-04T09:53:18.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章、计算机系统概述"><a href="#第一章、计算机系统概述" class="headerlink" title="第一章、计算机系统概述"></a>第一章、计算机系统概述</h2><h3 id="1-计算机发展历程"><a href="#1-计算机发展历程" class="headerlink" title="1.计算机发展历程"></a>1.计算机发展历程</h3><blockquote><p><strong>计算机硬件发展历程</strong>：<br><br>电子管时代–&gt;晶体管时代–&gt;中小规模集成电路时代–&gt;超大规模集成电路时代–&gt;智能计算机–&gt;生物计算机和量子计算机。<br><br><strong>计算机的分类</strong>：<br><br>专用计算机、通用计算机。<br><br><strong>摩尔定律</strong>：<br><br>当价格不变时，集成电路上可容纳的元器件的数目，约每隔18~24个月便会增加一倍，性能也将提升一倍。揭示了信息技术进步的速度。<br><br><strong>其他</strong>：操作系统直接影响计算机系统性能。<br></p></blockquote><h3 id="2-计算机系统层次结构"><a href="#2-计算机系统层次结构" class="headerlink" title="2.计算机系统层次结构"></a>2.计算机系统层次结构</h3><p><code>计算机系统=硬件+软件=（中央处理器、存储器和外部设备等）+（计算机的运行程序和相应的文档）</code><br></p><h5 id="2-1-计算机硬件的基本组成"><a href="#2-1-计算机硬件的基本组成" class="headerlink" title="2.1 计算机硬件的基本组成"></a>2.1 计算机硬件的基本组成</h5><blockquote><p>(1)<strong>存储器</strong>：分为主存储器（内存储器）和辅助存储器（外存储器）。主存储器存放重程序和数据，辅助存储器中的信息必须调入主存后才能被CPU访问。<br><br>(2)<strong>运算器</strong>：主要功能时进行算术运算和逻辑运算，核心是算数逻辑单元（ALU）。运算器包含若干通用寄存器。<br><br>(3)<strong>控制器</strong>：计算机的指挥中心。由<code>程序计数器（PC）</code>、<code>指令寄存器（IR）</code>和<code>控制单元（CU）</code>组成。<br><br>(4)输入设备。<br><br>(5)输出设备。<br></p></blockquote><h4 id="2-2-计算机软件的分类"><a href="#2-2-计算机软件的分类" class="headerlink" title="2.2 计算机软件的分类"></a>2.2 计算机软件的分类</h4><blockquote><p>（1）系统软件；<br><br>（2）应用软件。<br></p></blockquote><h4 id="2-3-计算机编程语言分类"><a href="#2-3-计算机编程语言分类" class="headerlink" title="2.3 计算机编程语言分类"></a>2.3 计算机编程语言分类</h4><blockquote><p>机器语言、汇编语言、高级语言。<br></p></blockquote><h4 id="2-4-编译程序与解释程序的区别"><a href="#2-4-编译程序与解释程序的区别" class="headerlink" title="2.4 编译程序与解释程序的区别"></a>2.4 编译程序与解释程序的区别</h4><blockquote><p>编译程序生成目标代码，而解释程序不生成；编译程序产生目标代码的执行速度比解释程序的执行速度快。<br></p></blockquote><h4 id="2-5-计算机的工作过程"><a href="#2-5-计算机的工作过程" class="headerlink" title="2.5 计算机的工作过程"></a>2.5 计算机的工作过程</h4><blockquote><p>不断地从存储器中逐条取出指令，然后送至控制器，经分析后由CPU发出各种操作命令，指挥各部件完成各种操作，直至程序中全部指令执行结束。<br></p></blockquote><h4 id="2-6-计算机系统的层次结构"><a href="#2-6-计算机系统的层次结构" class="headerlink" title="2.6 计算机系统的层次结构"></a>2.6 计算机系统的层次结构</h4><blockquote><p>(1)第1级。微程序机器级。微指令由硬件直接执行。<br><br>(2)第2级。传统机器级(机器语言)。用微程序解释指令系统。<br><br>(3)第3级。操作系统级。用机器语言解释作业控制语句；<br><br>(4)第4级。汇编语言机器级。用汇编程序翻译成汇编语言程序；<br><br>(5)第5级。高级语言机器级。用编译程序翻译成汇编程序或直接翻译成机器语言。<br></p></blockquote><h3 id="3-计算机性能指标"><a href="#3-计算机性能指标" class="headerlink" title="3.计算机性能指标"></a>3.计算机性能指标</h3><blockquote><p>(1)<strong>吞吐量</strong>：单位时间内的数据处理量，主要取决于主存的存取周期；<br><br>(2)<strong>响应时间</strong>：从提交作业到该作业得到CPU响应所经理的时间。响应时间越短，吞吐量越大。<br><br>(3)<strong>主频</strong>：机器内部主时钟的频率，衡量机器速度；<br><br>(4)<strong>CPU周期</strong>：又称机器周期，指的是从内存读取一条指令字的最短时间。一个指令周期由若干个CPU周期构成；<br><br>(5)<strong>CPU时钟周期</strong>：主频的倒数，是CPU中最小的时间单位。<br><br>(6)<strong>CPI、MIPS、FLOPS</strong>；<br><br>(7)<strong>CPU执行时间</strong>：CPU对某特定程序的执行时间。<br></p></blockquote><h2 id="第三章、存储器层次结构"><a href="#第三章、存储器层次结构" class="headerlink" title="第三章、存储器层次结构"></a>第三章、存储器层次结构</h2><h3 id="1-存储器的分类"><a href="#1-存储器的分类" class="headerlink" title="1. 存储器的分类"></a>1. 存储器的分类</h3><p>存储器=主存储器+高速缓冲存储器（Cache）+辅助存储器<br></p><blockquote><p>(1)按照<strong>存储介质</strong>可分为：<br><br>1)<code>半导体存储器</code>：包括随机存储器和只读存储器两类（RAM和ROM）；<br><br>2)<code>磁表面存储器</code>：包括磁盘、磁带，使用顺序存取方式；<br><br>3)<code>光盘存储器</code>：也叫光存储器，一般指光盘；<br><br>4)<code>磁心存储器</code>：由各种磁心制成，目前已被半导体存储器取代。<br><br>(2)按<strong>存取方式</strong>可分为：<br><br>1)<code>随机存取存储器（RAM）</code>：可存可取，存取时间和存取位置没有关系。<br><br>优点：读写方便，使用灵活；<br><br>缺点：断电信息丢失。<br><br>分为静态RAM（SRAM，常用作高速缓冲存储器）和动态RAM（DRAM常用作主存）<br><br>2)<code>只读存储器（ROM）</code>：只可取，一般把一些固定的、不变的程序存放在这里，其内容断电后仍可保留。<br><br>3)<code>串行访问存储器</code>：在对存储单元进行读写操作时，需要按照物理位置的先后顺序依次访问，主要包括顺序存取存储器（磁带）和直接存取存储器（磁盘，半串行，因为要先寻道）。<br><br>(3)按照<strong>在计算机中的作用</strong>可分为：<br><br>1）主存储器；<br><br>2)辅助存储器；<br><br>3)缓冲存储器。<br></p></blockquote><h3 id="2-存储器的性能指标"><a href="#2-存储器的性能指标" class="headerlink" title="2.存储器的性能指标"></a>2.存储器的性能指标</h3><blockquote><p>(1)存储容量=存储字数(表示存储器的地址空间大小即存储器的存储单元数目)*字长(存储字长，表示一次存取操作的数据量);<br><br>(2)单位成本：每位价格=总成本/总容量；<br><br>(3)存储速度：数据传输率=数据的宽度/存储周期（ 存储周期又称读写周期或访问周期，指连续两次独立地访问存储器操作之间所需的最小时间间隔）。<br></p></blockquote><h3 id="3-存储周期与存取时间的区别"><a href="#3-存储周期与存取时间的区别" class="headerlink" title="3.存储周期与存取时间的区别"></a>3.存储周期与存取时间的区别</h3><blockquote><p>存储周期又称读写周期或访问周期，指连续两次独立地访问存储器操作之间所需的最小时间间隔，而存取时间是指启动一次存储器操作到完成该操作所经历的时间，一般小于存储周期。<br></p></blockquote><h3 id="4-存储器的层次化结构"><a href="#4-存储器的层次化结构" class="headerlink" title="4.存储器的层次化结构"></a>4.存储器的层次化结构</h3><blockquote><p><strong>缓存-主存层次</strong>主要解决CPU和主存速度不匹配的问题。主存和缓存之间的数据交换是由硬件自动完成的，对程序员是透明的；<br><br><strong>主存-辅存层次</strong>主要解决层次系统的容量问题。主存和辅存之间的数据交换是由硬件和操作系统共同完成的。<br></p></blockquote><h3 id="5-半导体随机存取存储器"><a href="#5-半导体随机存取存储器" class="headerlink" title="5. 半导体随机存取存储器"></a>5. 半导体随机存取存储器</h3><h4 id="5-1-半导体存储芯片的基本结构"><a href="#5-1-半导体存储芯片的基本结构" class="headerlink" title="5.1 半导体存储芯片的基本结构"></a>5.1 半导体存储芯片的基本结构</h4><blockquote><p>半导体存储芯片主要由存储矩阵、译码驱动电路和读/写电路组成。<br><br>地址线是单向的，数据线是双向的，其余的属于控制线，包括读/写控制线（用来进行读/写操作）和片选线（用来选择存储芯片）。<br></p></blockquote><h4 id="5-2-半导体存储芯片的译码驱动方式"><a href="#5-2-半导体存储芯片的译码驱动方式" class="headerlink" title="5.2 半导体存储芯片的译码驱动方式"></a>5.2 半导体存储芯片的译码驱动方式</h4><blockquote><p>译码驱动：将地址线送来的地址信号转换成对应存储单元的选择信号。<br><br>(1)<strong>线选法</strong>（单译码）：矩阵有N行，则需要地址线$log_2N$根；矩阵每行有m位(也就是m列)，则需要m根数据线；<br><br>(2)<strong>*重合法</strong>（双译码）：同时需要行和列的地址线。32($2^5$)行里选中1行需要5根地址线，32($2^5$)列选中一列也需要5根地址线，一共需要10根地址线。<br></p></blockquote><h4 id="5-3-静态RAM（SRAM）存储器"><a href="#5-3-静态RAM（SRAM）存储器" class="headerlink" title="5.3 静态RAM（SRAM）存储器"></a>5.3 静态RAM（SRAM）存储器</h4><blockquote><p>存储器的工作：保持存储信息、读数据和写数据<br></p></blockquote><h4 id="5-4-动态RAM（DRAM）存储器"><a href="#5-4-动态RAM（DRAM）存储器" class="headerlink" title="5.4 动态RAM（DRAM）存储器"></a>5.4 动态RAM（DRAM）存储器</h4><blockquote><p>存储器的工作：保持存储信息、读数据和写数据<br><br>DRAM存储器的刷新：采用电容式存储，按行刷新(因为存储体是矩阵形式)，由硬件支持，不由CPU指挥，占一个读/写周期。<br><br>3种<strong>刷新方式</strong>：<br><br>1)集中刷新：把刷新操作集中到一段时间内进行；<br><br>2)分散刷新：将刷新操作分散进行，周期性的进行；<br><br>3)异步刷新：是一个折中方案，有计划的刷新，时间分配十分合理。<br><br>刷新的实质：读出后再按原样写入。<br></p></blockquote><h4 id="5-5-只读存储器（ROM）"><a href="#5-5-只读存储器（ROM）" class="headerlink" title="5.5 只读存储器（ROM）"></a>5.5 只读存储器（ROM）</h4><blockquote><p>可分为：<br><br>掩膜型只读存储器(MROM)、可编程只读存储器(PROM)、可擦除可编程存储器(EPROM)、电可擦除可编程存储器(EEPROM)、快擦除读写存储器(Flash Memory，又叫闪存，集合了ROM和RAM的长处)。<bf></bf></p></blockquote><h4 id="5-6-对比ROM和RAM"><a href="#5-6-对比ROM和RAM" class="headerlink" title="5.6 对比ROM和RAM"></a>5.6 对比ROM和RAM</h4><blockquote><p>存取方式一样，都是随机存取。不同的是，ROM只读，RAM可读可写。<br></p></blockquote><h4 id="5-7-存储器容量扩充"><a href="#5-7-存储器容量扩充" class="headerlink" title="5.7 存储器容量扩充"></a>5.7 存储器容量扩充</h4><blockquote><p><strong>概念</strong>：将若干个存储芯片连接在一起组成足够容量的存储器。<br></p><p><strong>补充求芯片数量的公式</strong>：若要求将容量为<code>a*b（a为字线，连接地址线）</code>的芯片组成容量为<code>c*d</code>的芯片，则协议的芯片数量<code>n=(c*d)/a*b（整个存储器的容量除以单个芯片的容量）</code><br></p><p>3类<strong>扩充方法</strong>：<br></p><p>1)位扩充（增加<code>a*b中的b</code>）：<br><br>增加存储字长，横向扩展，比如要将<code>1K*4</code>位的芯片组成<code>1K*8</code>位的存储器，过程如下：需要<code>（1K*8）/（1K*4）=2</code>片芯片，需要10根地址线（$2^{10}=1K$），需要8根数据线（<code>1K*8</code>中的8代表位数）；<br></p><p>2)字扩充（增加<code>a*b中的a</code>）：<br><br>增加存储单元的个数，纵向扩展，比如要将<code>1K*8</code>位的芯片组成<code>2K*8</code>位的存储器，过程如下：需要<code>（2K*8）/（1K*8）=2</code>片芯片，需要11根地址线（$2^{11}=2K$），需要8根数据线（<code>2K*8</code>中的8代表位数）；<br></p></blockquote><p>3）字位扩充（增加<code>a*b中的a和b</code>）：<br></p><blockquote><p>增加存储单元的个数和存储字长，纵向扩展，比如要将<code>1K*4</code>位的芯片组成<code>4K*8</code>位的存储器，过程如下：需要<code>（4K*8）/（1K*4）=8</code>片芯片，需要11根地址线（$2^{12}=4K$），需要8根数据线（<code>2K*8</code>中的8代表位数）；<br></p></blockquote><h3 id="6-双口RAM"><a href="#6-双口RAM" class="headerlink" title="6. 双口RAM"></a>6. 双口RAM</h3><blockquote><p>具有两组相互独立的地址线、数据线和读/写控制线。<br><br>可以并行工作，是一种高速工作的存储器；<br><br>有可能在同一时间两个端口同时操作存储器的同一个存储单元，因此设置了<code>BUSY</code>标志。<br></p></blockquote><h3 id="7-多模块存储器（解决了CPU与I-O设备速度不匹配的问题，提高了存储器的工作速度）"><a href="#7-多模块存储器（解决了CPU与I-O设备速度不匹配的问题，提高了存储器的工作速度）" class="headerlink" title="7. 多模块存储器（解决了CPU与I/O设备速度不匹配的问题，提高了存储器的工作速度）"></a>7. 多模块存储器（解决了CPU与I/O设备速度不匹配的问题，提高了存储器的工作速度）</h3><blockquote><p>不同于寻找更高速的元件和采用存储器层次结构，这种方法是通过调整主存的结构来提高访存速度，主要有两类：单体多字存储器、多体并行存储器<br></p></blockquote><h4 id="7-1-单体多字存储器"><a href="#7-1-单体多字存储器" class="headerlink" title="7.1 单体多字存储器"></a>7.1 单体多字存储器</h4><blockquote><p><strong>使用前提</strong>：指令和数据在主存内必须连续存放；<br><br><strong>原理</strong>：把存储器的<code>存储字</code>字长增加n倍，以存放n个指令字或数据字，于是单体多字存储器的最大带宽比单体单字存储器的最大带宽提高n倍。正常情况下不可能达到最大带宽，因为程序使用指令字和数据字存在随机性。；<br><br><strong>缺点</strong>：必须凑齐n个数据字之后才能作为一个存储字一次写入存储器，因此需要首先把属于一个存储字的n个数据字读入到数据寄存器中，等数据寄存器达到了一个存储字的长度，再将其写入存储器。</p></blockquote><h4 id="7-2-多体并行存储器"><a href="#7-2-多体并行存储器" class="headerlink" title="7.2 多体并行存储器"></a>7.2 多体并行存储器</h4><blockquote><p>所谓多体并行存储器，就是采用多个模块组成的存储器，每个模块有着相同的容量和存取速度，各个模块都有独立的地址寄存器、数据寄存器、地址译码器和读/写电路，每个模块都可以看做一个独立的存储器。<br><br>主要分为两种：高位交叉编址的多体并行存储器、低位交叉编址的多体并行存储器<br></p></blockquote><h5 id="7-2-1-高位交叉编址的多体并行存储器-竖着走，按列扫描"><a href="#7-2-1-高位交叉编址的多体并行存储器-竖着走，按列扫描" class="headerlink" title="7.2.1 高位交叉编址的多体并行存储器(竖着走，按列扫描)"></a>7.2.1 高位交叉编址的多体并行存储器(竖着走，按列扫描)</h5><blockquote><p>高位地址表示体号，低位地址定位体内地址。由于每个模块内的体内地址顺序是连续的，因此又称<code>顺序存储</code>。这样，可以在同一时间使得不同的请求源同时访问不同的体，进而实现个体的并行工作。<br><br><strong>特点</strong>：相邻两个字在同一个存储体中，高位的变动才会产生交叉访问的效果。<br><br><strong>优点</strong>：非常有利于存储器的扩充，只需将存储单元的编号往后加即可。<br><br><strong>缺点</strong>：由于各个模块一个接一个的串行工作，因此存储器的带宽受到了限制。<br></p></blockquote><h5 id="7-2-2-低位交叉编址的多体并行存储器-横着走，按行扫描"><a href="#7-2-2-低位交叉编址的多体并行存储器-横着走，按行扫描" class="headerlink" title="7.2.2 低位交叉编址的多体并行存储器(横着走，按行扫描)"></a>7.2.2 低位交叉编址的多体并行存储器(横着走，按行扫描)</h5><blockquote><p>由于程序是存放在相邻的体中，因此又称<code>交叉存储</code>。低位为体号，高位定位体内地址。<br><br><strong>特点</strong>：连续地址分布在相邻的不同模块内，而同一个模块内的地址都是不连续的。<br></p></blockquote><h3 id="8-高速缓冲存储器（Cache）–提高存储系统的工作速度"><a href="#8-高速缓冲存储器（Cache）–提高存储系统的工作速度" class="headerlink" title="8. 高速缓冲存储器（Cache）–提高存储系统的工作速度"></a>8. 高速缓冲存储器（Cache）–提高存储系统的工作速度</h3><h4 id="8-1-主存和Cache的编址"><a href="#8-1-主存和Cache的编址" class="headerlink" title="8.1 主存和Cache的编址"></a>8.1 主存和Cache的编址</h4><blockquote><p>主存由一个个的字块组成，主存的地址分为两部分：高m位表示主存的块地址，低b位表示其块内的字或字节。同理，Cache的地址也应分为两部分：高ｃ位表示Cache的块号，低ｂ位表示其块内的字或字节数。<br><br><strong>命中率</strong>：CPU要访问的的信息在Cache中的比例；<br><br><strong>平均访问时间</strong>：假设命中率为$h$，$t_c$为命中时访问Cache的时间，$t_m$为未命中时的主存访问时间，则Cache-主存系统的平均访问时间$t_a$为$t_a=ht_c+(1-h)t_m$；<br><br><strong>Cache-主存系统效率</strong>：$e=t_c/t_a$ 。<br></p></blockquote><ul><li>Cache的命中率只与<code>Cache的容量</code>、<code>Cache的字块长度</code>有关。<br></li><li>主存与Cache之间传送数据的基本单位是块，而主存与CPU之间传送数据的基本单位是字（一个块包含多个字）。<br></li></ul><h4 id="8-2-Cache的基本结构"><a href="#8-2-Cache的基本结构" class="headerlink" title="8.2 Cache的基本结构"></a>8.2 Cache的基本结构</h4><blockquote><p>地址映射变换机构(将CPU送来的主存地址转换成Cache地址)；<br><br>替换机构。<br></p></blockquote><h4 id="8-3-指令和数据是放在同一个Cache中吗？"><a href="#8-3-指令和数据是放在同一个Cache中吗？" class="headerlink" title="8.3 指令和数据是放在同一个Cache中吗？"></a>8.3 指令和数据是放在同一个Cache中吗？</h4><blockquote><p>一级Cache的指令和数据一般分开存放，而二级Cache的指令和数据放在一起，因此有<code>L1 data Cache</code>和<code>L1 code Cache</code>。<br></p></blockquote><h4 id="8-4-一些其他知识点"><a href="#8-4-一些其他知识点" class="headerlink" title="8.4 一些其他知识点"></a>8.4 一些其他知识点</h4><blockquote><p>在CPU和主存之间增加Cache并不能增加计算机总存储量；<br><br>程序员无需知道高速缓存的访问过程。<br></p></blockquote><h3 id="9-Cache和主存之间的映射方式-主存块号–-gt-CPU块号"><a href="#9-Cache和主存之间的映射方式-主存块号–-gt-CPU块号" class="headerlink" title="9. Cache和主存之间的映射方式(主存块号–&gt;CPU块号)"></a>9. Cache和主存之间的映射方式(主存块号–&gt;CPU块号)</h3><blockquote><p>(1)<strong>直接映射</strong>：每个缓存块可以和若干个主存块对应，每个主存块只能和一个缓存块对应。<br><br>优点：实现简单。<br><br>缺点：不够灵活(容易造成空闲Cache块的浪费)、冲突概率高(抖动)。<br><br>应用场合：适合大容量Cache。<br><br>(2)<strong>全相联映射</strong>：主存中每一个字块可以映射到Cache中的任何一块。<br><br>优点：Cache的命中率提高了、减小了块的冲突率(空位随便坐)进而提高了Cache的利用率。<br><br>缺点：tag的位数增加了，访问Cache时主存字块标记需要和Cache的全部“标记”进行比较，才能判断所访问主存地址是否已在Cache内。<br><br>应用场合：适用于小容量的Cache。<br><br>(3)<strong>组相联映射</strong>：按号分组，组内随意放(把Cache分成Q组，每组有R块)，这样，组间是直接映射，组内是全相联映射，虽没有直接相连的速度快，但电路实现简单(只需进行组间本比较，而无需<code>对Cache的每一块进行比较[全相联是这样子的，它需要]</code>)，命中率高。</p></blockquote><h3 id="10-Cache中主存块的替换算法（针对全相联和组相联，至于直接映射只需直接替换就好了）"><a href="#10-Cache中主存块的替换算法（针对全相联和组相联，至于直接映射只需直接替换就好了）" class="headerlink" title="10.Cache中主存块的替换算法（针对全相联和组相联，至于直接映射只需直接替换就好了）"></a>10.Cache中主存块的替换算法（针对全相联和组相联，至于直接映射只需直接替换就好了）</h3><blockquote><p>先进先出，近期最少使用(理想，预测性，难以实现)，最不经常使用，随机法。<br></p></blockquote><h3 id="11-Cache写操作策略（同步Cache块与主存块中的内容）"><a href="#11-Cache写操作策略（同步Cache块与主存块中的内容）" class="headerlink" title="11. Cache写操作策略（同步Cache块与主存块中的内容）"></a>11. Cache写操作策略（同步Cache块与主存块中的内容）</h3><blockquote><p>(1)<strong>写回法</strong>：<br><br>当CPU写Cache命中时，只修改Cache的内容，而不立即写入主存，只有当此行被换出时才写回主存。这样减少了访存次数。Cache的每一行都设置一个修改位(脏位)，当某行被换出时，根据此行的修改位来决定将该行内容写回主存还是简单丢弃。<br></p></blockquote><p>若未命中，则使用<code>写分配法</code>：加载主存中的块到Cache中，然后在Cache中更新，最后同步到主存。<br></p><blockquote><p>(2)<strong>全写法</strong>：<br><br>当写Cache命中时，Cache与主存同时发生写修改。<br></p></blockquote><p>若未命中，则使用<code>非写分配法</code>：只写入主存而不调入Cache。<br></p><blockquote><p>(3)<strong>写一次法</strong>：<br><br>以上两种方法的折中，写命中与写未命中的处理方法与写回法基本一致，仅仅是第一次写命中时要同时写入主存。<br></p></blockquote><h3 id="12-虚拟存储器"><a href="#12-虚拟存储器" class="headerlink" title="12. 虚拟存储器"></a>12. 虚拟存储器</h3><p>详见操作系统。<br></p><h2 id="第四章、指令系统"><a href="#第四章、指令系统" class="headerlink" title="第四章、指令系统"></a>第四章、指令系统</h2><h3 id="1-指令概述"><a href="#1-指令概述" class="headerlink" title="1. 指令概述"></a>1. 指令概述</h3><blockquote><p>构成机器语言的一条条语句就是一条条<strong>机器指令</strong>，全部机器指令的集合就是<strong>机器的指令系统</strong>。<br><br>一条指令包括<code>操作码</code>和<code>地址码</code>两部分：<br><br><strong>操作码</strong>：分为<code>定长操作码</code>和<code>不定长操作码</code>。告诉要做什么操作（比如，加减乘除）；<br><br><strong>地址码</strong>：又称<code>操作数字段</code>，其任务是：指出操作数的地址、运算结果需存放的地址、下一条指令的地址。<br></p></blockquote><h3 id="2-指令分类"><a href="#2-指令分类" class="headerlink" title="2. 指令分类"></a>2. 指令分类</h3><blockquote><p>(1)<strong>零地址指令</strong>：只给出操作码字段OP，适用于：1）不需要操作数的指令，比如停机指令、关中断指令等；2）堆栈计算机中的零地址运算类指令。<br><br>(2)<strong>一地址指令</strong>：地址码字段只有一个，适用于：1）单目运算，如求反，减一等；2）隐含约定目的地址的双操作数指令。假设指令字长32位，地址码字段24位，则寻址范围是$2^{24}=16M$ <br><br>(3)<strong>二地址指令</strong>：有两个地址码字段，一个是源操作数地址，另一个是目的操作数地址，适用于各类加减乘除运算。假设指令字长32位，操作码8位，两个地址码字段各12位，则寻址范围是$2^{12}=4K$。<br><br>(4)<strong>三地址指令</strong>：有三个地址码字段。假设指令字长32位，操作码8位，三个地址码字段各8位，则寻址范围是$2^8=256$ <br><br>(5)<strong>四地址指令</strong>：有四个地址码字段。若指令字长32位，操作码8位，4个地址码各6位，则直接寻址范围是$2^6==64$。<br></p></blockquote><p>指令字长取决于操作码的长度、操作数地址的长度、操作数地址的个数。<br><br>每一条指令指令都必须告诉CPU该指令如何做，因此必须指定操作码。<br></p><h3 id="3-什么是指令字长"><a href="#3-什么是指令字长" class="headerlink" title="3.什么是指令字长"></a>3.什么是指令字长</h3><blockquote><p>指令字长是指一条指令所占用存储空间的大小。指令字长一般为字节的整数倍。<br><br>单字长指令：指令长度=机器字长；<br><br>半字长指令：指令长度=0.5<em>机器字长；<br><br>双字长指令：指令长度=2</em>机器字长。<br></p></blockquote><h3 id="4-区分数据字和指令字"><a href="#4-区分数据字和指令字" class="headerlink" title="4.区分数据字和指令字"></a>4.区分数据字和指令字</h3><blockquote><p>如果计算机中的某一个字表示的是一个数据，则此字称为<code>数据字</code>；<br><br>如果计算机中的某一个字表示的是一条指令，则此字就称为<code>指令字</code>。<br></p></blockquote><h3 id="5-定长操作码和不定长操作码"><a href="#5-定长操作码和不定长操作码" class="headerlink" title="5. 定长操作码和不定长操作码"></a>5. 定长操作码和不定长操作码</h3><blockquote><p><strong>定长操作码</strong>：在指令字的最高位部分分配固定的若干位表示操作码。对于具有n位操作码字段的指令系统，最多能够表示$2^n$条指令。<br><br><strong>不定长操作码</strong>：操作码的长度随地址码个数的减少而增加，不同的地址数的指令可以具有不同长度的操作码。这样子可以在满足需要的前提下有效的缩指令字长。需要注意的是：不允许较短的操作码是较长的操作码的前缀；各条指令的操作码一定不可以重复。<br></p></blockquote><h3 id="6-指令的寻址方式"><a href="#6-指令的寻址方式" class="headerlink" title="6.指令的寻址方式"></a>6.指令的寻址方式</h3><blockquote><p>定义：是指指令或操作数有效地址的寻找方式，主要分为<code>数据寻址</code>和<code>指令寻址</code>。<br><br>寻址的原因：因为指令的地址码字段往往并不是操作数的真实地址，而是形式地址。<br></p></blockquote><h4 id="6-1-指令寻址和数据寻址的比较"><a href="#6-1-指令寻址和数据寻址的比较" class="headerlink" title="6.1 指令寻址和数据寻址的比较"></a>6.1 指令寻址和数据寻址的比较</h4><blockquote><p>确定指令存放位置的过程称为<code>指令寻址方式</code>，确定操作数存放位置的过程称为<code>数据寻址方式</code>，两者复杂度不一样。<br><br><strong>指令寻址</strong>是指找到下一条将要执行的指令的地址，有两种方式：顺序执行(用指令计数器(PC)+1来得到下一条在指令的地址)和跳转执行(通过转移指令的寻址方式，计算出目标地址，送到PC中即可。目标转移地址的形成方式主要有3种：立即寻址(直接地址)、相对寻址(相对地址)、间接寻址(间接地址))。<br><br><strong>数据寻址</strong>是指找到当前正在执行指令的数据地址。为了区分各种数据寻址方式，通常在指令字中设置一个字段，用来致命使用何种寻址方式，这样，数据指令字的结构变为{操作码，寻址特征，形式地址(A)}。<br></p></blockquote><h4 id="6-2常见的数据寻址方式"><a href="#6-2常见的数据寻址方式" class="headerlink" title="6.2常见的数据寻址方式"></a>6.2常见的数据寻址方式</h4><blockquote><p>(1)<strong>立即寻址</strong>：立即给出操作数，不需要给出地址去其他地方找操作数。只需要在取指令时访问存储器，而在执行阶段不需要。但A的位数限制了立即寻址的范围。常用于对某寄存器或内存单元赋初值。<br></p><p>(2)<strong>直接寻址</strong>：通过指令中的地址码字段找到真实地址(取货码取快递)，执行阶段需要访问一次存储器去取操作数。直接给出了操作数的有效地址，寻找操作数简单，但是寻址范围较小(操作数的有效地址仅由A决定，而A的位数一般都比较小，因此寻址范围比较小)。<br></p></blockquote><blockquote><p>(3)<strong>隐含寻址</strong>：指令字不明显的给出操作数的地址，其操作数地址隐含在操作码或者某个寄存器中。有利于缩短指令字长，但是需要增加存储操作数或隐含地址的硬件。<br></p></blockquote><blockquote><p>(4)<strong>间接寻址</strong>：解决了直接寻址的寻址范围小的问题。直接寻址直接给出了操作数的有效地址，而间接寻址给出的是<code>操作数有效地址的地址</code>。间接寻址又可以分为<code>一次间接寻址</code>和<code>多次间接寻址</code>。便于子程序返回和查表，但N次间接寻址需要在指令阶段还需要访问存储器<code>N+1</code>次(前N次找操作数的有效地址，最后一次找操作数)。<br></p></blockquote><blockquote><p>(5)<strong>寄存器寻址</strong>：和直接寻址类似，在直接寻址的指令字中，地址码字段给出的是主存地址，而在寄存器寻址的指令字中，地址码字段直接给出的是寄存器编号$R_i$，则操作数的有效地址为$EA=R_i$。</p></blockquote><blockquote><p>(6)<strong>寄存器间接寻址</strong>：和寄存器寻址不同之处在于，$R_i$中存放的不是操作数，而是操作数所在主存单元的地址号，有效地址$EA=(R_i)$。便于编制循环程序，但需要访问一次存储器去取操作数。<br></p></blockquote><blockquote><p>(7)<strong>基址寻址</strong>：设置一个基址寄存器(BR)，则其操作数的有效地址等于指令字中的形式地址A与基址寄存器中的内容(基地址)相加，即：$EA=A+(BR)$。扩大了操作数的寻址范围(因为基址寄存器的位数可以大于形式地址Ade位数)，便于解决多道程序问题。注意：基址寄存器的内容由操作系统确定，但用户有权知道使用了哪个寄存器作为基址寄存器。<br></p></blockquote><blockquote><p>(8)<strong>变址寻址</strong>：不同于基址寻址，在变址寻址中，变址寄存器中的内容由用户设定，在程序执行过程中其值可变，而指令字中的形式地址A是不可变的。也扩大了操作数的寻址范围，非常适合处理数组和循环问题。<br></p></blockquote><blockquote><p>(9)<strong>相对寻址</strong>：基于程序局部性原理，相对寻址的有效地址是将程序计数器(PC)的内容与指令字中的形式地址A相加而成，即：$EA=(PC)+A$。用于转移类指令，便与编制浮动程序。<br></p></blockquote><h3 id="7-CIRC和RISC的基本概念"><a href="#7-CIRC和RISC的基本概念" class="headerlink" title="7. CIRC和RISC的基本概念"></a>7. CIRC和RISC的基本概念</h3><h4 id="7-1-CISC的主要特点"><a href="#7-1-CISC的主要特点" class="headerlink" title="7.1 CISC的主要特点"></a>7.1 CISC的主要特点</h4><blockquote><p>(1) 指令系统复杂庞大；<br><br>(2)指令长度不固定，指令格式种类多，寻址方式种类多；<br><br>(3)可以访存的指令不受限制(RISC只有取数/存数指令访问存储器)；<br><br>(4)由于80%的程序只是用20%的指令，因此CISC各指令的使用频率差距太大；<br><br>(5)各种指令执行时间相差很大，大多数指令需多个时钟周期才能完成；<br><br>(6)控制器大多数采用微程序控制；<br><br>(7)难以用优化编译生成高效的目标代码程序。<br></p></blockquote><h4 id="7-2-80-20定律"><a href="#7-2-80-20定律" class="headerlink" title="7.2 80-20定律"></a>7.2 80-20定律</h4><blockquote><p>典型程序中80%的语句都是使用计算机中20%的指令，而这20%的指令都属于简单指令。<br></p></blockquote><p>于是<code>RISC</code>出现了！<br></p><h4 id="7-3-RISC的主要特点"><a href="#7-3-RISC的主要特点" class="headerlink" title="7.3 RISC的主要特点"></a>7.3 RISC的主要特点</h4><blockquote><p>(1)把复杂指令的功能用使用频率较高的简单指令实现；<br><br>(2)指令长度固定，指令格式种类少，寻址方式种类少；<br><br>(3)只有取数/存数指令访问存储器，其余的指令操作在寄存器中完成；<br><br>(4)CPU中有多个通用寄存器(比CISC的多)；<br><br>(5)一定采用流水线技术，大部分指令在一个时钟周期内完成；<br><br>(6)控制器采用组合逻辑控制，不用微程序控制；<br><br>(7)采用优化的编译程序。<br></p></blockquote><h4 id="7-4-对比RISC和CISC"><a href="#7-4-对比RISC和CISC" class="headerlink" title="7.4 对比RISC和CISC"></a>7.4 对比RISC和CISC</h4><blockquote><p>RISC更能提高计算机的运算速度，更便于设计，可降低成本，提高可靠性，更有效支持高级语言程序。而CISC有专用指令来完成特定的更能，因此处理特殊任务比较高效。<br></p></blockquote><h2 id="第五章、中央处理器"><a href="#第五章、中央处理器" class="headerlink" title="第五章、中央处理器"></a>第五章、中央处理器</h2><h3 id="1-序言"><a href="#1-序言" class="headerlink" title="1. 序言"></a>1. 序言</h3><blockquote><p>CPU=运算器+控制器。<br><br>运算器的功能是对数据进行加工；<br><br>控制器的功能是负责协调并控制计算机各部件执行程序的指令序列，包括取指令、分析指令、执行指令、控制主机与I/O设备交换信息以及总线的管理，处理中断的能力。<br></p></blockquote><h3 id="2-CPU的功能"><a href="#2-CPU的功能" class="headerlink" title="2. CPU的功能"></a>2. CPU的功能</h3><blockquote><p>(1)控制器能自动形成指令的地址，并能发出取指令的命令，将对应此地址的指令取到控制器中，称为<code>指令控制</code>；<br><br>(2)取到指令之后，应该产生完成每条指令所需要的控制命令，称为<code>操作控制</code>；<br><br>(3)控制命令产生后，需要对各种控制命令加以时间上的控制，称为<code>时间控制</code>；<br><br>(4)在执行的过程中，可能需要进行算术运算和逻辑运算，称为<code>数据加工</code>；<br><br>(5)最后当然还有处理中断的能力，称为<code>中断处理</code>。<br></p></blockquote><h3 id="3-CPU的基本结构"><a href="#3-CPU的基本结构" class="headerlink" title="3. CPU的基本结构"></a>3. CPU的基本结构</h3><blockquote><p><strong>控制单元(CU)</strong>：指令控制、操作控制、 时间控制；<br><br><strong>算数逻辑单元(ALU)</strong>：数据加工；<br><br><strong>中断系统</strong>：中断处理；<br><br><strong>寄存器</strong>。<br></p></blockquote><h3 id="4-CPU中的主要寄存器"><a href="#4-CPU中的主要寄存器" class="headerlink" title="4. CPU中的主要寄存器"></a>4. CPU中的主要寄存器</h3><p>可分为<code>运算器中的寄存器</code>和<code>控制器中的寄存器</code></p><h4 id="4-1-运算器中的寄存器"><a href="#4-1-运算器中的寄存器" class="headerlink" title="4.1 运算器中的寄存器"></a>4.1 运算器中的寄存器</h4><blockquote><p>(1)<strong>暂存寄存器</strong>：暂存从主存读来的数据，对程序员透明(用户不可见)；<br><br>(2)<strong>累加寄存器(ACC)</strong>：是一个通用寄存器，用户可见，暂时存放ALU运算的结果信息，至少要有一个；<br><br>(3)<strong>通用寄存器组</strong>：存放操作数和各种地址信息，用户可见；<br><br>(4)<strong>状态条件寄存器(PSW)</strong>：保存由算数指令和逻辑指令运行或测试的结果建立的各种条件码内容，用户可见。<br></p></blockquote><h4 id="4-2-控制器中的寄存器"><a href="#4-2-控制器中的寄存器" class="headerlink" title="4.2 控制器中的寄存器"></a>4.2 控制器中的寄存器</h4><blockquote><p>(1)<strong>程序计数器(PC)</strong>：确定下一条指令的地址，具有寄存信息和计数两种功能；<br><br>(2)<strong>指令寄存器(IR)</strong>：保存当前正在执行的指令，指令划分为操作码和地址码字段，由二进制数字组成；<br><br>(3)<strong>存储器数据寄存器(MDR)</strong>：暂时存放由主存读出的一条指令或一个数据字，可作为CPU、内存和外部设备之间信息传送的中转站，并且补偿三者速度上的差别，此外在单累加结构的运算器中，存储器数据寄存器还可兼作操作数寄存器；<br><br>(4)<strong>存储器地址寄存器(MAR)</strong>：保存当前CPU所访问的内存单元的地址。<br></p></blockquote><h3 id="5-指令周期"><a href="#5-指令周期" class="headerlink" title="5. 指令周期"></a>5. 指令周期</h3><blockquote><p>定义：CPU每取出并执行一条指令所需的全部时间，即CPU完成一条指令的时间，称为<strong>指令周期</strong>。<br></p></blockquote><p>一个指令周期=若干个机器周期<br><br>一个机器周期=若干个时钟周期<br></p><blockquote><p>一个完整的指令周期包括：<br><br>取指周期(取指令)+间址周期(取地址)+执行周期(存取操作数或结果)+中断周期(存程序断点)<br></p></blockquote><h3 id="6-指令的执行方案"><a href="#6-指令的执行方案" class="headerlink" title="6. 指令的执行方案"></a>6. 指令的执行方案</h3><blockquote><p>【方案1】<strong>单指令周期</strong>：对所有的指令都选用相同的执行时间来完成，指令之间串行执行，效率低；<br><br>【方案2】<strong>多指令周期</strong>：对不同类型的指令选用不同的执行步骤来完成，指令之间仍串行执行，但可以选用不同个数的时钟周期来完成不同指令的执行过程；<br><br>【方案3】<strong>流水线方案</strong>：指令之间可以并行执行，力争在每个时钟脉冲周期完成一条指令的执行过程(理想情况下)。通过在每一个时钟周期启动一条指令，尽量让多条指令同时运行。<br></p></blockquote><h3 id="7-信息流"><a href="#7-信息流" class="headerlink" title="7. 信息流"></a>7. 信息流</h3><blockquote><p>信息流是根据指令要求访问的数据序列，在指令执行的不同阶段，要求访问的数据序列是不同的，而且对于不同的指令，它们的数据流往往也是不同的<br></p></blockquote><h3 id="8-数据通路"><a href="#8-数据通路" class="headerlink" title="8. 数据通路"></a>8. 数据通路</h3><blockquote><p>数据在功能部件之间传送的路径称为<code>数据通路</code>，它的<strong>功能</strong>是实现CPU内部的运算器和寄存器，以及寄存器之间的数据交换。<br></p></blockquote><h4 id="8-1-数据通路的基本结构的两种方式"><a href="#8-1-数据通路的基本结构的两种方式" class="headerlink" title="8.1 数据通路的基本结构的两种方式"></a>8.1 数据通路的基本结构的两种方式</h4><blockquote><p>【方式1】<strong>CPU内部总线方式</strong>：将所有寄存器的输入端和输出端都连接到一条或多条公共的通路上。包括<code>单总线结构</code>(连接各部件的总线只有一条)和<code>双总线结构和多总线结构</code>(CPU中有两条或多条总线，此时数据的传递可以同时进行)。这种结构比较简单，但是数据传输存在较多的冲突现象，性能较低。<br><br>【方式2】<strong>专用数据通路方式</strong>：根据指令执行过程中的数据和地址的流动安排连接线路。避免了使用共享的执行，性能较高，但硬件量较大。<br></p></blockquote><h4 id="8-2常见数据通路的数据传送"><a href="#8-2常见数据通路的数据传送" class="headerlink" title="8.2常见数据通路的数据传送"></a>8.2常见数据通路的数据传送</h4><blockquote><p>（1）寄存器之间的数据传送(by CPU内部总线)；<br><br>（2）主存与CPU之间的数据传送(by CPU内部总线)；<br><br>（3）执行算数或逻辑运算(算数逻辑单元ALU没有内部存储功能，因此执行算数逻辑运算时，要求ALU的两个输入端同时有效)。<br></p></blockquote><h3 id="9-控制单元的功能"><a href="#9-控制单元的功能" class="headerlink" title="9. 控制单元的功能"></a>9. 控制单元的功能</h3><blockquote><p>(1)从主存中取出一条指令，并指出下一条指令在主存中的位置；<br><br>(2)对指令进行译码或测试，产生相应的操作控制信号，以便启动规定的动作；<br><br>(3)指挥并控制CPU、主存、输入和输出设备之间的数据流动方向。<br></p></blockquote><h3 id="10-控制器的控制方式"><a href="#10-控制器的控制方式" class="headerlink" title="10. 控制器的控制方式"></a>10. 控制器的控制方式</h3><p><strong>同步控制方式</strong>：整个系统的所有控制信号均来自一个统一的时钟信号<br></p><blockquote><p>(1)采用完全统一节拍的机器周期(定长方式)；<br><br>(2)采用不同节拍的机器周期(不定长方式)；<br><br>(3)采用中央控制和局部控制相结合的方法。<br></p></blockquote><p><strong>异步控制方式</strong>：通过应答方式进行联络，不存在基准时标信号，一般用于主机与I/O设备之间的传送控制，使告诉的主机与慢速的I/O设备可以按照各自的需要设置时序系统。<br></p><p><strong>联合控制方式</strong>：折中方案，这种方式对各种不同的指令的微操作大部分采用同步控制方式，小部分采用异步控制方式。<br></p><h3 id="11-控制单元-CU-的设计"><a href="#11-控制单元-CU-的设计" class="headerlink" title="11. 控制单元(CU)的设计"></a>11. 控制单元(CU)的设计</h3><h4 id="11-1-两种设计方式的对比"><a href="#11-1-两种设计方式的对比" class="headerlink" title="11.1 两种设计方式的对比"></a>11.1 两种设计方式的对比</h4><ul><li><strong>组合逻辑控制(硬布线逻辑控制)</strong>：控制器处理速度块，但电路庞杂导致难以扩展，制造周期长，不灵活，可维护性差。<br></li><li><strong>微程序控制</strong>:仿照程序设计的方法编制<strong>每个机器指令对应的微程序</strong>，<strong>每个微程序由若干条微指令构成，各微指令包含若干条微命令</strong>。扩展单元设计简单，指令添加容易(灵活)，可维护性好，但速度较慢。<br></li></ul><h4 id="11-2-微程序设计"><a href="#11-2-微程序设计" class="headerlink" title="11.2 微程序设计"></a>11.2 微程序设计</h4><h5 id="11-2-1-微程序设计的概念"><a href="#11-2-1-微程序设计的概念" class="headerlink" title="11.2.1 微程序设计的概念"></a>11.2.1 微程序设计的概念</h5><blockquote><p>将一条机器指令编写成一个微程序，每一个微程序包含若干条微指令，每一条微指令对应一个或几个微操作命令。然后把这些微程序存到一个控制存储器中，用寻找用户程序的方法来寻找每个微程序中的微指令。所以逐条执行每一条微指令，也就相应地完成了一条机器指令的全部操作。<strong>每一条机器指令都与一个以操作性质命名的微程序对应。</strong> <br></p></blockquote><h5 id="11-2-2-微程序控制的相关概念"><a href="#11-2-2-微程序控制的相关概念" class="headerlink" title="11.2.2 微程序控制的相关概念"></a>11.2.2 微程序控制的相关概念</h5><ul><li>微命令与微操作<blockquote><p>一条机器指令可以分解成一个<strong>微操作</strong>序列(不可再分)。<strong>微命令</strong>是由控制部件向执行部件发出的各种控制命令，是构成控制序列的最小单位。<strong>微命令和微操作一一对应</strong>，微命令是微操作的控制信号，微操作是微命令的执行过程。<br></p></blockquote></li><li>微指令与微周期<blockquote><p><strong>微指令</strong>是若干微命令的集合，包含操作控制字段和顺序控制字段。<strong>微周期</strong>指从控制存储器中读取一条微指令并执行相应的微操作所需的时间。<br></p></blockquote></li><li>主存储器和控制存储器<blockquote><p><strong>主存储器</strong>用于存放程序和数据，在CPU外部，用RAM实现；<strong>控制存储器(CM)</strong>用于存放微操作，在CPU内部，用ROM实现。<br></p></blockquote></li><li>程序与微程序<blockquote><p><strong>程序</strong>是指令的有序集合，用于完成特定的功能；<strong>微程序</strong>是微指令的有序集合，一条指令的功能由一段<strong>微程序</strong>来实现。<br></p></blockquote></li></ul><h5 id="11-2-3-微程序控制单元的基本组成"><a href="#11-2-3-微程序控制单元的基本组成" class="headerlink" title="11.2.3 微程序控制单元的基本组成"></a>11.2.3 微程序控制单元的基本组成</h5><blockquote><p><strong>控制存储器</strong>：这是微程序控制单元的核心部件，用来存放全部微程序，包含控制地址寄存器(CMAR，存放欲读出的微指令地址)和控制数据寄存器(CMDR,存放从控存中读出的微指令)；<br><br><strong>顺序逻辑</strong>：用来控制微指令序列。<br></p></blockquote><h5 id="11-2-4-微指令的基本格式"><a href="#11-2-4-微指令的基本格式" class="headerlink" title="11.2.4 微指令的基本格式"></a>11.2.4 微指令的基本格式</h5><blockquote><p><strong>操作控制字段</strong>：发出各种控制信号；<br><br><strong>顺序控制字段</strong>:可指出下地址，以控制微指令序列的执行。<br></p></blockquote><h5 id="11-2-5-微指令的编码方式"><a href="#11-2-5-微指令的编码方式" class="headerlink" title="11.2.5 微指令的编码方式"></a>11.2.5 微指令的编码方式</h5><blockquote><p>(1)直接编码(直接控制)方式：在微指令的微命令字段中每一位都代表一个微命令，不需要译码，因此简单、直观，执行速度快，操作并行性好。但微指令字长过长，造成控制存储器容量极大。<br></p><p>(2)字段直接编码方式：将微指令的微命令字段分成若干小字段，把互斥性微命令组合在同一字段中，把相容性微命令组合在不同字段中。缩短了微指令字长，但是要通过译码电路后再发出微命令，比较慢。<br></p></blockquote><p>注：<code>微指令周期</code>是指读出微指令的时间+执行该条微指令的时间。<br></p><blockquote><p>(3)字段间接编码方式：一个字段的某些微命令需由另一个字段中的某些微命令来解释，而不是靠字段直接译码发出微命令。可以进一步缩短微指令字长，但削弱了微指令的并行能力。<br></p><p>(4)混合编码方式<br></p></blockquote><h5 id="11-2-5-微指令格式"><a href="#11-2-5-微指令格式" class="headerlink" title="11.2.5 微指令格式"></a>11.2.5 微指令格式</h5><blockquote><p><strong>水平型微指令</strong>：一次能定义并执行多个并行操作。<br></p><p>优点：微程序短，执行速度快；<br></p><p>缺点：微指令长，编写微程序较麻烦。<br></p><p><strong>垂直型微指令</strong>：类似机器指令操作码的方式，由微操作码字段规定微指令的功能。<br></p><p>优点：微指令短，简单、规整，便于编写微程序；<br></p><p>缺点：微程序长，执行速度慢，工作效率低。<br></p><p><strong>混合型微指令</strong> <br></p></blockquote><h3 id="12-指令流水线"><a href="#12-指令流水线" class="headerlink" title="12. 指令流水线"></a>12. 指令流水线</h3><h4 id="12-1-指令流水线的优缺点"><a href="#12-1-指令流水线的优缺点" class="headerlink" title="12.1 指令流水线的优缺点"></a>12.1 指令流水线的优缺点</h4><blockquote><p>优点：缩短了程序的执行时间各功能部件的利用率明显提高；<br></p><p>缺点：需付出较大的硬件开销，控制过程相比顺序执行也更为复杂。<br></p></blockquote><h4 id="12-2-影响流水线的因素"><a href="#12-2-影响流水线的因素" class="headerlink" title="12.2  影响流水线的因素"></a>12.2  影响流水线的因素</h4><blockquote><p>(1)<strong>资源相关</strong>：多条指令进入流水线后在同一机器时钟周期使用了同一个功能部件所发生的冲突。<br></p><p>(2)<strong>数据相关</strong>：后一条指令必须等待前一条指令执行完毕才能执行。<br></p><p>(3)<strong>控制相关</strong>：当执行转移指令时，依据转移条件的产生结果，可能顺序执行下一条指令，也可能转移到新的目标地址取指令，从而使流水线断流。<br></p></blockquote><h2 id="第六章、总线"><a href="#第六章、总线" class="headerlink" title="第六章、总线"></a>第六章、总线</h2><h3 id="6-1-总线的基本概念"><a href="#6-1-总线的基本概念" class="headerlink" title="6.1 总线的基本概念"></a>6.1 总线的基本概念</h3><blockquote><p><strong>定义</strong>：总线是一组能为多个部件分时共享的公共信息传送线路(物理线路)。<br></p><p><strong>特点</strong>：分时+共享。<br></p><p><strong>特性</strong>：机械特性(尺寸、形状)+电气特性(传输方向和有效的电平范围)+功能特性(每根传输线的功能)+时间特性(哪根线在什么时候有效)。<br></p><p><strong>总线的传输周期</strong>：指CPU通过总线对存储器或I/O端口进行一次访问所需的时间。<br></p><p><strong>总线宽度</strong>：举例，高速公路有16条车道，则宽度就是16。<br></p></blockquote><h3 id="6-2-总线的分类"><a href="#6-2-总线的分类" class="headerlink" title="6.2 总线的分类"></a>6.2 总线的分类</h3><blockquote><p>按照<strong>数据传送方式</strong>，可分为<code>并行传输总线</code>和<code>串行传输总线</code>.<br></p><p>按照<strong>总线的使用范围</strong>，可分为<code>计算机总线</code>和<code>测控总线</code>.<br></p><p>按照<strong>连接部件的不同</strong>，可分为<code>片内总线</code>，<code>系统总线</code>和<code>通信总线</code>.<br></p></blockquote><p>注：片内总线就是芯片内部的总线，系统总线是连接五大不见之间的信息传输线，包括数据总线、地址总线和控制总线。<br></p><h3 id="6-3-总线的组成"><a href="#6-3-总线的组成" class="headerlink" title="6.3 总线的组成"></a>6.3 总线的组成</h3><blockquote><p>一组控制线、一组数据线和一组地址线。<br></p></blockquote><h3 id="6-4-总线的性能指标"><a href="#6-4-总线的性能指标" class="headerlink" title="6.4 总线的性能指标"></a>6.4 总线的性能指标</h3><blockquote><p><strong>总线宽度</strong>：通常是指数据总线的根数。<br></p><p><strong>总线带宽</strong>：单位时间内总线上传输数据的位数。<br></p><p><strong>总线复用</strong>：地址总线和数据总线共用一组线。<br></p><p><strong>信号线数</strong>：地址总线、数据总线和控制总线3种总线数的总和。<br></p></blockquote><h3 id="6-5-总线的结构"><a href="#6-5-总线的结构" class="headerlink" title="6.5 总线的结构"></a>6.5 总线的结构</h3><blockquote><p>(1)单总线结构：将CPU、主存和I/O设备都连接在一组总线上，允许它们之间直接交换信息。结构简单，容易扩充外部设备，但不允许两个以上的部件同时向总线传输信息。特点：主存和I/O设备统一编址，CPU可以像访问内存一样访问外部设备。<br></p><p>(2)双总线结构：将速度较低的I/O 设备从总线中分离出来，形成主存总线与I/O 总线分开的结构。<br></p><p>(3)三总线结构：在I/O高速设备与主存之间增加了一条DMA总线。<br></p></blockquote><h3 id="6-6-总线仲裁（确定哪个设备可以使用总线）"><a href="#6-6-总线仲裁（确定哪个设备可以使用总线）" class="headerlink" title="6.6 总线仲裁（确定哪个设备可以使用总线）"></a>6.6 总线仲裁（确定哪个设备可以使用总线）</h3><h4 id="6-6-1-集中仲裁方式"><a href="#6-6-1-集中仲裁方式" class="headerlink" title="6.6.1 集中仲裁方式"></a>6.6.1 集中仲裁方式</h4><blockquote><p><strong>(1)链式查询方式</strong>：总线上的所有部件公用一根总线请求线，当由部件请求使用总线时，均需经此线发送请求信息到总线控制器，若总线不忙，则允许请求，否则等待。<br></p><p>优先级判别方式：离总线控制器越近的部件，其优先级越高。<br></p><p>优点：结构简答，易扩充；<br></p><p>缺点：对设备电路的故障敏感，对低优先级的部件不公平。<br></p><p><strong>(2)计数器查询方式</strong>：采用一个计数器控制总线的使用权。<br></p><p>优先级判别方式：当总线控制器接收到总线请求信号判断总线不忙时，计数器开始计数，计数值通过一组地址线发向各个部件。当地址线上的计数值与请求使用总线设备的地址一致时，该设备获得总线控制权。同时，终止计数器的计数及查询工作。<br></p><p>优点：各设备优先级顺序可以改变，而且对电路故障不敏感；&lt;br。</p><p>缺点：增加了控制线数，控制较为复杂。<br></p><p><strong>(3)独立请求方式</strong>：每一个设备均有一对总线请求信号和总线同意信号。<br></p><p>优先级判别方式：在总线控制器中排队，等待批准。<br></p><p>优点：响应时间很快(以增加控制线为代价)，对优先级顺序的控制相当灵活；<br></p><p>缺点：总线控制更复杂。<br></p></blockquote><h4 id="6-6-2-分布仲裁方式"><a href="#6-6-2-分布仲裁方式" class="headerlink" title="6.6.2 分布仲裁方式"></a>6.6.2 分布仲裁方式</h4><blockquote><p>不需要中央仲裁器，每个主模块都有自己的仲裁号和仲裁器，多个仲裁器竞争使用总线。<br></p></blockquote><h3 id="7-总线周期"><a href="#7-总线周期" class="headerlink" title="7. 总线周期"></a>7. 总线周期</h3><blockquote><p>完成一次总线操作的时间称为总线周期。<br></p><p>包括申请分配阶段+寻址阶段+传送数据阶段+结束阶段。<br></p></blockquote><h3 id="8-总线定时"><a href="#8-总线定时" class="headerlink" title="8. 总线定时"></a>8. 总线定时</h3><h4 id="8-1-同步定时方式"><a href="#8-1-同步定时方式" class="headerlink" title="8.1 同步定时方式"></a>8.1 同步定时方式</h4><blockquote><p>系统采用一个统一的时钟信号来协调发送和接受双方的传送定时关系。时钟信号通常由中央处理器的总线控制器发出，然后送到总线上的所有部件。<br></p><p>优点：传送给速度快，具有较高的传输速率，总线控制逻辑简单。<br></p><p>缺点：主从设备之间属于强制性同步，不能及时进行数据通信的有效性检验，可靠性较差。<br></p><p>适用范围：总线长度较短，总线所接部件的存取时间应该比较接近。<br></p></blockquote><h4 id="8-2-异步定时方式"><a href="#8-2-异步定时方式" class="headerlink" title="8.2 异步定时方式"></a>8.2 异步定时方式</h4><blockquote><p>允许各模块的速度不一致，没有公共的时钟标准，不要求所有部件严格地统一操作时间，而是采用应答方式(需要在主从模块之间增加两条应答线）。有不互锁、半互锁和全互锁3种方式。<br></p><p>优点：总线周期长度可以改变，能保证两个工作速度相差较大的部件或设备之间可靠地进行信息交换，自动适应时间的配合；<br></p><p>缺点：比同步控制方式稍微复杂一些，速度比同步定时方式慢。<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章、计算机系统概述&quot;&gt;&lt;a href=&quot;#第一章、计算机系统概述&quot; class=&quot;headerlink&quot; title=&quot;第一章、计算机系统概述&quot;&gt;&lt;/a&gt;第一章、计算机系统概述&lt;/h2&gt;&lt;h3 id=&quot;1-计算机发展历程&quot;&gt;&lt;a href=&quot;#1-计算机发展历
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各种各样的杨辉三角题目集合</title>
    <link href="http://yoursite.com/2020/03/11/%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E9%A2%98%E7%9B%AE%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2020/03/11/各种各样的杨辉三角题目集合/</id>
    <published>2020-03-11T10:13:06.000Z</published>
    <updated>2020-03-11T10:21:11.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一题（源：PTA）"><a href="#第一题（源：PTA）" class="headerlink" title="第一题（源：PTA）"></a>第一题（源：PTA）</h3><p><strong>输入格式</strong>：<br><code>输入在一行中给出N（1≤N≤10）。</code></p><p><strong>输出格式</strong>：<br><code>以正三角形的格式输出前N行杨辉三角。每个数字占固定4位。</code></p><p>输入样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></p><p>输出样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">    1   1</span><br><span class="line">   1   2   1</span><br><span class="line">  1   3   3   1</span><br><span class="line"> 1   4   6   4   1</span><br><span class="line">1   5  10  10   5   1</span><br></pre></td></tr></table></figure></p><h4 id="关键点注释"><a href="#关键点注释" class="headerlink" title="关键点注释"></a>关键点注释</h4><blockquote><p>以<code>%4d</code>的格式输出每个数字，同时不要忘记每行前面有空格（最后一行0个，从下往上，每行空格数+1）<br></p></blockquote><h4 id="第一题AC代码"><a href="#第一题AC代码" class="headerlink" title="第一题AC代码"></a>第一题AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> a[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">                        a[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                a[i][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//每行第一个数字为1</span></span><br><span class="line">                a[i][i]=<span class="number">1</span>;<span class="comment">//每行最后一个数字为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算其余数字a[i][j]=a[i-1][j-1]+a[i-1][j]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n<span class="number">-1</span>;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只要数字非0就打印</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//别忘了打印每一行的空格</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;i+<span class="number">1</span>;--k)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="comment">//再打印数字</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][j]!=<span class="number">0</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%4d"</span>,a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>做到再来补充…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一题（源：PTA）&quot;&gt;&lt;a href=&quot;#第一题（源：PTA）&quot; class=&quot;headerlink&quot; title=&quot;第一题（源：PTA）&quot;&gt;&lt;/a&gt;第一题（源：PTA）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;输入格式&lt;/strong&gt;：&lt;br&gt;&lt;code&gt;输入在一行中
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>有理数均值【未AC】</title>
    <link href="http://yoursite.com/2020/03/10/%E6%9C%89%E7%90%86%E6%95%B0%E5%9D%87%E5%80%BC%E3%80%90%E6%9C%AAAC%E3%80%91/"/>
    <id>http://yoursite.com/2020/03/10/有理数均值【未AC】/</id>
    <published>2020-03-10T08:21:39.000Z</published>
    <updated>2020-03-10T08:29:09.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一个测试点<code>若不随时化简，则会溢出</code>未通过 <br><br><img src="1.png" alt=""> <br></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题要求编写程序，计算N个有理数的平均值。</p><p><strong>输入格式</strong>：<br>输入第一行给出正整数N（≤100）；第二行中按照a1/b1 a2/b2 …的格式给出N个分数形式的有理数，其中分子和分母全是整形范围内的整数；如果是负数，则负号一定出现在最前面。</p><p><strong>输出格式</strong>：<br>在一行中按照a/b的格式输出N个有理数的平均值。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。</p><p><strong>输入样例1</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1/2 1/6 3/6 -5/10</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/6</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define long long int int</span></span><br><span class="line"><span class="comment">//求最小公倍数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gm</span><span class="params">(<span class="keyword">int</span> b1,<span class="keyword">int</span> b2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> max=b2,min=b1;</span><br><span class="line"><span class="keyword">if</span>(min&gt;max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> temp=min;min=max;max=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=max;i&lt;=max*min;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%min==<span class="number">0</span>&amp;&amp;i%max==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gy</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> b1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//局部嘛，反正对main里面的无影响，就这样喽</span></span><br><span class="line"><span class="keyword">if</span>(a1&gt;b1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> temp=a1;a1=b1;b1=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=a1;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a1%i==<span class="number">0</span>&amp;&amp;b1%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> nn=n;<span class="comment">//n的副本，因为后面n会自减</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a1,b1,a2,b2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;a1,&amp;b1);<span class="comment">//不动，只管累加</span></span><br><span class="line">n-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mbs;<span class="comment">//最小公倍数</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mys;<span class="comment">//最大公因数</span></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;a2,&amp;b2);<span class="comment">//循环接收新值</span></span><br><span class="line">mbs=gm(b1,b2);<span class="comment">//求b1和b2的最小公倍数</span></span><br><span class="line"><span class="comment">//a1=a1*(mbs/b1)+a2*(mbs/b2);b1=mbs;//通分累加</span></span><br><span class="line">a1=(mbs/b1)*a1+(mbs/b2)*a2;b1=mbs;<span class="comment">//通分累加</span></span><br><span class="line"><span class="comment">//printf("%d/%d\n",a1,b1);</span></span><br><span class="line"><span class="keyword">if</span>(a1!=<span class="number">0</span>)<span class="comment">//分子有可能变为0，那么此时就是0/b1了，分母是不可能变为0的，所以这里仅对分子讨论</span></span><br><span class="line">&#123;<span class="comment">//要及时化简，否则溢出 </span></span><br><span class="line">        mys=gy(<span class="built_in">fabs</span>(a1),b1);</span><br><span class="line">        a1/=mys;b1/=mys;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//a1=0</span></span><br><span class="line">&#123;</span><br><span class="line">b1=<span class="number">1</span>;<span class="comment">//b1是啥都行，只要b1不大（这样就能防止b1溢出），为了方便取1好了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后来求平均值</span></span><br><span class="line">b1=b1*nn;<span class="comment">//a1*1相当于不变</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fenzi=a1,fenmu=b1;</span><br><span class="line"><span class="keyword">if</span>(fenzi==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> g;<span class="comment">//分子和分母的最大公因数</span></span><br><span class="line">g=gy(<span class="built_in">fabs</span>(fenzi),fenmu);<span class="comment">//分子可能为负数</span></span><br><span class="line">fenzi/=g;fenmu/=g;</span><br><span class="line"><span class="keyword">if</span>(fenmu==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,fenzi);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld/%lld"</span>,fenzi,fenmu);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有一个测试点&lt;code&gt;若不随时化简，则会溢出&lt;/code&gt;未通过 &lt;br&gt;&lt;br&gt;&lt;img src=&quot;1.png&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; clas
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>在Ubuntu上安装RStudio遇到的问题以及解决方法</title>
    <link href="http://yoursite.com/2020/03/08/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85RStudio%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/08/在Ubuntu上安装RStudio遇到的问题以及解决方法/</id>
    <published>2020-03-08T02:49:50.000Z</published>
    <updated>2020-03-08T03:19:31.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置R的运行环境"><a href="#1-配置R的运行环境" class="headerlink" title="1.配置R的运行环境"></a>1.配置R的运行环境</h3><p>在安装RStudio之前，首先需要配置R的运行环境：<br><br>先搜索一下，看看默认软件源有没有 <code>r</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search r</span><br></pre></td></tr></table></figure></p><p>我找到了<code>r-base</code>，其介绍文字如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GNU R statistical computation and graphics system</span><br></pre></td></tr></table></figure></p><p>没错就是这个了,现在来安装：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install R-base</span><br></pre></td></tr></table></figure></p><h3 id="2-安装RStudio"><a href="#2-安装RStudio" class="headerlink" title="2.安装RStudio"></a>2.安装RStudio</h3><p>首先依旧是看一下默认软件源有没有安装包，经测试，答案是没有。<br><br>所以我来到了RStudio的官网，下载了对应的安装包，这样就可以使用系统自带的软件商店进行安装了<br><br>但是，不知道什么原因，这种方法无法安装<br><br>于是继续使用命令行工具进行安装：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i rstudio-1.0.153-amd64.deb</span><br></pre></td></tr></table></figure></p><p>这时桌面上已经出现了RStudio的图标。<br><br>本以为一切即将结束的时候，却发现点击图标之后并没有如预期那样跳出图像界面。<br><br>回看命令行提示，发现有两个依赖包缺失，分别是<code>libgstreamer0.10-0</code>，<code>libgstreamer-plugins-base0.10-0</code>，所以去下载这两个包：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.ca.debian.org/debian/pool/main/g/gstreamer0.10/libgstreamer0.10-0_0.10.36-1.5_amd64.deb</span><br><span class="line">wget http://ftp.ca.debian.org/debian/pool/main/g/gst-plugins-base0.10/libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb</span><br></pre></td></tr></table></figure></p><p>现在来安装刚刚下载的缺失包：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libgstreamer0.10-0_0.10.36-1.5_amd64.deb</span><br><span class="line">sudo dpkg -i libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb</span><br></pre></td></tr></table></figure></p><p>还需要设置这两个包为不更新状态，否则在今后更新依赖包时会将现在的正确版本覆盖掉，导致RStudio不可用。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-mark hold libgstreamer-plugins-base0.10-0</span><br><span class="line">sudo apt-mark hold libgstreamer0.10</span><br></pre></td></tr></table></figure></p><p>到现在，就可以安装RStudio了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gdebi rstudio-1.0.153-amd64.deb</span><br></pre></td></tr></table></figure></p><p>至此，成功安装RStudio。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-配置R的运行环境&quot;&gt;&lt;a href=&quot;#1-配置R的运行环境&quot; class=&quot;headerlink&quot; title=&quot;1.配置R的运行环境&quot;&gt;&lt;/a&gt;1.配置R的运行环境&lt;/h3&gt;&lt;p&gt;在安装RStudio之前，首先需要配置R的运行环境：&lt;br&gt;&lt;br&gt;先搜索一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>计网问答</title>
    <link href="http://yoursite.com/2020/03/07/%E8%AE%A1%E7%BD%91%E9%97%AE%E7%AD%94/"/>
    <id>http://yoursite.com/2020/03/07/计网问答/</id>
    <published>2020-03-07T11:33:50.000Z</published>
    <updated>2020-04-09T10:09:49.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章、计算机网络体系结构"><a href="#第一章、计算机网络体系结构" class="headerlink" title="第一章、计算机网络体系结构"></a>第一章、计算机网络体系结构</h1><h3 id="1-计算机网络的定义"><a href="#1-计算机网络的定义" class="headerlink" title="1.计算机网络的定义"></a>1.计算机网络的定义</h3><blockquote><p>计算机网络就是一些互连的，自治的计算机系统的集合。<br></p></blockquote><h3 id="2-计算机网络的组成"><a href="#2-计算机网络的组成" class="headerlink" title="2.计算机网络的组成"></a>2.计算机网络的组成</h3><blockquote><p>(1)物理组成：硬件（<code>由主机、通信处理剂、通信线路和交换设备组成</code>），软件（<code>实现资源共享的软件和方便用户使用的工具软件</code>），协议（<code>一种规则</code>）;<br><br>(2)工作方式组成：边缘部分(<code>由所有连接在互联网上，供用户直接使用的主机组成，用来进行通信和资源共享</code>)，核心部分(<code>由大量的网络和连接这些网络的路由器组成，它为边缘部分提供连通性和交换服务</code>)；<br><br>(3)功能组成：通信子网(<code>由各种传输介质、通信设备和相应的网络协议组成，为网络提供数据传输、交换和控制能力，实现互联网计算机之间的数据通信</code>)，资源子网(<code>由主机、终端以及各种软件资源、信息资源组成，负责全网的数据处理业务，向网络用户提供各种网络资源与服务</code>)。<br><br>&ensp;&ensp;&ensp;&ensp;注意：通信子网包括物理层，数据链路层和网络层<br></p></blockquote><h3 id="3-计算机网络的功能"><a href="#3-计算机网络的功能" class="headerlink" title="3.计算机网络的功能"></a>3.计算机网络的功能</h3><blockquote><p><strong>数据通信</strong>：计算机网络<code>最基本</code>和<code>最重要</code>的功能，包括连接控制、传输控制、差错控制、流量控制、路由选择、多路复用等子功能；<br><br><strong>资源共享</strong>：包括数据资源、软件资源以及硬件资源；<br><br><strong>分布式处理</strong>：当计算机网络中某个计算机系统负载过重时，可以将其处理的任务传送给网络中的其他计算机系统进行处理，利用空闲计算机资源提高整个系统的利用率；<br><br><strong>信息综合处理</strong>：将分散在各地计算机中的数据资料进行集中处理或分级处理；<br><br><strong>负载均衡</strong>：将工作任务均衡地分配给计算机网络中的各台计算机；<br><br><strong>提高可靠性</strong>：计算机网络中的各台计算机可以通过网络互为替代机。<br></p></blockquote><h3 id="4-计算机网络的分类"><a href="#4-计算机网络的分类" class="headerlink" title="4.计算机网络的分类"></a>4.计算机网络的分类</h3><blockquote><p>(1)按分布范围分类：广域网、城域网、局域网、个人区域网；<br><br>(2)按拓扑结构分类：星形网络、总线型网络、环形网络、网状型网络；<br><br>(3)按传输技术分类：广播式网络、点对点网络；<br><br>(4)按使用者分类：公用网、专用网；<br><br>(5)按数据交换技术分类：电路交换网络、报文交换网络、分组交换网络；<br></p></blockquote><h3 id="5-计算机网络的标准化工作及相关组织"><a href="#5-计算机网络的标准化工作及相关组织" class="headerlink" title="5.计算机网络的标准化工作及相关组织"></a>5.计算机网络的标准化工作及相关组织</h3><blockquote><p>互联网草案–&gt;建议标准（RFC文档）–&gt;草案标准–&gt;互联网标准。<br><br>ISO 、ITO 、IEEE<br></p></blockquote><h3 id="6-实体、对等层、对等实体"><a href="#6-实体、对等层、对等实体" class="headerlink" title="6. 实体、对等层、对等实体"></a>6. 实体、对等层、对等实体</h3><blockquote><p>实体：任何可发送或接收信息的硬件或软件进程，通常是一个特定的软件模块；<br><br>对等层：不同机器上的同一层；<br><br>对等实体：同一层上的实体。<br></p></blockquote><h3 id="7-协议"><a href="#7-协议" class="headerlink" title="7.协议"></a>7.协议</h3><blockquote><p>协议是控制两个对等实体进行通信的规则，也就是水平的。<br><br>协议的组成包括：<code>语义（对构成协议的元素含义的解释）</code>，<code>语法（数据与控制信息的结构或格式）</code>和<code>同步（规定了协议的控制顺序）</code>。<br></p></blockquote><h3 id="8-接口"><a href="#8-接口" class="headerlink" title="8.接口"></a>8.接口</h3><blockquote><p>接口又称<code>服务访问点</code>，没有接口就不能提供服务；<br><br>SDU、PCI、ICI、PDU、IDU。<br></p></blockquote><h3 id="9-服务"><a href="#9-服务" class="headerlink" title="9.服务"></a>9.服务</h3><blockquote><p>服务指下层为相邻上层提供的功能调用。<br><br>协议是水平的，而服务是垂直的。<br><br>服务主要包括以下三类：<br><br>&ensp;&ensp;&ensp;&ensp;(1)面向连接的服务（<code>建立连接、使用连接、释放连接</code>）和面<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;向无连接的服务（<code>把每个带有目的地址的包传送到线路上，由系统选定路线进行传输</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;(2)有应答服务（<code>接收方收到数据后向发送方给出相应的应答</code>）<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;和无应答服务（<code>接收方收到数据后不自动给出应答</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;(3)可靠服务(<code>网络具有检错、纠错、应答机制</code>)和不可靠服务（<code>尽力而为</code>）；<br></p></blockquote><h3 id="10-面向连接的服务和面向无连接服务的对比"><a href="#10-面向连接的服务和面向无连接服务的对比" class="headerlink" title="10.面向连接的服务和面向无连接服务的对比"></a>10.面向连接的服务和面向无连接服务的对比</h3><blockquote><p>面向连接的服务：<br><br>&ensp;&ensp;&ensp;&ensp;优点：可靠信息流（<code>只要被接收的都是正确的</code>）;<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;信息回复确认（<code>每收到一条信息就回复一次，若出错则告诉发送方，要求重传</code>）<br><br>&ensp;&ensp;&ensp;&ensp;缺点：占用通信信道<br><br>面向无连接的服务：<br><br>&ensp;&ensp;&ensp;&ensp;优点：不占用通信信道<br><br>&ensp;&ensp;&ensp;&ensp;缺点：信息流可能丢失（<code>在传输过程中，信息可能丢失，对方可能收不到信息</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;信息无回复确认（<code>收到信息就收下，不告诉对方已经收到</code>）。<br></p></blockquote><h3 id="11-计算机网络的性能指标"><a href="#11-计算机网络的性能指标" class="headerlink" title="11.计算机网络的性能指标"></a>11.计算机网络的性能指标</h3><blockquote><p>(1)<strong>时延</strong>：发送时延(传输时延)+传播时延+处理时延+排队时延;<br><br>(2)<strong>时延带宽积</strong>：传播时延<em>带宽;<br><br>(3)<strong>往返时间</strong>：从发送方发送数据开始，到发送方收到来自接收方的确认消息为止<br><br>(4)<strong>利用率</strong></em>：信道利用率（某信道有百分之几的时间时被利用的）+网络利用率（全网络的信道利用率的平均值）。<br></p></blockquote><h3 id="12-五层参考模型总结"><a href="#12-五层参考模型总结" class="headerlink" title="12.五层参考模型总结"></a>12.五层参考模型总结</h3><p><img src="1.png" alt=""><br></p><h3 id="13-OSI参考模型和TCP-IP参考模型的特性对比"><a href="#13-OSI参考模型和TCP-IP参考模型的特性对比" class="headerlink" title="13.OSI参考模型和TCP/IP参考模型的特性对比"></a>13.OSI参考模型和TCP/IP参考模型的特性对比</h3><p><img src="2.jpg" alt=""><br></p><h1 id="第二章、物理层"><a href="#第二章、物理层" class="headerlink" title="第二章、物理层"></a>第二章、物理层</h1><h3 id="1-信号"><a href="#1-信号" class="headerlink" title="1.信号"></a>1.信号</h3><blockquote><p><strong>信号</strong>是数据（<code>传送信息的实体</code>）的电气或电磁的表现。<br><br>信道上传送的信号可以分为<code>基带信号</code>和<code>宽带信号</code>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>基带信号</strong>是将数字信号0和1直接用两种不同的电压表示，然后传送到数字信道上去传输，称为<strong>基带传输</strong>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>宽带信号</strong>是将基带信号进行调制后形成模拟信号，然后再传送到模拟信道上去传输，称为<strong>宽带传输</strong>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一句话：基带对应数字信号，宽带对应模拟信号。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;注意：宽带传输==频带传输(in 考研）。<br></p></blockquote><h3 id="2-信源、信道、信宿"><a href="#2-信源、信道、信宿" class="headerlink" title="2.信源、信道、信宿"></a>2.信源、信道、信宿</h3><blockquote><p><strong>信源</strong>：通信过程中产生和发送信息的设备或计算机。<br><br><strong>信道</strong>：信息传送的道路，也就是信号的传输媒质，分为有线信道和无线信道。<br><br><strong>信宿</strong>：通信过程中接收和处理信息的设备或计算机。<br></p></blockquote><h3 id="3-速率、波特、码元"><a href="#3-速率、波特、码元" class="headerlink" title="3.速率、波特、码元"></a>3.速率、波特、码元</h3><blockquote><p>速率就是单位时间内传输的数据量，可用波特率和比特率来描述。<br><br>波特率：又称<code>码元传输速率</code>，表示单位时间内数字通信系统所能传输的<code>码元个数</code>。<br><br>比特率：又称<code>信息传输速率</code>，表示单位时间内数字通信系统所能传输的<code>二进制码元个数</code>，即<code>比特数</code>，单位为<code>bit/s</code>。<br></p></blockquote><h3 id="4-带宽"><a href="#4-带宽" class="headerlink" title="4.带宽"></a>4.带宽</h3><blockquote><p>在计算机网络中，带宽是用来表示<code>网络的通信线路</code>所能<code>传送数据的能力</code>，表示单位时间内从网络中的某一点到另一点所能通过的<code>最高数据率</code>。<br><br>此时，带宽的单位不再是赫兹(Hz)，而是<code>bit/s</code>。<br></p></blockquote><h3 id="5-奈奎斯特定理"><a href="#5-奈奎斯特定理" class="headerlink" title="5.奈奎斯特定理"></a>5.奈奎斯特定理</h3><blockquote><p>由来：寻找在保证不出现码间串扰的条件下的码元的最大传输速率。<br><br>（<code>码间串扰：具体的信道所能通过的频率范围总是有限的，所以信号中的大部分高频分量就过不去了，这样在传输共享中会衰减，导致在接收端收到的信号的波形就失去了码元之间的清晰界限，这种现象就是码间串扰</code>）<br><br><strong>奈奎斯特定理</strong>:<br><br>$$C_{max}=f_{采样}*log_2N(bit/s)$$<br>其中，<code>f</code>代表<code>理想低通信道</code>的带宽，<code>N</code>表示每个码元的离散电平的数目。<br></p></blockquote><h3 id="6-区分低通信道和带通信道"><a href="#6-区分低通信道和带通信道" class="headerlink" title="6.区分低通信道和带通信道"></a>6.区分低通信道和带通信道</h3><p><code>低通信道</code>就是信号的频率只要不超过某个上限值，都可以不失真地通过信道（有上限，无下限），理想低通信道的最高码元传输速率是每秒2个码元；<br><br><code>带通信道</code>既有上限也有下限，，理想带通信道的最高码元传输速率是每秒1个码元。<br></p><h3 id="7-香农定理"><a href="#7-香农定理" class="headerlink" title="7.香农定理"></a>7.香农定理</h3><blockquote><p>公式：<br><br>$$C_{max}=W*log_2(1+S/N)(bit/s)$$<br>其中，<code>W</code>为信道的带宽，$S/N$为信噪比。<br><br>想要提高信息的传输速率，需要增大信噪比或者提高带宽（注意：仅仅提高改善编码不可能超过香农公式算出的速率）。<br></p></blockquote><h3 id="8-对比奈奎斯特定理和香农定理"><a href="#8-对比奈奎斯特定理和香农定理" class="headerlink" title="8.对比奈奎斯特定理和香农定理"></a>8.对比奈奎斯特定理和香农定理</h3><blockquote><p><strong>奈奎斯特定理</strong>：<br><br>(1)指出了码元的传输速率是受限的，不能任意提高，否则在接收端就无法判定码元是0还是1（码间串扰）;<br><br>(2)是在理想条件下推出来的(无噪声);<br><br>(3)并没有对信息传输速率给出限制（可以无限大，只要编码技术足够好）。<br><br><strong>香农定理</strong>:<br><br>(1)给出了信息传输速率的极限值，只要传输带宽（Hz）和信噪比确定了，传输速率也就确定了;<br><br>(2)有噪声。<br></p></blockquote><h3 id="9-编码与调制"><a href="#9-编码与调制" class="headerlink" title="9.编码与调制"></a>9.编码与调制</h3><blockquote><p><strong>编码</strong>：将模拟数据或数字数据转换为数字信号的过程。<br><br><strong>调制</strong>：将模拟数据或数字数据转化为模拟信号的过程。<br></p></blockquote><h4 id="9-1调制"><a href="#9-1调制" class="headerlink" title="9.1调制"></a>9.1调制</h4><blockquote><p>(1)数字数据调制为模拟信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;1)带通调制：将基带信号的频带范围搬移到较高的频段以便在信道中传输（3种方法：调频，调幅，调相）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;2)基带调制：改变基带信号的低频成分的波形（仍是基带信号）。<br><br>(2)模拟数据调制为模拟信号：（原因）<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;1)为了实现传输的有效性，可能需要较高的频率；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;2)充分利用带宽。<br></p></blockquote><h4 id="9-2编码"><a href="#9-2编码" class="headerlink" title="9.2编码"></a>9.2编码</h4><blockquote><p>(1)数字数据编码为数字信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;用于基带信号传输中。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;常用编码方式：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)非归零码；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)曼彻斯特编码；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)差分曼彻斯特编码。<br><br>(2)模拟数据编码为数字信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;典型例子就是<code>脉冲编码调制</code>，有3个步骤：采样、量化、编码。<br></p></blockquote><h3 id="10-数据传输方式-电路交换、报文交换、分组交换"><a href="#10-数据传输方式-电路交换、报文交换、分组交换" class="headerlink" title="10.数据传输方式(电路交换、报文交换、分组交换)"></a>10.数据传输方式(电路交换、报文交换、分组交换)</h3><blockquote><p>(1)电路交换：在通信之前，通信双方建立一条被双方独占的物理通路。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)通信时延小；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)实时性强；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)有序传输；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)使用范围广（数字/模拟信号均可传输）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)控制简单；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;6)避免冲突。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)建立连接时间长；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)信道利用率低；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)缺乏统一标准(电路交换时，数据之大，不同规格终端难以相互通信，也很难进行差错控制)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)灵活性差（任一节点出错都需要建立新的连接）。<br></p></blockquote><blockquote><p>(2)报文交换：数据交换的单位是报文，报文携带目的地址、源地址等信息；报文交换在交换节点时采用存储转发方式。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)无需建立连接(因此不存在连接时延)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）动态分配线路；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3提高了可靠性；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)提高线路利用率；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)提供多目标服务（一个报文可以发送到多个目的地址）。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)由于数据进入交换节点后要经理存储、转发这一过程，从而引起转发时延；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)报文交换对报文的大小没有限制，这就要求网络节点有大量的存储缓存空间。<br><br>【注】：报文交换主要用于早起的电报通信网中，现在被较先进的分组交换方式取代。<br></p></blockquote><blockquote><p>(3)分组交换：仍采用存储转发方式，但将一个长报文先分割为若干较短的分组，然后逐个转发分组（每个分组都携带目的地址、源地址和编号信息）。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)加速传输（分组是逐个传输的，所以可以使后一个分组的存储操作与前一个分组的转发操作并行；传输一个分组所需缓冲区较小，因此因缓冲区不足而等待发送的概率以及等待时间也会减小）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)简化了存储管理（分组长度固定，相应缓冲区大小也固定）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)减少了出错概率和重发数据量(因为分组较短，所以出错概率也较小，这样既提高了可靠性，又降低了传输时延)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)存在传输时延（尽管比报文交换的传输时延少，但相对于电路交换，仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)当分组交换采用数据报服务时，可能会出现失序、丢失或重复分组的现象，分组到达目的节点时，要重排，很麻烦；若采用虚电路服务，虽无失序问题，单有呼叫建立、数据传输和虚电路释放3个过程。<br></p></blockquote><h3 id="11-电路交换、报文交换、分组交换的应用场景"><a href="#11-电路交换、报文交换、分组交换的应用场景" class="headerlink" title="11.电路交换、报文交换、分组交换的应用场景"></a>11.电路交换、报文交换、分组交换的应用场景</h3><blockquote><p><code>传送的数据量很大，且其传送时间远大于呼叫时间</code>–&gt;电路交换；<br><br><code>端到端的通路由很多段链路组成</code>–&gt;分组交换；<br><br>从提高整个网络的信道利用率来看，报文交换和分组交换优于电路交换，其中分组交换比报文交换的时延小，尤其适合计算机之间的突发式的数据通信。<br></p></blockquote><h3 id="12-分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）"><a href="#12-分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）" class="headerlink" title="12.分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）"></a>12.分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）</h3><blockquote><p>（1）数据报：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)发送分组前无需建立连接；<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)网络尽最大努力交付，传输不保证可靠性，可能乱序或丢失；<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)在具有多个分组的报文中，交换机尚未接收完第二个分组，已经收到的第一个分组就可以转发出去，不仅减小了延迟，而且大大提高了吞吐量；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 4)当某一台交换机或一段链路故障时，可相应地更新转发表，寻找到另一条替代路径转发分组，对故障适应能力强；<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)发送方和接收方不独占某一链路，所以资源利用率高。<br></p></blockquote><hr><blockquote><p>（2）虚电路：发送数据之前，在源主机和目的主机之间建立一条虚连接(逻辑上的连接)。<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）用户之间必须建立连接，数据传输过程中不再需要寻找路径，相对数据报方式开销小；<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)分组走相同路径，故按序到达；<br><br>   &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3）分组首部并不包含目的地址，而是包含虚电路标识符，相对数据报方式开销小；<br><br>    &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)当某个交换机或某条链路出现故障而彻底失效时，所有经过该交换机或该链路的虚电路将遭到破坏。<br></p></blockquote><h3 id="13-传输介质分类"><a href="#13-传输介质分类" class="headerlink" title="13.传输介质分类"></a>13.传输介质分类</h3><blockquote><p>（1）导向性传输介质：<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;双绞线（无屏蔽双绞线和屏蔽双绞线）、同轴电缆、光纤；<br><br> (2)非导向性传输介质：<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;短波、微波、红外线与可见光。<br></p></blockquote><h3 id="14-物理层接口特性"><a href="#14-物理层接口特性" class="headerlink" title="14.物理层接口特性"></a>14.物理层接口特性</h3><blockquote><p>机械特性、电气特性、功能特性、规程特性。<br></p></blockquote><h3 id="15-物理层设备"><a href="#15-物理层设备" class="headerlink" title="15.物理层设备"></a>15.物理层设备</h3><blockquote><p>中继器、集线器（多端口的中继器，处在网络中心，也叫<code>HUb</code>）。<br><br>注意：中继器放大模拟信号，放大器放大数字信号<br><br>这俩货的缺点：<br><br>1）扩大了冲突域且总的吞吐量未提高；<br><br>2)不能互联使用不同以太网技术的局域网。<br></p></blockquote><h1 id="第三章、数据链路层"><a href="#第三章、数据链路层" class="headerlink" title="第三章、数据链路层"></a>第三章、数据链路层</h1><h3 id="1-数据链路层的功能"><a href="#1-数据链路层的功能" class="headerlink" title="1.数据链路层的功能"></a>1.数据链路层的功能</h3><p>数据链路层在物理层所提供的服务的基础上向网络层提供服务，即将原始的、有差错的物理线路改进成逻辑上无差错的数据链路，从而向网络层提供高质量的服务，包括3种：无确认的无连接服务、有确认的无连接服务和有确认的有连接服务（没有无确认的有连接服务）</p><blockquote><p>(1)<strong>链路管理</strong>：负责数据链路的建立、维持和释放，主要用于面向连接的服务；<br><br>(2)<strong>帧同步</strong>：接收方确定收到的比特流中以帧的开始位置和结束位置；<br><br>(3)<strong>差错控制</strong>：用于使接收方确定接收到的数据就是发送方发送的数据；<br><br>(4)<strong>透明传输</strong>：解决与控制符形同的数据如何发送，就是不管数据是什么样的比特组合，都应当能在链路上发送；<br></p></blockquote><h3 id="2-组帧（在网络中以帧为最小传输单位）"><a href="#2-组帧（在网络中以帧为最小传输单位）" class="headerlink" title="2.组帧（在网络中以帧为最小传输单位）"></a>2.组帧（在网络中以帧为最小传输单位）</h3><h4 id="2-1-为什么要组帧"><a href="#2-1-为什么要组帧" class="headerlink" title="2.1 为什么要组帧"></a>2.1 为什么要组帧</h4><blockquote><p>如果传输比特流出错，只需要重传出错的帧即可，无需重传全部比特流，值！<br></p></blockquote><h4 id="2-2-组帧的4种方法"><a href="#2-2-组帧的4种方法" class="headerlink" title="2.2 组帧的4种方法"></a>2.2 组帧的4种方法</h4><blockquote><p>(1)<strong>字符计数法</strong>：用一个<code>特殊的字符</code>表示一帧的开始，然后用一个计数字段来表明该帧包含的字节数。当目的主机接收到该帧时，根据此字段提供的字节数，便可知道该帧的结束位和下一帧的开始位。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;存在问题：若计算字段出错，就无法实现帧同步，因此该方法很少被使用。<br><br>(2)<strong>字节填充的首尾界符法</strong>：在数据中可能出现的<code>控制字符</code>前面加上转义字符<code>ESC</code>。<br><br>(3)<strong>比特填充的首尾标识法（零比特填充法）</strong>：使用<code>01111110</code>作为帧的开始和结束标志。若数据部分也出现<code>01111110</code>，可以这样子：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;只要数据帧检测到有5个连续的1，就麻黄素那个在后面插入0，而接收方没收到连续的5个1，就自动删除后面紧跟的0，以恢复原始数据。<br><br>(4)<strong>物理编码违例法</strong><br>利用物理介质上编码的违法标志来区分帧的开始和结束。<br></p></blockquote><h3 id="3-差错控制"><a href="#3-差错控制" class="headerlink" title="3.差错控制"></a>3.差错控制</h3><h4 id="3-1-检错编码"><a href="#3-1-检错编码" class="headerlink" title="3.1 检错编码"></a>3.1 检错编码</h4><blockquote><p>（1）<strong>奇偶校验码</strong>：在信息码后面添加一位校验码，分为<code>奇校验</code>和<code>偶校验</code>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)奇校验：添加一位校验码后，使得整个码字里面1的个数是奇数。接收端若检测到偶数个1，则认为数据出错，要求重发数据；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)偶校验：添加一位校验码后，使得整个码字里面1的个数是偶数。接收端若检测到奇数个1，则认为数据出错，要求重发数据；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;缺点：若同时有两位数据发送改变，则无法检出错误。检错率低<br></p></blockquote><blockquote><p>（2）<strong>循环冗余码(CRC)</strong><br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;优势：检错率极高、开销小、易实现。</p></blockquote><h4 id="3-2-纠错编码（不但能检错，还能纠错）"><a href="#3-2-纠错编码（不但能检错，还能纠错）" class="headerlink" title="3.2 纠错编码（不但能检错，还能纠错）"></a>3.2 纠错编码（不但能检错，还能纠错）</h4><p><strong>海明码</strong>。<br></p><h3 id="4-流量控制和可靠传输机制（in-传输层）"><a href="#4-流量控制和可靠传输机制（in-传输层）" class="headerlink" title="4.流量控制和可靠传输机制（in 传输层）"></a>4.流量控制和可靠传输机制（in 传输层）</h3><h4 id="4-1-流量控制"><a href="#4-1-流量控制" class="headerlink" title="4.1 流量控制"></a>4.1 流量控制</h4><blockquote><p><strong>含义</strong>：控制发送方发送数据的速率，使接收方来得及接收。<br><br><strong>基本方法</strong>：由接收方控制发送方的数据流，常见两种方法：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）<strong>停止-等待流量控制</strong>：发送方发出一帧，然后等待应答信号到达再发送下一帧；接收方每收到一帧后，返回一个应答信号，表示可以接收下一帧，如果接收方不返回应答，则发送方必须一直等待；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）<strong>滑动窗口流量控制</strong>：在任意时刻，发送方都维护了一组连续的允许发送的帧的序号，称为<code>发送窗口</code>；同时，接收方也维护了一组连续的允许接收的帧的序号，称为<code>接收窗口</code>。发送窗口内的序列号代表了那些已经被发送但是还没有被确认的帧，或者是那些可以被发送的帧。发送端每收到一个帧的确认，就发送串口就向前滑动一个帧的位置。当发送窗口尺寸达到最大尺寸时，发送方会强行关闭网络层，直到有一个空闲缓冲区出来。在接收端只有当收到的数据帧的发送序号落入接收窗口内才允许将该帧收下，并将窗口前移一个位置。若收到的数据帧落到接收窗口之外，就丢弃。<br></p></blockquote><h4 id="4-2-可靠传输机制-包括：停止-等待协议、后退N帧协议、选择重传协议"><a href="#4-2-可靠传输机制-包括：停止-等待协议、后退N帧协议、选择重传协议" class="headerlink" title="4.2 可靠传输机制(包括：停止-等待协议、后退N帧协议、选择重传协议)"></a>4.2 可靠传输机制(包括：停止-等待协议、后退N帧协议、选择重传协议)</h4><blockquote><p>与无差错接收（比如在数据链路层使用循环冗余码检验差错检测技术，凡是接收端接收的帧均无差错，有差错的被丢弃了呗）不同，可靠传输是指<code>数据链路层发送什么，接收端就接收什么</code>。传输差错包括<code>无比特差错（可用CRC检测）</code>和<code>无传输差错（更复杂，可能帧没问题，但出现了帧失序或者帧重复）</code>。<br></p></blockquote><h4 id="4-3-滑动窗口机制"><a href="#4-3-滑动窗口机制" class="headerlink" title="4.3.滑动窗口机制"></a>4.3.滑动窗口机制</h4><blockquote><p>只有在接收窗口向前滑动时（与此同时也发送了确认），发送窗口才有可能向前滑动。<br><br>当接收窗口大小为1时，可保证帧按序接收。<br></p></blockquote><h4 id="4-4-停止-等待协议（基于停止-等待流量控制技术）"><a href="#4-4-停止-等待协议（基于停止-等待流量控制技术）" class="headerlink" title="4.4 停止-等待协议（基于停止-等待流量控制技术）"></a>4.4 停止-等待协议（基于停止-等待流量控制技术）</h4><blockquote><p><strong>原理</strong>：发送方传输一个帧后，必须等待对方的确认才能发送下一帧。若在规定的时间内没有收到确认，则发送超时，并重传原始帧。<br></p></blockquote><h4 id="4-5后退N帧（GBN）协议（基于滑动窗口流量控制技术）"><a href="#4-5后退N帧（GBN）协议（基于滑动窗口流量控制技术）" class="headerlink" title="4.5后退N帧（GBN）协议（基于滑动窗口流量控制技术）"></a>4.5后退N帧（GBN）协议（基于滑动窗口流量控制技术）</h4><blockquote><p><strong>原理</strong>：发送方发送完一个数据帧后，不是停下来等待确认帧，而是可以连续再发送若干个数据帧。如果这时收到了接收方的确认帧，那么还可以接着再发送数据帧。如果某个帧出错了，接收方只能简单地丢弃该帧机器所有的后续帧。发送方超时后需重发该出错帧及其后续所有帧。<br><br><strong>评价</strong>：减少了等待时间，使得整个通信的吞吐量得到提高。但接收方已发行错误帧，就不再接收后续帧，造成了一定浪费。于是有了下面的<code>选择重传协议</code><br></p></blockquote><h4 id="4-6-选择重传（SR）协议（基于滑动窗口流量控制技术）"><a href="#4-6-选择重传（SR）协议（基于滑动窗口流量控制技术）" class="headerlink" title="4.6 选择重传（SR）协议（基于滑动窗口流量控制技术）"></a>4.6 选择重传（SR）协议（基于滑动窗口流量控制技术）</h4><blockquote><p><strong>原理</strong>：若一帧出错，则其后续帧先存入接收方的缓冲区帧，同时要求发送方重传出错帧，一旦收到重传帧后，就和原先存在缓冲区的其余帧一起按正确的顺序送至主机。<br><br><strong>评价</strong>：避免了重复传输那些本来已经正确到达接收方的数据帧，进一步提高了信道利用率，但代价是增加了缓冲空间。<br></p></blockquote><h3 id="5-介质访问控制"><a href="#5-介质访问控制" class="headerlink" title="5.介质访问控制"></a>5.介质访问控制</h3><blockquote><p>(1)信道划分介质访问控制；<br><br>(2)随机访问介质访问控制；<br><br>(3)轮询访问介质访问控制。<br></p></blockquote><h4 id="5-1-信道划分介质访问控制-静态划分信道"><a href="#5-1-信道划分介质访问控制-静态划分信道" class="headerlink" title="5.1 信道划分介质访问控制(静态划分信道)"></a>5.1 信道划分介质访问控制(静态划分信道)</h4><blockquote><p>1)频分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;将一条信道分割成多个不同频率的信道(类似将马路分割为多个车道)。<br><br>若复用数之间，则需增加信道的(频率)带宽。<br></p></blockquote><blockquote><p>2)时分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;将一个固定时间分割成多个时间段。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;但是有可能某个时间段内，要使用的那个人不用了，此时会出现空等状态，太浪费<br><br>于是出现了改进版的，也就是<code>统计时分复用</code>，这是一种动态的时间分配，又称<code>异步时分复用</code>，可以避免浪费（只要没人用就自己用）。<br><br>3)波分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;光的频分多路复用。<br><br>4)码分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;又称<code>码分多址（CDMA）</code>，既共享信道的频率，又共享时间，是一种真正的动态复用技术，抗干扰能力强、保密性强、语音质量好。<br></p></blockquote><h4 id="5-2-随机访问介质访问控制（动态划分信道–-gt-随机接入）"><a href="#5-2-随机访问介质访问控制（动态划分信道–-gt-随机接入）" class="headerlink" title="5.2 随机访问介质访问控制（动态划分信道–&gt;随机接入）"></a>5.2 随机访问介质访问控制（动态划分信道–&gt;随机接入）</h4><p>【注1】<code>动态划分信道</code>包括<code>随机接入</code>和<code>受控接入</code><br><br>【注2】<code>随机访问介质访问控制</code>又称<code>争用型协议</code>，因为其核心思想是通过争用，胜利者才可以获得信道，主要有4种协议：<br></p><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）<br><strong>ALOHA协议</strong>：<br><br>当网络中的任何一个结点发送数据时，可以不进行任何检测就发送数据。如果在一段时间内没有收到确认，该结点就认为传输过程中发生了冲突。发生冲突的结点需要等待一个随机的数据后再次发生数据。直到发送成功。<br><br>缺点：信道利用率不理想<br><br>改进:时分ALOHA：所有结点的时间被划分为间隔相同的时隙，并规定每个节点只有当下一个时隙到来时才可以发送数据。<br></p></blockquote><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）<strong>载波侦听多路访问(CSMA)协议</strong>：<br><br>每个节点在发送数据之前，使用载波侦听技术来判定通信信道是否空闲，常用<strong>3种策略</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1-坚持CSMA：一旦监听到信道空闲立即发送数据，否则继续监听；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;p-坚持CSMA：一旦监听到信道空闲，以概率p发送数据，以概率（1-p）延迟一段时间并重新监听；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;非坚持CSMA：一旦监听到信道空闲，便立即发送数据，否则延迟一段随机时间再重新监听。<br></p></blockquote><blockquote><p>3）<strong>带冲突检测的载波侦听多路访问（CSMA/CD）协议</strong>：<br><br><strong>策略</strong>：先听后发，边听边发，冲突停发，随机重发。<br><br><strong>争用期</strong>：以太网端到端的往返时延，又称<code>冲突窗口</code>或者<code>碰撞窗口</code>。只有经过争用期这段时间还没有检测到冲突，才能肯定这次发送不会发生冲突。<br></p></blockquote><blockquote><p>4)<strong>CSMA/CA协议</strong>：<br><br>在CSMA基础上增加了冲突避免功能。主要用在无线局域网中。<br><br>冲突避免要求每个结点在发送数据之前监听信道，若信道空闲，则发送数据。发送完一个帧后，必须等待一段时间，检查接收方是否发回了帧确认，若收到则继续发送，否则表明出现冲突，重发该帧。<br></p></blockquote><h4 id="5-3-轮询访问介质访问控制（动态划分信道–-gt-受控接入）"><a href="#5-3-轮询访问介质访问控制（动态划分信道–-gt-受控接入）" class="headerlink" title="5.3 轮询访问介质访问控制（动态划分信道–&gt;受控接入）"></a>5.3 轮询访问介质访问控制（动态划分信道–&gt;受控接入）</h4><p>用户不能随意地发送信息，而是通过一个集中控制的监控站经过轮询过程后再决定信道的分配。典型的轮询访问介质访问控制协议就是<code>令牌传递协议</code>。<br></p><h3 id="6-局域网"><a href="#6-局域网" class="headerlink" title="6.局域网"></a>6.局域网</h3><h4 id="6-1-局域网的基本概念"><a href="#6-1-局域网的基本概念" class="headerlink" title="6.1 局域网的基本概念"></a>6.1 局域网的基本概念</h4><h5 id="6-1-1-局域网的定义"><a href="#6-1-1-局域网的定义" class="headerlink" title="6.1.1 局域网的定义"></a>6.1.1 局域网的定义</h5><blockquote><p>局域网是指一个较小范围内的多台计算机或者其他通信设备，通过双绞线、同轴电缆等连接介质互连起来，以达到资源和信息共享目的的互联网络。<br></p></blockquote><h5 id="6-1-2-局域网的主要特点"><a href="#6-1-2-局域网的主要特点" class="headerlink" title="6.1.2 局域网的主要特点"></a>6.1.2 局域网的主要特点</h5><blockquote><p>1)局域网为一个单位所拥有；<br><br>2)地理范围和站点数目有限；<br><br>3)与以前的非光纤的广域网相比，局域网具有较高的数据率、较低的时延和较小的误码率。<br></p></blockquote><h5 id="6-1-3-局域网的主要优点"><a href="#6-1-3-局域网的主要优点" class="headerlink" title="6.1.3 局域网的主要优点"></a>6.1.3 局域网的主要优点</h5><blockquote><p>1）具有广播功能，从一个站点可很方便访问全网；<br><br>2）具有==便于系统的扩展和演变，各设备的位置可灵活的调整和改变；<br><br>3)提高了系统的可靠性、可用性；<br><br>4)各站为平等关系而不是主从关系。<br></p></blockquote><h5 id="6-1-4-局域网的主要技术要素"><a href="#6-1-4-局域网的主要技术要素" class="headerlink" title="6.1.4 局域网的主要技术要素"></a>6.1.4 局域网的主要技术要素</h5><blockquote><p>(1)<strong>网络拓扑结构</strong>：星形网、环形网、总线型网和树形网。<br><br>(2)<strong>传输介质</strong>：双绞线（主流）、铜缆、光纤。<br><br>(3)<strong>介质访问控制方法</strong>：CSMA/CD、令牌总线和令牌环。</p></blockquote><h4 id="6-2一个局域网的典型代表—-以太网"><a href="#6-2一个局域网的典型代表—-以太网" class="headerlink" title="6.2一个局域网的典型代表—-以太网"></a>6.2一个局域网的典型代表—-以太网</h4><blockquote><p><strong>工作原理</strong>：以太网采用<code>IEEE802.3</code>标准，采用总线拓扑结构，信息以广播形式发送，使用CSMA/CD技术对总线进行访问控制，提供的是不可靠的服务（无连接，不对发送的数据帧编号，也不要求接收方发回确认）。<br><br><strong>以太网的MAC帧</strong>：包括<code>前导码</code>和<code>目的地址、源地址</code>和<code>类型</code>和<code>数据</code>和<code>填充</code>和<code>校验码</code>。<br><br><strong>以太网的传输介质</strong>：10Base5（粗缆）、10Base2（细缆）、10Base-T（双绞线）、10Base-F（光纤）。<br></p></blockquote><h4 id="6-3-高速以太网（传输速率-gt-100Mbit-s）"><a href="#6-3-高速以太网（传输速率-gt-100Mbit-s）" class="headerlink" title="6.3 高速以太网（传输速率&gt;=100Mbit/s）"></a>6.3 高速以太网（传输速率&gt;=100Mbit/s）</h4><blockquote><p>100Base-T以太网、吉比特以太网（千兆以太网），10吉比特以太网。<br></p></blockquote><h4 id="6-4-无线局域网"><a href="#6-4-无线局域网" class="headerlink" title="6.4 无线局域网"></a>6.4 无线局域网</h4><blockquote><p>可分为有固定设施的无线局域网和无固定设施的无线局域网。<br></p></blockquote><h4 id="6-5-令牌环网的工作原理"><a href="#6-5-令牌环网的工作原理" class="headerlink" title="6.5 令牌环网的工作原理"></a>6.5 令牌环网的工作原理</h4><blockquote><p>(1）当网络空闲时，环路中只有令牌在网络中循环传递；<br><br>(2) 令牌传递到有数据要发送的结点处，该节点就修改令牌的一个标志位，然后在令牌中附加自己需要的数据，这样就将令牌改换成了一个数据帧，源结点将这个数据帧发送出去；<br><br>(3)数据帧沿着环路传递，接收到的结点一边转发数据，一边查看帧的目的地址，若是自己的就收下；<br><br>(4）当数据帧到达了源节点，源节点收到了自己发出去的数据帧，便不再转发了。同时，源节点要通过校验返回的数据帧进行检错，若出错，则重发；<br><br>(5源节点传送完数据后，重新产生一个令牌，并将其传递给下一个站点，以交出发送数据帧的权限。<br></p></blockquote><h3 id="7-广域网"><a href="#7-广域网" class="headerlink" title="7.广域网"></a>7.广域网</h3><h4 id="7-1-广域网定义"><a href="#7-1-广域网定义" class="headerlink" title="7.1 广域网定义"></a>7.1 广域网定义</h4><blockquote><p>覆盖范围很广的长距离网络。<br></p></blockquote><h4 id="7-2-PPP（面向字节，无连接）"><a href="#7-2-PPP（面向字节，无连接）" class="headerlink" title="7.2 PPP（面向字节，无连接）"></a>7.2 PPP（面向字节，无连接）</h4><blockquote><p><strong>组成</strong>：<br><br>1)一个将IP数据包封装到串行链路的方法；<br><br>2)一个链路控制协议（LCP）；<br><br>3)一套网络控制协议（NCP）。<br></p></blockquote><blockquote><p><strong>PPP的帧格式</strong>：<br><br>标志字段（F）、地址字段（A）、控制字段（C）、协议字段、信息部分、帧检验序列（FCS）。<br></p></blockquote><h4 id="7-3-HDLC协议（面向比特）"><a href="#7-3-HDLC协议（面向比特）" class="headerlink" title="7.3 HDLC协议（面向比特）"></a>7.3 HDLC协议（面向比特）</h4><blockquote><p>HDLC协议可适用于两种配置：非平衡配置（由一个主站控制整个链路的工作）和平衡配置（链路两端的两个站都是复合站，每个复合站都可以平等地发起数据传输，而不需要得到对方复合站的允许）。<br><br>HDLC协议的帧格式：<br><br>标志字段（F）、地址字段（A）、控制字段（C）、信息字段、帧检验序列（FCS）。<br></p></blockquote><h3 id="8-数据链路层的设备"><a href="#8-数据链路层的设备" class="headerlink" title="8.数据链路层的设备"></a>8.数据链路层的设备</h3><h4 id="8-1-网桥"><a href="#8-1-网桥" class="headerlink" title="8.1 网桥"></a>8.1 网桥</h4><blockquote><p>具有过滤帧的功能。<br><br><strong>优点</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)过滤通信量；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)扩大了物理范围；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)提高了可靠性；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)可互连不同物理层、不同MAC子层和不同速率的以太网。<br><br><strong>缺点</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)存储转发增加了时延；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)在MAC子层并没有流量控制功能；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)具有不同MAC子层的网段桥接在一起时时延更大；<br><br>网桥只适合于用户数不太多和通信量不太大的局域网，否则产生广播风暴（传播过多的广播信息而产生网络拥塞）。<br><br><strong>分类</strong>：透明网桥（选择的不是最佳路由）、源选径网桥。<br></p></blockquote><h4 id="8-2-局域网交换机"><a href="#8-2-局域网交换机" class="headerlink" title="8.2 局域网交换机"></a>8.2 局域网交换机</h4><blockquote><p><strong>实质</strong>：多端口网桥。<br><br><strong>优点</strong>：不仅每个端口节点所占用的带宽不会因为端口节点数量的最佳而减少，而且整个交换机的带宽会随着带宽节点的增加而增加。<br><br><strong>两种交换模式</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)直通式交换：只检查帧的目的地址，帧在被接收后立即发出。速度快，不安全，不支持具有不同速率的端口的交换；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)存储转发式交换：先将接收到的帧存储在高速缓存中，检错，若不错则查找转发表，将该帧从查询到的端口转发出去；若出错则丢弃。可靠性高，支持不同速率端口间的转换，但延迟较大。<br><br><strong>工作原理</strong>：<br><br>和网桥类似，检测从某端口进入交换机的帧的源MAC地址和目的MAC地址，然后与系统内部的动态查找表进行比较，若数据报的MAC地址不在查找表中，则将该地址加入查找表中，并将数据报发送给相应的目的端口。<br></p></blockquote><h2 id="第四章、网络层"><a href="#第四章、网络层" class="headerlink" title="第四章、网络层"></a>第四章、网络层</h2><h3 id="1-网络层的功能"><a href="#1-网络层的功能" class="headerlink" title="1. 网络层的功能"></a>1. 网络层的功能</h3><blockquote><p>(1)异构网络互联；<br><br>(2)路由与转发：路由器的主要功能包括<code>路由选择</code>（根据路由算法确定一个进来的分组应该被传送到哪一条输出线路上）和<code>分组转发（路由器根据转发表将用户的IP数据报从合适的端口发送出去）</code>；<br><br>(3)拥塞控制：分为<code>开环控制（事先考虑发生拥塞的有关因素，力求避免拥塞）</code>和<code>闭环控制（事先不考虑，采用监视系统即时检测）</code>两大类。<br></p></blockquote><h3 id="2-路由算法"><a href="#2-路由算法" class="headerlink" title="2.路由算法"></a>2.路由算法</h3><p>（1）按照<code>路由算法能否随网络的通信量或拓扑自适应地进行调整变化来划分，</code>总体可分为<code>静态路由选择策略</code>和<code>动态路由选择策略</code>，前者手工做，简单开销小，适合小网络，后者能较好的适应网络状态的变化，但实现复杂。<br><br><strong>动态路由选择算法</strong>包括<code>距离-向量路由算法</code>和<code>链路状态路由算法</code>。<br></p><blockquote><p><strong>距离-向量路由算法</strong>中，路由器只掌握物理相邻的邻居以及链路费用，是一种分散性算法，典型代表是RIP；<br><br><strong>链路状态路由算法</strong>中，所有路由器掌握完整的物理拓扑和链路费用信息，是一种全局性算法，典型代表是OSPF。<br></p></blockquote><p>（2）按层次，因特网把<strong>路由选择协议</strong>划分为<code>内部网关协议（IGP）</code>和<code>外部网关协议（EGP）</code>。<br></p><blockquote><p>内部网关协议主要有RIP和OSPF，外部网关协议主要有BGP。<br></p></blockquote><h3 id="3-路由（选择）协议"><a href="#3-路由（选择）协议" class="headerlink" title="3.路由（选择）协议"></a>3.路由（选择）协议</h3><p>(1) <strong>RIP</strong>(内部网关协议)：<br></p><blockquote><p>基于距离-向量算法，仅和相邻路由器交换信息，交换的信息是当前本路由器所知道的全部信息，按照<code>固定时间间隔</code>交换路由信息。<br><br><strong>优点</strong>：实现简单，开销小，收敛速度快。<br><br><strong>缺点</strong>：限制了网络规模（16不可达）；由于路由器之间交换的路由信息是路由器中的完整路由表，所以随着网络规模扩大开销也变大；坏消息传播的慢，此时收敛时间长。<br></p></blockquote><p>(2) <strong>OSPF（内部网关协议）</strong>：<br></p><blockquote><p>基于链路状态协议，使用<code>洪泛法</code>（一传十，十传百）向本自制系统内的所有路由器发送信息，只有当链路状态改变时才更新。<br></p></blockquote><p>(3) <strong>BGP(外部网关协议)</strong>：<br></p><blockquote><p>基于<code>路径-向量协议，</code>自治系统之间路由器交换信息时使用这个。<br></p></blockquote><h3 id="4-IPv4地址的分类"><a href="#4-IPv4地址的分类" class="headerlink" title="4.IPv4地址的分类"></a>4.IPv4地址的分类</h3><blockquote><p><strong>A类地址</strong>：网络号8位，规定第一位是0，可指派的网络数为$2^7-2$，因为其中网络地址全0的地址是个保留地址，意思是“本网络”，网络号01111111用于本地软件环回测试。后面3B（24位）代表主机号，主机号全0代表该网络，全1代表广播地址，最大主机数为$2^{24}-2$。<br><br><strong>B类地址</strong>：网络号为16位，规定前两位是10（因此网络地址不可能出现全0），网络地址128.0.0.0不指派，所以可指派的网络数为$2^{14}-1$。主机号也为16位，同样，每一个网络上的最大主机数为$2^{16}-2$。<br><br><strong>C类地址</strong>：网络号为24位，规定前3位为110（因此网络地址不可能出现全0），网络地址192.0.0.0不指派，所以可指派的网络数为$2^{21}-1$。主机号为8位，同样，每一个网络上的最大主机数为$2^{8}-2$。<br></p></blockquote><h3 id="5-NAT"><a href="#5-NAT" class="headerlink" title="5.NAT"></a>5.NAT</h3><blockquote><p>用于实现专用网的主机和因特网的主机的通信。<br><br>NAT可以将专用网内部使用的本地IP地址转换成有效的外部全球IP地址，使得这个专用网只需要1个全球IP地址就可以与因特网连通。<br><br>使用NAT技术，需要在专用网连接到因特网的路由器上安装NAT软件(NAT 路由器)。<br><br>NAT技术可大大节省IP地址的消耗，它至少有一个有效的外部全球IP地址，但并没有知己IP地址的个数。<br></p></blockquote><h3 id="6-子网划分"><a href="#6-子网划分" class="headerlink" title="6.子网划分"></a>6.子网划分</h3><blockquote><p>从主机号借用若干个比特作为子网号，而主机号也就相应减少了若干比特，网络号不变。注意子网号不能使用全0和全1.<br></p></blockquote><h3 id="7-子网掩码"><a href="#7-子网掩码" class="headerlink" title="7.子网掩码"></a>7.子网掩码</h3><blockquote><p>用来告诉主机或路由器是否对一个A/B/C类网络进行了子网划分。<br><br>所有网络都有子网掩码，若未划分子网，则采用默认的子网掩码。<br><br>规定A/B/C类地址的默认子网掩码分别为：255.0.0.0，255.255.0.0，255.255.255.0<br><br><strong>总结</strong>：不管有没有划分子网，只要将子网掩码与IP地址逐位做“与”运算，就一定能得到网络地址。<br></p></blockquote><h3 id="8-CIDR"><a href="#8-CIDR" class="headerlink" title="8.CIDR"></a>8.CIDR</h3><blockquote><p>为了解决IP地址耗尽而提出来的措施。<br><br>CIDR消除了传统的A/B/C/类和子网划分的概念，而使用各种长度的“网络前缀”来代替分类地址中的网络号和子网号，于是IP地址形式为{&lt;网络前缀&gt;，&lt;主机号&gt;}。<br><br>为了区分网络前缀，通常采用“斜线记法”，比如128.14.32.0/20表示的地址块共$2^{12}$个地址（因为斜线后面的20是网络前缀的位数，使用主机号位数是32-20=12），全0和全1的主机号不使用。<br></p></blockquote><h3 id="9-超网"><a href="#9-超网" class="headerlink" title="9.超网"></a>9.超网</h3><blockquote><p>将网络前缀（整个网络号字段）都相同的连续的IP地址组成“CIDR地址块”，一个CIDR地址块可以表示很多地址，这种地址的聚合称为<code>路由聚合</code>，也称<code>构成超网</code>。</p></blockquote><h3 id="10-各种情况下路由表表项的结构"><a href="#10-各种情况下路由表表项的结构" class="headerlink" title="10.各种情况下路由表表项的结构"></a>10.各种情况下路由表表项的结构</h3><blockquote><p> (1)没划分子网前的路由表：目的网络地址、下一跳地址；<br><br> (2)划分子网后的路由表：目的网络地址、子网掩码、下一跳地址；<br><br> (3)使用CIDR后的路由表：网络前缀、下一跳地址。<br></p></blockquote><h3 id="11-ARP"><a href="#11-ARP" class="headerlink" title="11.ARP"></a>11.ARP</h3><blockquote><p>在每个主机中都有一个ARP高速缓存，里面存放的是所在局域网上的各主机和路由器的IP地址到硬件地址的映射表，ARP的职责就是动态的维护该表。<br><br>ARP请求分组是广播发送的，但ARP响应分组是普通的单播。<br></p></blockquote><h3 id="12-动态主机配置协议-DHCP"><a href="#12-动态主机配置协议-DHCP" class="headerlink" title="12.动态主机配置协议(DHCP)"></a>12.动态主机配置协议(DHCP)</h3><blockquote><p>常用于给主机动态的分配IP地址，提供了即插即用的连网机制，允许一台计算机加入新的网络和获取IP地址而不用手工参与。<br><br>DHCP是应用层协议，DHCP报文使用UDP传输。<br><br>DHCP服务器分配给DHCP客户的IP地址是临时的(<code>租用期</code>内可用)。<br></p></blockquote><h3 id="13-ICMP"><a href="#13-ICMP" class="headerlink" title="13.ICMP"></a>13.ICMP</h3><blockquote><p>主机发送数据报可能出错，如果检测出错误的路由器或主机能把错误报告通过一些控制消息告诉发送数据的主机，那么发送数据的主机就可以根据ICMP报文确定发送错误的类型，并确定如何更好的重发失败的数据报。<br><br>ICMP报文可分为两种：<br><br>(1)ICMP差错报告报文的分类：终点不可达、源点抑制、时间超过、参数问题、改变路由(重定向)。<br><br>(2)ICMP询问报文的分类：有回送请求和回答报文、时间戳请求和回答报文、掩码地址请求和回答报文、路由器询问和通告报文。<br><br><strong>典型应用</strong>：<code>ping</code>(使用了ICMP回送请求与回送回答报文，是应用层直接使用网络层ICMP的栗子)、<code>tracert</code>(跟踪路由分组经过的路由，它工作在网络层)。<br></p></blockquote><h3 id="14-IPV6"><a href="#14-IPV6" class="headerlink" title="14. IPV6"></a>14. IPV6</h3><h4 id="14-1-IPV6的特点"><a href="#14-1-IPV6的特点" class="headerlink" title="14.1. IPV6的特点"></a>14.1. IPV6的特点</h4><blockquote><p>(1)更大的地址空间。IPV6将地址从IPV4的32位增大到了128位；<br><br>(2)扩展的地址层次结构。因为地址多了，所以可以划分更多层次；<br><br>(3)灵活的首部格式；<br><br>(4)改进的选项；<br><br>(5)允许协议继续扩充；<br><br>(6)支持即插即用；<br><br>(7)支持资源的预分配；<br><br>(8)IPV6首部长度必须是8B的整数倍，而IPV4是4B的整数倍。<br></p></blockquote><h4 id="14-2-IPV6的goodness"><a href="#14-2-IPV6的goodness" class="headerlink" title="14.2 IPV6的goodness"></a>14.2 IPV6的goodness</h4><blockquote><p>(1)比IPV4有长得多的地址；<br><br>(2)简化了IP分组的基本首部，从而改善吞吐率；<br><br>(3)更好的支持选项。从前的一些必选的段现在变成了可选的，路由器可以简单的跳过无关选项，加快了分组的处理速度。<br></p></blockquote><h4 id="14-3-其他"><a href="#14-3-其他" class="headerlink" title="14.3 其他"></a>14.3 其他</h4><blockquote><p>IPV6定义了三种地址类型：<br><br>1)单播：传统的点对点通信；<br><br>2)组播：数据报交付到一组计算机中的每一个广播可看做是组播的一个特例；<br><br>3)任播：其目的站是一组主机，但数据报在交付时只交付给其中一个，通常是距离最近的那个。<br></p></blockquote><h3 id="15-RIP、OSPF、BGP对比"><a href="#15-RIP、OSPF、BGP对比" class="headerlink" title="15. RIP、OSPF、BGP对比"></a>15. RIP、OSPF、BGP对比</h3><p><img src="3.png" alt=""> <br></p><h3 id="16-IP组播"><a href="#16-IP组播" class="headerlink" title="16. IP组播"></a>16. IP组播</h3><p>3种 IP地址：单播地址、<strong>组播地址</strong>、多播地址。<br></p><blockquote><p><strong>组播</strong>一定是仅应用于UDP。<br><br>把一个分组发送给多台目的主机，采用的方法并不是让源主机给每台目的知己都发送一份分组，而是将分组发给一个组播地址，该组播地址标示一组主机。网络把这个分组复制后传递给该组中的每一台在主机。<br><br>与广播不同，主机组播时仅发送一份数据，组播的数据仅在传送路径分叉时才将数据报复制后继续转发。<br><br>组播需要路由器的支持(组播路由器)。<br></p></blockquote><p>组播的特点：<br></p><blockquote><p>1）组播地址只能用于目的地址，不能用于源地址；<br><br>2)组播数据报“尽最大努力交付”，不提供可靠交付；<br><br>3)对组播数据报不产生差错报文；<br><br>4)并非所有D类地址都可以作为组播地址。<br></p></blockquote><h3 id="17-移动IP"><a href="#17-移动IP" class="headerlink" title="17. 移动IP"></a>17. 移动IP</h3><blockquote><p>移动节点（比如一台笔记本电脑）在本地时使用传统的TCP/IP方式进行通信，而当移动节点漫游到外地网络时，仍需要使用固定的IP地址进行通信，为了能收到信息，<code>移动节点</code>需要向<code>本地代理</code>注册当前的位置地址(也就是<code>转交地址</code>)，本地代理收到后会建立一条<code>隧道</code>，将截获的发送给移动节点的IP分组送到转交地址处，在转交地址处解除隧道封装，最后送到移动节点。<br></p></blockquote><h3 id="18-移动IP与动态IP的区别"><a href="#18-移动IP与动态IP的区别" class="headerlink" title="18. 移动IP与动态IP的区别"></a>18. 移动IP与动态IP的区别</h3><blockquote><p><strong>移动IP</strong>为移动主机设置了两个IP地址，即主地址和辅地址(转交地址)。移动节点在本地网时使用主地址，在外网需要获得一个辅助的临时地址，但是此时主地址不变，当从外网回来时，辅地址就会被改变或撤销，而主地址依然不变。<br></p><p><strong>动态IP</strong>是指局域网中的计算机可以通过网络中的DHCP服务器动态的获得一个IP地址，所以不需要用户在计算机网络设置中指定IP地址。<br></p></blockquote><h3 id="19-网络层设备"><a href="#19-网络层设备" class="headerlink" title="19.网络层设备"></a>19.网络层设备</h3><p> <strong>路由器</strong>实质上是一种多个输入端口和多个输出端口的专用计算机，其任务是连接不同的网络转发分组。也就是说，将路由器某个输入端口收到的分组，按照分组要取的目的地（目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。<br></p><blockquote><p>路由器的结构：<br><br>(1)路由选择根据所选定的路由选择协议构造出路由表，同时经常或定期的和相邻路由器交换路由信息而不断更新和维护路由表，其核心部件是路由选择处理器；<br><br>(2)分组转发：包括一组输入端口、交换结构和一组输出端口，交换结构(路由器的核心部件)从输入端口接收到分组后，根据转发表对分组进行处理，然后从一个合适的输出端口转发出去。</p></blockquote><p>若接收到的分组是路由器之间交换路由信息的分组，比如RIP和OSPF分组，则把这种分组送交路由器的路由选择部分的选择处理器；<br><br>若接收到的是数据分组，则按照分组首部中的目的地址查找转发表，经过交换结构到达合适的输出端口。<br><br>当一个分组正在查找转发表时，后面又紧跟着从这个输入端口收到另一个分组，这个分组就要排队，因而产生了<strong>时延</strong>。<br></p><h3 id="20-各层设备总结"><a href="#20-各层设备总结" class="headerlink" title="20. 各层设备总结"></a>20. 各层设备总结</h3><p><img src="4.png" alt=""> <br></p><h2 id="第五章、传输层"><a href="#第五章、传输层" class="headerlink" title="第五章、传输层"></a>第五章、传输层</h2><h3 id="1-传输层的功能"><a href="#1-传输层的功能" class="headerlink" title="1. 传输层的功能"></a>1. 传输层的功能</h3><p>对整个传输层而言的功能：<br></p><blockquote><p>(1)提供应用进程间的逻辑通信(网络层提供主机之间的逻辑通信)；<br></p><p>(2)对收到的报文的首部和数据部分进行差错检测(网络层只检查IP 数据报首部)；<br></p><p>(3)提供无连接(UDP)或面向连接(TCP)的服务；<br></p><p>(4)复用和分用：复用是指发送方不同的进程都可以使用同一个传输层协议传送数据，分用是指接收方的传输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。<br></p></blockquote><p>此外对于面向连接的服务还有以下功能：<br></p><blockquote><p>(1)连接管理，如TCP的3次<strong>握手</strong>（通常把连接的定义和建立的过程称为握手）;<br></p><p>(2)流量控制和拥塞控制。<br></p></blockquote><h3 id="2-软件端口与硬件端口"><a href="#2-软件端口与硬件端口" class="headerlink" title="2.软件端口与硬件端口"></a>2.软件端口与硬件端口</h3><p>软件端口就是传输层服务访问点，是应用层的各种协议进程与传输实体进行层间交互的一种地址；<br></p><p>而硬件端口是指不同硬件设备进行交互的接口(如交换机和路由器的端口)。<br></p><h3 id="3-端口号"><a href="#3-端口号" class="headerlink" title="3. 端口号"></a>3. 端口号</h3><blockquote><p>用大量端口号标识一台主机在某一时刻的网络应用进程。<br></p><p>主要有3类端口号：熟知端口、登记端口、客户端端口或短暂端口。<br></p></blockquote><h3 id="4-套接字"><a href="#4-套接字" class="headerlink" title="4.套接字"></a>4.套接字</h3><blockquote><p>唯一标识了网络中的某台主机上的某个应用进程，<strong>套接字=（主机IP地址，端口号）</strong>。<br></p></blockquote><h3 id="5-无连接服务与面向连接服务"><a href="#5-无连接服务与面向连接服务" class="headerlink" title="5. 无连接服务与面向连接服务"></a>5. 无连接服务与面向连接服务</h3><p>TCP-&gt;传输层向上提供一条全双工的可靠逻辑信道<br></p><p>UDP-&gt;传输层向上提供一条不可靠的逻辑信道<br></p><h4 id="5-1-UDP的特点"><a href="#5-1-UDP的特点" class="headerlink" title="5.1 UDP的特点"></a>5.1 UDP的特点</h4><blockquote><p>(1)传送数据前不需要建立连接，数据到达后也无需确认；<br></p><p>(2)不可靠交付；<br></p><p>(3)报文头部短，传输开销小，时延较短。<br></p></blockquote><h4 id="5-2-TCP的特点"><a href="#5-2-TCP的特点" class="headerlink" title="5.2 TCP的特点"></a>5.2 TCP的特点</h4><blockquote><p>(1)面向连接，不提供广播或多播服务；<br></p><p>(2)可靠交付；<br></p><p>(3)报文段头部长，传输开销大。<br></p></blockquote><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h3><blockquote><p>问：UDP 数据报和IP 分组的区别<br></p></blockquote><blockquote><p>答：IP 分组要经过互联网中许多路由器的存储转发，但UDP数据报是在传输层的端到端的抽象的逻辑信道中传送的，UDP数据报只是IP 数据报中的数据部分，对路由器是不可见的。<br></p></blockquote><blockquote><p>问：TCP连接和网络层的虚电路的区别<br></p></blockquote><blockquote><p>答：TCP报文段是在传输层的端到端的抽象的逻辑信道中传送的，对路由器不可见。TCP中所谓的连接并不是真的物理连接，而电路交换中的电路是真实的物理连接，另外虚电路也不是一条真正的物理连接。<br></p></blockquote><h3 id="7-UDP"><a href="#7-UDP" class="headerlink" title="7. UDP"></a>7. UDP</h3><p>UDP在IP数据报服务之上增加了端口的功能(为了找到端口)和差错检测功能。<br></p><p>优点：<br></p><blockquote><p>(1)发送数据前不需要建立连接；<br></p><p>(2)UDP的主机不需要维持复杂的连接状态表；<br></p><p>(3)UDP用户数据报只有8个字节的首部开销；<br></p><p>(4)网络出现的拥塞不会使源主机的放速率降低(没有拥塞控制)，这对于某些实时应用是很重要的；<br></p><p>(5)UDP支持一对一、一对多、多对一和多对多的交互通信。<br></p></blockquote><h3 id="8-TCP"><a href="#8-TCP" class="headerlink" title="8. TCP"></a>8. TCP</h3><h4 id="8-1-TCP的连接管理"><a href="#8-1-TCP的连接管理" class="headerlink" title="8.1 TCP的连接管理"></a>8.1 TCP的连接管理</h4><p>TCP的传输连接可分为3各阶段：连接建立(<strong>TCP的3次握手</strong>)、数据传送和连接释放(<strong>TCP的4次握手</strong>) <br></p><h4 id="8-2-TCP的可靠传输"><a href="#8-2-TCP的可靠传输" class="headerlink" title="8.2 TCP的可靠传输"></a>8.2 TCP的可靠传输</h4><p>TCP数据编号与确认<br></p><blockquote><p>TCP是面向字节的。TCP将所要传送的报文看成是字节组成的数据流，并使每一个字节对应于一个序号。在连接建立时，双方要商定初始序号。TCP每次发送的报文段的首部中的序号字段数值表示该报文段中的数据部分的第一个字节的序号。<br></p></blockquote><p>TCP的重传机制<br></p><blockquote><p>TCP每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到了规定时间还没有收到确认，那么就要重传该报文段。<br></p></blockquote><h4 id="8-3-流量控制"><a href="#8-3-流量控制" class="headerlink" title="8.3 流量控制"></a>8.3 流量控制</h4><h4 id="8-4-拥塞的概念"><a href="#8-4-拥塞的概念" class="headerlink" title="8.4 拥塞的概念"></a>8.4 拥塞的概念</h4><blockquote><p>在某段时间， <strong>对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏</strong>，这种情况就叫做<strong>网络拥塞</strong>。 </p></blockquote><h4 id="8-5-拥塞控制的方法"><a href="#8-5-拥塞控制的方法" class="headerlink" title="8.5 拥塞控制的方法"></a>8.5 拥塞控制的方法</h4><p>(1)慢开始算法<br></p><blockquote><p>刚开始设置拥塞窗口为1，每收到对一个新的报文段的确认，拥塞窗口加1，这样子逐步增大发送方的拥塞窗口从而使得分组注入网络的速率更加合理。<br></p></blockquote><p>(2)拥塞避免算法</p><blockquote><p>发送端的拥塞窗口每经过一个往返时延RTT就增加一个最大报文段长度的大小，通常表现为按线性规律增长。<br></p></blockquote><p>此时的主要过程如下：<br></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)先执行慢开始算法，拥塞窗口指数增长-&gt; </span><br><span class="line"></span><br><span class="line">(2)拥塞窗口达到慢开始门限值，改为执行拥塞避免算法，拥塞窗口线性增长（加法增大）-&gt; </span><br><span class="line"></span><br><span class="line">(3)网络出现超时，网络开始拥塞将慢开始的门限值设置为当前拥塞窗口值的一半（乘法减小），拥塞窗口设置为1，重新执行慢开始算法，就这样循环往复下去</span><br></pre></td></tr></table></figure><p>(3)快重传算法 <br></p><blockquote><p>首先要求接收方每收到一个失序的报文段后就立即发出重复确认，发送方只要连续收到3个重复确认就应当立即重传对方尚未收到的报文段。<br></p></blockquote><p>(4)快恢复算法 <br></p><blockquote><p>当发送端收到连续的3个重复的ACK时，就重新设置慢开始门限值为拥塞窗口的一半，同时将拥塞窗口设为新的慢开始门限值。若发送窗口值还允许发送报文段，就按拥塞避免算法继续发送报文段。<br></p></blockquote><h3 id="9-对比TCP和UDP"><a href="#9-对比TCP和UDP" class="headerlink" title="9.对比TCP和UDP"></a>9.对比TCP和UDP</h3><p>UDP协议和TCP协议都是传输层协议。<br></p><p>TCP（Transmission Control Protocol，传输控制协议）提供的是面向连接，可靠的字节流服务。即客户和服务器交换数据前，必须现在双方之间建立一个TCP连接，之后才能传输数据。并且提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。<br></p><p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把应用程序传给IP层的数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章、计算机网络体系结构&quot;&gt;&lt;a href=&quot;#第一章、计算机网络体系结构&quot; class=&quot;headerlink&quot; title=&quot;第一章、计算机网络体系结构&quot;&gt;&lt;/a&gt;第一章、计算机网络体系结构&lt;/h1&gt;&lt;h3 id=&quot;1-计算机网络的定义&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习算法评估--ROC曲线</title>
    <link href="http://yoursite.com/2020/02/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E8%AF%84%E4%BC%B0-ROC%E6%9B%B2%E7%BA%BF/"/>
    <id>http://yoursite.com/2020/02/26/机器学习算法评估-ROC曲线/</id>
    <published>2020-02-26T06:35:14.000Z</published>
    <updated>2020-03-28T05:37:14.210Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在二分类问题中，正负样本不均衡时，使用ROC比准确率更佳。<br></p></blockquote><h3 id="准确度的陷阱"><a href="#准确度的陷阱" class="headerlink" title="准确度的陷阱"></a>准确度的陷阱</h3><p>一个癌症预测系统，预测的准确度达到了99.9%，如果癌症的发病率仅为0.1%，那么根本不需要任何机器学习算法，只要系统预测所有人都是健康，该系统的准确度就达到了99.9%。<br><br>那么，真正患病的人就会被误诊，糟了。。。<br></p><p>这种情况是属于数据样本极度偏斜，对于这种数据，只是用分类准确度是远远不够的，所以需要引入新的分类指标。<br></p><h3 id="二分类问题的混淆矩阵"><a href="#二分类问题的混淆矩阵" class="headerlink" title="二分类问题的混淆矩阵"></a>二分类问题的混淆矩阵</h3><p><img src="1.png" alt=""> <br><br>混淆矩阵中，第一个字母代表是否预测对了，第二个字母代表预测的是什么。<br></p><ul><li>TP：预测对了，并且预测的是positive(1) <br></li><li>TN：预测对了，并且预测的是negtive(0) <br></li><li>FP：预测错了，并且预测的是positive(1) <br></li><li>FN：预测错了，并且预测的是negtive(0) <br></li></ul><p>通过混淆矩阵，可以构造许多新的指标，往下看…<br></p><h3 id="精准率"><a href="#精准率" class="headerlink" title="精准率"></a>精准率</h3><ul><li>含义：预测数据为positive(1)，并且预测对了的概率<br></li><li>计算公式：precision=TP/(TP+FP) <br></li></ul><h3 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h3><ul><li>含义：我们关注的事件(positive(1))真实发生了，真实发生的这些事件中我们成功的预测对了多少<br></li><li>计算公式：recall=TP/(TP+FN) <br></li></ul><h3 id="F1-Score-兼顾精准率和召回率"><a href="#F1-Score-兼顾精准率和召回率" class="headerlink" title="F1 Score(兼顾精准率和召回率)"></a>F1 Score(兼顾精准率和召回率)</h3><ul><li>含义：F1 Score 是precision和recall的调和平均值<br></li><li>计算公式：F1=(2.precision.recall)/(precision+recall)<br></li></ul><p>精准率和召回率两者是互相矛盾的，此升彼消。<br><br>这一点可以通过绘制精准率和召回率分别与阈值之间的图形来直观看出。<br><br><code>sklearn</code>中的代码如下,其中的decision_function()就是WX=threshold（这里以LR为栗）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">precision=[]</span><br><span class="line">recalls=[]</span><br><span class="line">thresholds=np.arrange(np.min(decision_scores),np.max(decision_scores),<span class="number">0.1</span>)<span class="comment">#0.1是步长</span></span><br><span class="line"><span class="keyword">for</span> threshold <span class="keyword">in</span> thresholds:</span><br><span class="line">y_predict=np.array(decision_score&gt;=threshold,dtype=<span class="string">'int)</span></span><br><span class="line"><span class="string">    precision.append(precision_score(y_test,y_predict))</span></span><br><span class="line"><span class="string">    recalls.append(recalls_score(y_test,y_predict))</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"> plt.plot(thresholds,precisions)</span></span><br><span class="line"><span class="string"> plt.plot(thresholds,recalls)</span></span><br><span class="line"><span class="string"> plt.show()</span></span><br></pre></td></tr></table></figure></p><h3 id="PR-Precision-Recall-曲线"><a href="#PR-Precision-Recall-曲线" class="headerlink" title="PR(Precision-Recall)曲线"></a>PR(Precision-Recall)曲线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(precisions,recalls)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>精准率和召回率此消彼长的趋势很明显了<br></p><h3 id="ROC曲线"><a href="#ROC曲线" class="headerlink" title="ROC曲线"></a>ROC曲线</h3><p>坐标轴分别是FPR和TPR<br></p><ul><li>TPR(True Positive Rate)：预测为positive(1)，并且预测对了的数量占所有真实值为positive(1)的样本的比率 <br></li><li>FPR(False Positive Rate)：预测为positive(1)，但是预测错了的数量占真实值为negtive(0)样本的比率<br></li></ul><p><img src="2.png" alt=""> <br></p><p>两者也是此消彼长的关系<br><br>常用于不均衡数据，可用来比较各个模型的预测能力。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在二分类问题中，正负样本不均衡时，使用ROC比准确率更佳。&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;准确度的陷阱&quot;&gt;&lt;a href=&quot;#准确度的陷阱&quot; class=&quot;headerlink&quot; title=&quot;准确度的陷阱&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>锤子剪刀布游戏</title>
    <link href="http://yoursite.com/2020/02/11/%E9%94%A4%E5%AD%90%E5%89%AA%E5%88%80%E5%B8%83%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2020/02/11/锤子剪刀布游戏/</id>
    <published>2020-02-11T08:27:04.000Z</published>
    <updated>2020-02-11T08:43:54.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="刷题笔迹"><a href="#刷题笔迹" class="headerlink" title="刷题笔迹"></a>刷题笔迹</h3><p>这题花了俩小时，主要是卡在最后一行的输出上了。<br><br>刚开始我只是按照甲乙两人依靠锤子/剪刀/布获胜的次数大小直接比较得出最大值的索引，而没有考虑出现锤子/剪刀/布次数相同的情况。<br></p><blockquote><p>对于这种情况，我定义了一个数组<code>num[3]={&#39;B&#39;,&#39;C&#39;,&#39;J&#39;}</code>。<br><br>分别将甲乙两人依靠锤子/剪刀/布获胜的次数存入二维数组<code>s[2][3]</code>中，并且时按照<code>B,C,J</code>的顺序分别存在<code>s[][0],s[][1],s[][2]</code>中，之所以如此，是为了和num数组中存放顺序对应。<br><br>举个栗子，在甲的获胜局中，若遇到甲出锤子获胜的次数和甲出布获胜的次数相同，则比较其索引在num[]中的索引值(比较<code>ASCII</code>)，较小者便是字典序列中的较小者，取出打印即可。<br></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>大家应该都会玩“锤子剪刀布”的游戏</p><p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><blockquote><p>输入格式：<br>输入第 1 行给出正整数 N（≤10<br>​5<br>​​ ），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p></blockquote><hr><blockquote><p>输出格式：<br>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p></blockquote><p>输入样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure></p><p>输出样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure></p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">char</span> a[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c %c"</span>,&amp;a[i][<span class="number">0</span>],&amp;a[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> awin=<span class="number">0</span>,eq=<span class="number">0</span>,alose=<span class="number">0</span>;<span class="comment">//awin==blose,alose=bwin</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//a,b分别获胜/输最多次的手势计数c,j,b;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'C'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'J'</span>)</span><br><span class="line">&#123;</span><br><span class="line">awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">eq++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'J'</span>)</span><br><span class="line">&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'B'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'C'</span>)</span><br><span class="line">&#123;</span><br><span class="line">alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                eq++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'C'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'J'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                eq++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n%d %d %d\n"</span>,awin,eq,alose,alose,eq,awin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">3</span>]=&#123;<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'J'</span>&#125;;</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="keyword">int</span> l,max=s[<span class="number">0</span>][<span class="number">0</span>],maxi=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">0</span>;l&lt;<span class="number">3</span>;++l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>][l]&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=s[<span class="number">0</span>][l];</span><br><span class="line">maxi=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>][l]==max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[l]&lt;num[maxi])</span><br><span class="line">maxi=l;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//b</span></span><br><span class="line">        <span class="keyword">int</span> m,max1=s[<span class="number">1</span>][<span class="number">0</span>],max1i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">3</span>;++m)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">1</span>][m]&gt;max1)</span><br><span class="line">                &#123;</span><br><span class="line">                        max1=s[<span class="number">1</span>][m];</span><br><span class="line">                        max1i=m;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>][m]==max1)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(num[m]&lt;num[max1i])</span><br><span class="line">                                max1i=m;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>,num[maxi],num[max1i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;刷题笔迹&quot;&gt;&lt;a href=&quot;#刷题笔迹&quot; class=&quot;headerlink&quot; title=&quot;刷题笔迹&quot;&gt;&lt;/a&gt;刷题笔迹&lt;/h3&gt;&lt;p&gt;这题花了俩小时，主要是卡在最后一行的输出上了。&lt;br&gt;&lt;br&gt;刚开始我只是按照甲乙两人依靠锤子/剪刀/布获胜的次数大小直接比
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>[刷题]字符串处理专题</title>
    <link href="http://yoursite.com/2020/02/08/%E5%88%B7%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E4%B8%93%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/08/刷题-字符串处理专题/</id>
    <published>2020-02-08T07:44:00.000Z</published>
    <updated>2020-02-08T12:18:00.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-单词长度"><a href="#1-单词长度" class="headerlink" title="1.单词长度"></a>1.单词长度</h3><blockquote><p>你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如it’s算一个单词，长度为4。注意，行中可能出现连续的空格；最后的.不计算在内。</p></blockquote><hr><blockquote><p>输入格式：<br>输入在一行中给出一行文本，以<code>.</code>结束</p></blockquote><p><code>提示：用scanf(&quot;%c&quot;,...);来读入一个字符，直到读到.为止。</code></p><blockquote><p>输出格式：<br>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p></blockquote><hr><blockquote><p>输入样例：<br><code>It&#39;s great to see you here.</code></p></blockquote><blockquote><p>输出样例：<br><code>4 5 2 3 3 4</code></p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">1000</span>];<span class="comment">//接收字符串</span></span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">1000</span>];<span class="comment">//存储待输出序列</span></span><br><span class="line"><span class="comment">//      gets(str);//不能用个gets()，否则不通过</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计每个单词的字母个数</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str)<span class="number">-1</span>;<span class="comment">//不考虑最后的句号</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//单词</span></span><br><span class="line">                <span class="keyword">while</span>(str[i]!=<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                &#123;</span><br><span class="line">                        cnt++;</span><br><span class="line">                        ++i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j++]=cnt;</span><br><span class="line">                        cnt=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//空格</span></span><br><span class="line">                <span class="keyword">while</span>(str[i]==<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                        ++i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&lt;j<span class="number">-1</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-说反话"><a href="#2-说反话" class="headerlink" title="2.说反话"></a>2.说反话</h3><blockquote><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p></blockquote><hr><blockquote><p>输入格式：<br>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p></blockquote><hr><blockquote><p>输出格式：<br>每个测试用例的输出占一行，输出倒序后的句子。</p></blockquote><hr><blockquote><p>输入样例：<br><code>Hello World Here I Come</code></p></blockquote><hr><blockquote><p>输出样例：<br><code>Come I Here World Hello</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">88</span>][<span class="number">88</span>];</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                k=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;len&amp;&amp;str[i]!=<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j][k++]=str[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//a[j][k]='\0';</span></span><br><span class="line">                ++j;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-说反话加强版【未AC】"><a href="#3-说反话加强版【未AC】" class="headerlink" title="3.说反话加强版【未AC】"></a>3.说反话加强版【未AC】</h3><blockquote><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p></blockquote><hr><blockquote><p>输入格式：<br>测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。</p></blockquote><hr><blockquote><p>输出格式：<br>每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有1个空格。</p></blockquote><hr><blockquote><p>输入样例：<br><code>Hello World   Here I Come</code></p></blockquote><hr><blockquote><p>输出样例：<br><code>Come I Here World Hello</code></p></blockquote><p>我的代码（如下）没有通过最后一个测试点，可能是数组开小了<br><br><img src="1.png" alt=""> <br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">88</span>][<span class="number">88</span>];</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                k=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;len&amp;&amp;str[i]!=<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j][k++]=str[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//a[j][k]='\0';</span></span><br><span class="line">                <span class="keyword">if</span>(k!=<span class="number">0</span>)</span><br><span class="line">                        ++j;</span><br><span class="line">                <span class="keyword">while</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是把数组开到500001，但是编译时会提示<code>段错误 (核心已转储)</code><br><br>大佬看到帮忙解决下，谢谢! <br></p><h3 id="4-说反话新版-单词逆序，未AC"><a href="#4-说反话新版-单词逆序，未AC" class="headerlink" title="4.说反话新版(单词逆序，未AC)"></a>4.说反话新版(单词逆序，未AC)</h3><blockquote><p>Description:<br><br>Sakeven 正在对一段文字进行加密，规则如下：<br>把字符串中的每个单词进行逆序，比如 acm 变成 mca，其他字符顺序不变。<br><br>但是这个工作让他一个手写太麻烦啦，于是他想请你写个程序帮助他。<br></p></blockquote><hr><blockquote><p>Input:<br>输入有包括多组数据。每组数据包括一行字符串。</p></blockquote><hr><blockquote><p>Output:<br>输出加密后的字符串。</p></blockquote><hr><blockquote><p>Sample Input:<br><code>I Love You</code> </p></blockquote><hr><blockquote><p>Sample Output:<br><code>I evoL uoY</code></p></blockquote><p>这题我在本地编译能通过，但是提交时会超时<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">while</span>(gets(str)!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">                <span class="keyword">char</span> out[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//二维数组存储每一个子字符串(可能是单词，也可能是其他)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数组out</span></span><br><span class="line"><span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out)); </span><br><span class="line">                <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">                <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将用空格分割开的每一个子字符串(可能是单词，也可能是其他)</span></span><br><span class="line">                <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">while</span>(str[i]!=<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                        &#123;</span><br><span class="line">                                out[j][k++]=str[i];</span><br><span class="line">                                ++i;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        k=<span class="number">0</span>;</span><br><span class="line">                        ++j;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>&amp;&amp;i&lt;len)<span class="comment">//跳过空格</span></span><br><span class="line">                                ++i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;j;++m)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(out[m]);</span><br><span class="line"><span class="comment">//if-else:只逆序单词，其余字符原样输出</span></span><br><span class="line">                        <span class="keyword">if</span>(out[m][<span class="number">0</span>]&gt;=<span class="string">'a'</span>&amp;&amp;out[m][<span class="number">0</span>]&lt;=<span class="string">'z'</span>||out[m][<span class="number">0</span>]&gt;=<span class="string">'A'</span>&amp;&amp;out[m][<span class="number">0</span>]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> </span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> j=l<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,out[m][j]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;++j)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,out[m][j]);</span><br><span class="line"> </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(m&lt;j<span class="number">-1</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是gets()的原因，所以换了scanf，但是会陷入死循环<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-单词长度&quot;&gt;&lt;a href=&quot;#1-单词长度&quot; class=&quot;headerlink&quot; title=&quot;1.单词长度&quot;&gt;&lt;/a&gt;1.单词长度&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫环问题--丢手绢</title>
    <link href="http://yoursite.com/2020/02/06/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98-%E4%B8%A2%E6%89%8B%E7%BB%A2/"/>
    <id>http://yoursite.com/2020/02/06/约瑟夫环问题-丢手绢/</id>
    <published>2020-02-06T06:13:05.000Z</published>
    <updated>2020-02-06T06:18:13.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是，给定了和，一开始要站在什么地方才能避免被处决？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。 <br></p></blockquote><blockquote><p>17世纪的法国数学家加斯帕在《数目的游戏问题》中讲了这样一个故事：15个教徒和15 个非教徒在深海上遇险，必须将一半的人投入海中，其余的人才能幸免于难，于是想了一个办法：30个人围成一圆圈，从第一个人开始依次报数，每数到第九个人就将他扔入大海，如此循环进行直到仅余15个人为止。问怎样排法，才能使每次投入大海的都是非教徒。<br></p></blockquote><h3 id="代码解决"><a href="#代码解决" class="headerlink" title="代码解决"></a>代码解决</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">list</span> *L = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));       <span class="comment">//头结点</span></span><br><span class="line">        L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n, k, i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);<span class="comment">//n：总人数；k：报数为为k者淘汰</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> *s, *q = L;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i)                                                     <span class="comment">//赋初值</span></span><br><span class="line">        &#123;</span><br><span class="line">                s = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">                s-&gt;data = i+<span class="number">1</span>;</span><br><span class="line">                s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                q-&gt;next = s;</span><br><span class="line">                q = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q-&gt;next = L-&gt;next;                                                      <span class="comment">//让尾结点指向头结点的下一个，即第一个人的位置，单向循环链表创建完成</span></span><br><span class="line">        q = L-&gt;next;    <span class="comment">//让q指向头结点的下一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心代码部分</span></span><br><span class="line">        <span class="keyword">while</span> (q-&gt;next != q)                                            <span class="comment">//只剩一个元素时，退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//令q指向删除节点的前驱结点</span></span><br><span class="line">                <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;k<span class="number">-1</span>; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                        q = q-&gt;next;</span><br><span class="line">                &#125;          </span><br><span class="line">                 s = q-&gt;next;                                                    <span class="comment">//s指向删除节点</span></span><br><span class="line">                q-&gt;next = s-&gt;next;                                              <span class="comment">//将去除s后的链表重新连接起来</span></span><br><span class="line">                q = q-&gt;next;                                                    <span class="comment">//让q指向下次循环的起始位置</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, s-&gt;data);</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">                s = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"%d\n"</span>, q-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(L);</span><br><span class="line">        L = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Jo
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数字黑洞[本地编译通过，OJ未通过]</title>
    <link href="http://yoursite.com/2020/01/31/%E6%95%B0%E5%AD%97%E9%BB%91%E6%B4%9E-%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91%E9%80%9A%E8%BF%87%EF%BC%8COJ%E6%9C%AA%E9%80%9A%E8%BF%87/"/>
    <id>http://yoursite.com/2020/01/31/数字黑洞-本地编译通过，OJ未通过/</id>
    <published>2020-01-31T14:53:00.000Z</published>
    <updated>2020-01-31T14:57:44.413Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1019 数字黑洞 (20分)</span><br><span class="line">给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</span><br><span class="line"></span><br><span class="line">例如，我们从6767开始，将得到</span><br><span class="line"></span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</span><br><span class="line"></span><br><span class="line">输入格式：</span><br><span class="line">输入给出一个正整数 N。</span><br><span class="line"></span><br><span class="line">输出格式：</span><br><span class="line">如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。</span><br><span class="line"></span><br><span class="line">输入样例 1：</span><br><span class="line">6767</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 1：</span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输入样例 2：</span><br><span class="line">2222</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 2：</span><br><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure><p>我写的辣鸡代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h2l</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//选择排序，由大到小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[j]&gt;arr[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">int</span> temp;</span><br><span class="line">                                temp=arr[i];</span><br><span class="line">                                arr[i]=arr[j];</span><br><span class="line">                                arr[j]=temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">l2h</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//选择排序，由小到大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> arr[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">arr[i]=str[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> high=h2l(arr);<span class="comment">//非递增排列</span></span><br><span class="line"><span class="keyword">int</span> low=l2h(arr);<span class="comment">//非递减排列,注意前面有0被去掉</span></span><br><span class="line"><span class="keyword">if</span>(high==low)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-%d=0000"</span>,high,low);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>((high-low)!=<span class="number">6174</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c=high-low;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;aa[<span class="number">2</span>]=<span class="number">0</span>;aa[<span class="number">3</span>]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">2</span>]=c/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=c%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">1</span>]=c/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=(c%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=(c%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=c/<span class="number">1000</span>;</span><br><span class="line">aa[<span class="number">1</span>]=(c%<span class="number">1000</span>)/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">high=h2l(aa);</span><br><span class="line">low=l2h(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line">        <span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">                &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"6174"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据链路层</title>
    <link href="http://yoursite.com/2020/01/30/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/30/数据链路层/</id>
    <published>2020-01-30T11:45:03.000Z</published>
    <updated>2020-01-30T12:41:52.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h3><p>结点：主机，路由器<br></p><p>链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路和无线链路<br></p><p>数据链路：网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路<br></p><p>帧：链路层的协议数据单元，封装网络层数据报<br></p><blockquote><p>数据链路层负责通过一条链路从一个加到向另一个物理链路直接相连的相邻结点传送数据报<br></p></blockquote><h3 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h3><p>数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传送到相邻结点的目标机网络层。其主要作用是<code>加强物理层传送原始比特流的功能</code>，将物理层提供的可能出错的物理连接改造为<code>逻辑上无差错的数据链路</code>，使之对网络层表现为一条无差错的链路。<br></p><blockquote><p>功能一：为网络层提供服务。无确认无连接服务，有确认无连接服务，有确认面向连接服务(tip:有链连接一定有确认)<br><br>功能二：链路管理，即连接的建立，维持，释放(用于面向连接的服务)<br><br>功能三：组帧<br><br>功能四：流量控制(限制发送方)<br><br>功能五：差错控制（帧错/位错）<br></p></blockquote><h3 id="封装成帧与透明传输"><a href="#封装成帧与透明传输" class="headerlink" title="封装成帧与透明传输"></a>封装成帧与透明传输</h3><p><img src="1.png" alt=""> <br><br><code>透明传输</code>是指不管所传数据时什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西<br><br>当所传数据的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息（例如下面的字符填充法中那样），这样才能保证数据链路层的传输是透明的。<br><br><img src="2.png" alt=""> <br><br><img src="3.png" alt=""> <br><br><img src="4.png" alt=""> <br><br><img src="5.png" alt=""> <br><br><img src="6.png" alt=""> <br></p><p>总结：由于字节计数法中count字段的脆弱性(其值若有差错将导致灾难性后果)以及字符填充法实现上的复杂性和不兼容性，目前较普遍使用的帧同步法时比特填充和违规编码法<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据链路层基本概念&quot;&gt;&lt;a href=&quot;#数据链路层基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据链路层基本概念&quot;&gt;&lt;/a&gt;数据链路层基本概念&lt;/h3&gt;&lt;p&gt;结点：主机，路由器&lt;br&gt;&lt;/p&gt;
&lt;p&gt;链路：网络中两个结点之间的物理通道，链路的
      
    
    </summary>
    
    
  </entry>
  
</feed>

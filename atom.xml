<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个大学狗的日常</title>
  
  <subtitle>放弃不难，但坚持一定很酷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-07T04:47:11.579Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凡希</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>星空花雨模拟</title>
    <link href="http://yoursite.com/2019/08/07/%E6%98%9F%E7%A9%BA%E8%8A%B1%E9%9B%A8%E6%A8%A1%E6%8B%9F/"/>
    <id>http://yoursite.com/2019/08/07/星空花雨模拟/</id>
    <published>2019-08-07T04:46:06.000Z</published>
    <updated>2019-08-07T04:47:11.579Z</updated>
    
    <content type="html"><![CDATA[<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=11312702">]]></content>
    
    <summary type="html">
    
      
      
        &lt;embed height=&quot;415&quot; width=&quot;544&quot; quality=&quot;high&quot; allowfullscreen=&quot;true&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;//static.hdslb.com/miniloade
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>期末复习笔记</title>
    <link href="http://yoursite.com/2019/07/10/%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/10/期末复习笔记/</id>
    <published>2019-07-10T14:05:39.000Z</published>
    <updated>2019-07-10T14:27:58.317Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt=""> <br><br><img src="2.jpg" alt=""> <br><br><img src="3.jpg" alt=""> <br><br><img src="4.jpg" alt=""> <br><br><img src="5.jpg" alt=""> <br><br><img src="6.jpg" alt=""> <br><br><img src="7.jpg" alt=""> <br><br><img src="8.jpg" alt=""> <br><br><img src="9.jpg" alt=""> <br><br><img src="10.jpg" alt=""> <br><br><img src="11.jpg" alt=""> <br><br><img src="12.jpg" alt=""> <br><br><img src="13.jpg" alt=""> <br><br><img src="14.jpg" alt=""> <br><br><img src="15.jpg" alt=""> <br><br><img src="16.jpg" alt=""> <br><br><img src="17.jpg" alt=""> <br><br><img src="18.jpg" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img 
      
    
    </summary>
    
      <category term="回归分析" scheme="http://yoursite.com/categories/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>在单链表第position个位置之前插入值为x的新结点</title>
    <link href="http://yoursite.com/2019/06/23/%E5%9C%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E7%AC%ACposition%E4%B8%AA%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E5%80%BC%E4%B8%BAx%E7%9A%84%E6%96%B0%E7%BB%93%E7%82%B9/"/>
    <id>http://yoursite.com/2019/06/23/在单链表第position个位置之前插入值为x的新结点/</id>
    <published>2019-06-23T14:54:55.000Z</published>
    <updated>2019-06-23T14:56:38.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>用带头结点的单链表作为线性的存储结构，编写在线性表中第<code>position</code>个元素之前插入值为<code>x</code>的元素的方法</p></blockquote><h3 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//链表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表初始化函数</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先搞个头结点粗来</span></span><br><span class="line">link *p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//再弄个工作指针，初始指向头结点p</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line"><span class="comment">//想初始化，得有原料，那就是一个一个的节点，现在还没有节点，那先搞一个粗来</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//光有空壳不够，该赋值了(对link结构体中的elem赋值)</span></span><br><span class="line">a-&gt;elem=i;</span><br><span class="line"><span class="comment">//有了原料节点，就用一根绳子把它们串起来（对link结构体中的next指针赋地址值）</span></span><br><span class="line">temp-&gt;next=a;<span class="comment">//串起来啦</span></span><br><span class="line">temp=a;<span class="comment">//工作指针temp后移，准备迎接下一个节点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//为了颜值和正义而生</span></span><br><span class="line"><span class="comment">//串完之后，原来的头结点p身后就有了一大堆节点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//return试试看</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始化好的链表元素函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">link *x=p;<span class="comment">//x初始指向头结点</span></span><br><span class="line"><span class="keyword">while</span>(x-&gt;next)&#123;</span><br><span class="line">x=x-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x-&gt;elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">link *<span class="title">insert</span><span class="params">(link *L,<span class="keyword">int</span> x,<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(position&lt;<span class="number">1</span>|| position&gt;<span class="number">4</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"越界了！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">link *p=L;</span><br><span class="line">link *q;<span class="comment">//q是p的前驱</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;position;i++)&#123;</span><br><span class="line">q=p;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;<span class="comment">//此时，p指向position位置，q指向position-1位置</span></span><br><span class="line"><span class="comment">//接下来造个新的结点粗来</span></span><br><span class="line">link *newnode=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">newnode-&gt;elem=x;<span class="comment">//造完了</span></span><br><span class="line"><span class="comment">//开始把newnode插入到position之前</span></span><br><span class="line">newnode-&gt;next=q-&gt;next;</span><br><span class="line">q-&gt;next=newnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化链表（1，2，3，4）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表为：\n"</span>);</span><br><span class="line">    link *p=initLink();</span><br><span class="line">    display(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"在第4个结点之前插入元素值为8的新结点之后的链表为：\n"</span>);</span><br><span class="line">insert(p,<span class="number">8</span>,<span class="number">4</span>);</span><br><span class="line">display(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化链表为：</span><br><span class="line">1234</span><br><span class="line"></span><br><span class="line">在第4个结点之前插入元素值为8的新结点之后的链表为：</span><br><span class="line">12384</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;用带头结点的单链表作为线性的存储结构，编写在线性表中第&lt;code&gt;position&lt;/code&gt;个
      
    
    </summary>
    
      <category term="数据结构自学史" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%87%AA%E5%AD%A6%E5%8F%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>删除带头结点的链表中所有值为x的结点</title>
    <link href="http://yoursite.com/2019/06/20/%E5%88%A0%E9%99%A4%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%89%80%E6%9C%89%E5%80%BC%E4%B8%BAx%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>http://yoursite.com/2019/06/20/删除带头结点的链表中所有值为x的结点/</id>
    <published>2019-06-20T03:57:56.000Z</published>
    <updated>2019-06-20T03:59:03.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>假设用带头结点的单链表作为线性表的存储结构，编写算法，删除线性表中所有值为x的结点</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//链表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表初始化函数</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先搞个头结点粗来</span></span><br><span class="line">link *p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//再弄个工作指针，初始指向头结点p</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line"><span class="comment">//想初始化，得有原料，那就是一个一个的节点，现在还没有节点，那先搞一个粗来</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//光有空壳不够，该赋值了(对link结构体中的elem赋值)</span></span><br><span class="line">a-&gt;elem=i;</span><br><span class="line"><span class="comment">//有了原料节点，就用一根绳子把它们串起来（对link结构体中的next指针赋地址值）</span></span><br><span class="line">temp-&gt;next=a;<span class="comment">//串起来啦</span></span><br><span class="line">temp=a;<span class="comment">//工作指针temp后移，准备迎接下一个节点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//为了颜值和正义而生</span></span><br><span class="line"><span class="comment">//串完之后，原来的头结点p身后就有了一大堆节点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//return试试看</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始化好的链表元素函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">link *x=p;<span class="comment">//x初始指向头结点</span></span><br><span class="line"><span class="keyword">while</span>(x-&gt;next)&#123;</span><br><span class="line">x=x-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x-&gt;elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">link *<span class="title">del</span><span class="params">(link *p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">link *r=p-&gt;next;<span class="comment">//r用来自遍历，初始指向第一个元素节点</span></span><br><span class="line">link *q=p;<span class="comment">//q是r的前驱</span></span><br><span class="line"><span class="keyword">while</span>(r!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(r-&gt;elem!=x)&#123;</span><br><span class="line">q=r;</span><br><span class="line">r=r-&gt;next;</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">q-&gt;next=r-&gt;next;</span><br><span class="line">r=r-&gt;next;</span><br><span class="line">&#125;<span class="comment">//else</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//while</span></span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化链表（1，2，3，4）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表为：\n"</span>);</span><br><span class="line">    link *p=initLink();</span><br><span class="line">    display(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"删除链表中元素值为4的结点之后的链表为：\n"</span>);</span><br><span class="line">del(p,<span class="number">4</span>);</span><br><span class="line">display(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化链表为：</span><br><span class="line">1234</span><br><span class="line">删除链表中元素值为4的结点之后的链表为：</span><br><span class="line">123</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;假设用带头结点的单链表作为线性表的存储结构，编写算法，删除线性表中所有值为x的结点&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
      <category term="数据结构自学史" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%87%AA%E5%AD%A6%E5%8F%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>ch4-字符串-串的堆分配存储</title>
    <link href="http://yoursite.com/2019/06/20/ch4-%E5%AD%97%E7%AC%A6%E4%B8%B2-%E4%B8%B2%E7%9A%84%E5%A0%86%E5%88%86%E9%85%8D%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/06/20/ch4-字符串-串的堆分配存储/</id>
    <published>2019-06-20T03:55:51.000Z</published>
    <updated>2019-06-20T03:57:10.234Z</updated>
    
    <content type="html"><![CDATA[<p>串的堆分配存储结构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a1=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> *a2=<span class="literal">NULL</span>;</span><br><span class="line">a1=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(a1,<span class="string">"abcd"</span>);<span class="comment">//用strcpy函数讲字符串"abcd"复制到刚刚申请的空间a1中去</span></span><br><span class="line">a2=(<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(a2,<span class="string">"efgh"</span>);<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">int</span> lengthA1=<span class="built_in">strlen</span>(a1);<span class="comment">//a1的长度</span></span><br><span class="line"><span class="keyword">int</span> lengthA2=<span class="built_in">strlen</span>(a2);<span class="comment">//a2的长度</span></span><br><span class="line"><span class="comment">//尝试将合并的串存储在 a1 中，如果 a1 空间不够，则用realloc动态申请</span></span><br><span class="line"><span class="keyword">if</span>(lengthA1&lt;lengthA1+lengthA2)&#123;</span><br><span class="line">a1=(<span class="keyword">char</span>*)<span class="built_in">realloc</span>(a1,(lengthA1+lengthA2+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并两个串到 a1 中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lengthA1;i&lt;lengthA1+lengthA2;i++)&#123;</span><br><span class="line">a1[i]=a2[i-lengthA1];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//串的末尾要添加 \0，避免出错</span></span><br><span class="line">a1[lengthA1+lengthA2]=<span class="string">'\0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>,a1);<span class="comment">//打印拼接后的字符串</span></span><br><span class="line"><span class="comment">//用完动态数组要立即释放</span></span><br><span class="line"><span class="built_in">free</span>(a1);</span><br><span class="line"><span class="built_in">free</span>(a2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefgh</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;串的堆分配存储结构&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>在二叉树遍历的递归代码基础上衍生出的一类题目</title>
    <link href="http://yoursite.com/2019/05/27/%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%92%E5%BD%92%E4%BB%A3%E7%A0%81%E5%9F%BA%E7%A1%80%E4%B8%8A%E8%A1%8D%E7%94%9F%E5%87%BA%E7%9A%84%E4%B8%80%E7%B1%BB%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/05/27/在二叉树遍历的递归代码基础上衍生出的一类题目/</id>
    <published>2019-05-27T14:04:34.000Z</published>
    <updated>2019-06-23T14:57:45.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>假设二叉树采用二叉链表存储结构，编写算法计算二叉树中既有左孩子又有右孩子的节点数 <br></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这种题目通过遍历整个二叉树的全部结点，并对所经过的每一个结点进行如下操作：<br></p><ul><li>判断该结点的左孩子和右孩子是否同时存在，若存在，则说明该结点符合题目要求的条件，计数加<code>1</code>，否则不计数　<br></li></ul><h1 id="算法实现（这里给出两种形式的代码）"><a href="#算法实现（这里给出两种形式的代码）" class="headerlink" title="算法实现（这里给出两种形式的代码）"></a>算法实现（这里给出两种形式的代码）</h1><h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;<span class="comment">//计数器初始化为0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">twochild</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>((Tree-&gt;lchild)&amp;&amp;(Tree-&gt;rchild))&#123;</span><br><span class="line">k++;</span><br><span class="line">twochild(Tree-&gt;lchild);</span><br><span class="line">twochild(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别要注意的是</strong>：<br><br>计数变量<code>k</code>必须作为全局变量，否则在每一次进入下一层递归时，k又被初始化为<code>0</code>，从而出错<br><br><br></p><h4 id="完整代码实例"><a href="#完整代码实例" class="headerlink" title="完整代码实例"></a>完整代码实例</h4><ul><li><p>首先创建一棵二叉树，形态如下： <br><br><img src="1.gif" alt=""> <br></p></li><li><p>算法实现</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">twochild</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>((Tree-&gt;lchild)&amp;&amp;(Tree-&gt;rchild))&#123;</span><br><span class="line">k++;</span><br><span class="line">twochild(Tree-&gt;lchild);</span><br><span class="line">twochild(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int k=0;</span></span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line">    <span class="comment">//printf("%d",Tree-&gt;lchild-&gt;lchild-&gt;data);</span></span><br><span class="line"><span class="keyword">int</span> kk=twochild(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,kk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">v2_twochild</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1,num2;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">num1=v2_twochild(Tree-&gt;lchild);</span><br><span class="line">num2=v2_twochild(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;lchild&amp;&amp;Tree-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> num1+num2+<span class="number">1</span>;<span class="comment">//+1是因为正在被访问的结点满足条件</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> num1+num2;<span class="comment">//否则不+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整代码实例-1"><a href="#完整代码实例-1" class="headerlink" title="完整代码实例"></a>完整代码实例</h4><ul><li>树的形态同上</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int k=0;</span></span><br><span class="line"><span class="comment">int twochild(BiTree Tree)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(Tree==NULL) return 0;</span></span><br><span class="line"><span class="comment">if((Tree-&gt;lchild)&amp;&amp;(Tree-&gt;rchild))&#123;</span></span><br><span class="line"><span class="comment">k++;</span></span><br><span class="line"><span class="comment">twochild(Tree-&gt;lchild);</span></span><br><span class="line"><span class="comment">twochild(Tree-&gt;rchild);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return k;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">v2_twochild</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1,num2;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">num1=v2_twochild(Tree-&gt;lchild);</span><br><span class="line">num2=v2_twochild(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;lchild&amp;&amp;Tree-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> num1+num2+<span class="number">1</span>;<span class="comment">//+1是因为正在被访问的结点满足条件</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> num1+num2;<span class="comment">//否则不+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int k=0;</span></span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line">    <span class="comment">//printf("%d",Tree-&gt;lchild-&gt;lchild-&gt;data);</span></span><br><span class="line"><span class="keyword">int</span> kk=v2_twochild(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,kk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上两种形式的代码在考题中经常出现，要特别注意第一种写法中的<code>k</code>必须作为全局变量</p><h1 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h1><ul><li>求解终端结点数，特定度数的结点数等也可以采用以上代码，稍加修改即可 <br></li><li>这里给出目前我遇到的类似的题目以及对应的代码实现,以后遇到类似的继续补充</li></ul><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><blockquote><p>求二叉树中的非终端结点数 <br></p></blockquote><h5 id="代码1-1"><a href="#代码1-1" class="headerlink" title="代码1"></a>代码1</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findunleafnode</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;lchild || Tree-&gt;rchild)&#123;</span><br><span class="line">k++;</span><br><span class="line">findunleafnode(Tree-&gt;lchild);</span><br><span class="line">findunleafnode(Tree-&gt;rchild);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findunleafnode</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;lchild || Tree-&gt;rchild)&#123;</span><br><span class="line">k++;</span><br><span class="line">findunleafnode(Tree-&gt;lchild);</span><br><span class="line">findunleafnode(Tree-&gt;rchild);</span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int k=0;</span></span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line">    <span class="comment">//printf("%d",Tree-&gt;lchild-&gt;lchild-&gt;data);</span></span><br><span class="line"><span class="comment">//int kk=v2_twochild(Tree);</span></span><br><span class="line"><span class="keyword">int</span> kk=findunleafnode(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,kk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：2</span><br></pre></td></tr></table></figure><h5 id="代码2-1"><a href="#代码2-1" class="headerlink" title="代码2"></a>代码2</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">v2_findunleafnode</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Tree-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; Tree-&gt;rchild==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//叶子结点,没有这个就出错了</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Tree-&gt;lchild || Tree-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+v2_findunleafnode(Tree-&gt;lchild)+v2_findunleafnode(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">v2_findunleafnode</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Tree-&gt;lchild==<span class="literal">NULL</span> &amp;&amp; Tree-&gt;rchild==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//叶子结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Tree-&gt;lchild || Tree-&gt;rchild)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+v2_findunleafnode(Tree-&gt;lchild)+v2_findunleafnode(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int k=0;</span></span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line"><span class="keyword">int</span> kk=v2_findunleafnode(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,kk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：2</span><br></pre></td></tr></table></figure><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><blockquote><p>求二叉树中所有结点数 <br></p></blockquote><p>代码1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">n++;</span><br><span class="line">count(Tree-&gt;lchild);</span><br><span class="line">count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">n++;</span><br><span class="line">count(Tree-&gt;lchild);</span><br><span class="line">count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//int k=0;</span></span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line"><span class="keyword">int</span> nn=count(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,nn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：4</span><br></pre></td></tr></table></figure><blockquote><p>代码2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1,num2;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">num1=count(Tree-&gt;lchild);</span><br><span class="line">num2=count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1,num2;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">num1=count(Tree-&gt;lchild);</span><br><span class="line">num2=count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+num1+num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line"><span class="keyword">int</span> nn=count(Tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"满足条件的结点数为：%d"</span>,nn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">满足条件的结点数为：4</span><br></pre></td></tr></table></figure><h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><blockquote><p>求解二叉链表存储结构下的叶子结点数目</p></blockquote><p>代码1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//n++;</span></span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild==<span class="literal">NULL</span>) n++;</span><br><span class="line">count(Tree-&gt;lchild);</span><br><span class="line">count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代码2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(BiTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num1,num2;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Tree-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;Tree-&gt;rchild==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//只有一个结点（当然该结点为叶子结点），返回1</span></span><br><span class="line">    <span class="comment">//否则该树结点数目大于1，继续遍历其子树</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">num1=count(Tree-&gt;lchild);</span><br><span class="line">num2=count(Tree-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num1+num2;<span class="comment">//不用+1，因为要求的是叶子结点数，第一次访问的结点因为有孩子，所以不是叶子结点，所以不用加1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h4><blockquote><p>在孩子兄弟链表示的树中求叶子结点数</p></blockquote><ul><li>分析：<blockquote><p>第三题求的是在二叉链表结构存储下的叶子结点数目，这里给的是孩子兄弟存储结构(实质上也是一种二叉链表）</p></blockquote></li><li><p>思想：</p><blockquote><p>若为空树，返回0；<br>若长子域（Tree-&gt;firstchild）为空，则无孩子，即该结点为叶子结点，计数+1，并接着遍历其兄弟域(Tree-&gt;nextsibling)<br>以上都不满足，则是第三种情况，即：该结点既有孩子又有兄弟,那就把孩子和兄弟子树都遍历下<br></p></blockquote></li><li><p>在前面的代码基础上，修改树的结构为孩子兄弟结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CSNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">CSTNode</span> *<span class="title">firstchild</span>,*<span class="title">nextsibling</span>;</span><span class="comment">//长子兄弟指针</span></span><br><span class="line">&#125;CSTNode,*CSTree;</span><br></pre></td></tr></table></figure></li></ul><p>当然，之前创建的树在这里已经不适用，需要重新创建符合要求的孩子兄弟存储结构的一棵树</p><p>代码1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tree_leafconut</span><span class="params">(CSTree Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;firstchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">k++;<span class="comment">//无孩子</span></span><br><span class="line">tree_leafcount(Tree-&gt;nextsibling);<span class="comment">//那就遍历兄弟</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//有孩子也有兄弟，都需要遍历</span></span><br><span class="line">tree-&gt;leafcount(Tree-&gt;firstchild);</span><br><span class="line">tree-&gt;leafcount(Tree-&gt;nextsibling);</span><br><span class="line">&#125;<span class="comment">//else</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//else</span></span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代码2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tree_leafcount</span><span class="params">(CS Tree)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Tree==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//空树</span></span><br><span class="line"><span class="keyword">if</span>(Tree-&gt;firstchild==<span class="literal">NULL</span>)<span class="comment">//无孩子，那就去遍历访问兄弟结点试试（如果有的话）</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+tree_leafcount(Tree-&gt;nextsibling);</span><br><span class="line"><span class="keyword">else</span><span class="comment">//此时该结点既有孩子，也有兄弟</span></span><br><span class="line"><span class="keyword">return</span> tree_leafcount(Tree-&gt;firstchild)+tree_leafcount(Tree-&gt;nextsibling);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>more，等遇到再补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;假设二叉树采用二叉链表存储结构，编写算法计算二叉树中既有左孩子又有右孩子的节点数 &lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;分析&quot;&gt;
      
    
    </summary>
    
      <category term="数据结构自学史" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%87%AA%E5%AD%A6%E5%8F%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>ch3-栈和队列-链式队列的实现</title>
    <link href="http://yoursite.com/2019/05/16/ch3-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/05/16/ch3-栈和队列-链式队列的实现/</id>
    <published>2019-05-16T14:27:29.000Z</published>
    <updated>2019-05-16T14:44:52.028Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//链表中的结点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建带头结点链式队列的函数</span></span><br><span class="line"><span class="function">QNode *<span class="title">initQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//创建一个头结点</span></span><br><span class="line">QNode *<span class="built_in">queue</span>=(QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="comment">//对头结点进行初始化</span></span><br><span class="line"><span class="built_in">queue</span>-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>;<span class="comment">//头结点后面即将连接一串结点，所以返回头结点就好啦</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据元素入链式队列函数</span></span><br><span class="line"><span class="function">QNode *<span class="title">enQueue</span><span class="params">(QNode *rear,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"><span class="comment">//1.用节点包裹入队元素</span></span><br><span class="line">QNode *enElem=(QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">enElem-&gt;data=data;</span><br><span class="line">enElem-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//2、尾插法建立新节点与rear节点之间的逻辑关系,</span></span><br><span class="line">rear-&gt;next=enElem;</span><br><span class="line"><span class="comment">//3、rear指向新节点</span></span><br><span class="line">rear=enElem;</span><br><span class="line"><span class="keyword">return</span> rear;<span class="comment">//返回队尾指针raer，因为每次入队都是从队尾处入的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链式队列出队函数</span></span><br><span class="line"><span class="function">QNode *<span class="title">DeQueue</span><span class="params">(QNode * top,QNode * rear)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top-&gt;next==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n队列为空"</span>);</span><br><span class="line"><span class="keyword">return</span> rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个指向待删除(出队)结点的指针p</span></span><br><span class="line">QNode *p=top-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;data);</span><br><span class="line">top-&gt;next=p-&gt;next;<span class="comment">//头指针指向改为出队结点后面的结点</span></span><br><span class="line"><span class="comment">//特殊情况：队列在出队后为空，则令rear=top</span></span><br><span class="line"><span class="keyword">if</span>(rear==p)&#123;</span><br><span class="line">rear=top;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QNode * <span class="built_in">queue</span>,*top,*rear;</span><br><span class="line">    <span class="built_in">queue</span>=top=rear=initQueue();<span class="comment">//创建头结点queue</span></span><br><span class="line">    <span class="comment">//向链队列中添加结点，使用尾插法添加的同时，队尾指针需要指向链表的最后一个元素</span></span><br><span class="line">    rear=enQueue(rear, <span class="number">1</span>);</span><br><span class="line">    rear=enQueue(rear, <span class="number">2</span>);</span><br><span class="line">    rear=enQueue(rear, <span class="number">3</span>);</span><br><span class="line">    rear=enQueue(rear,<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//入队完成，所有数据元素开始出队列</span></span><br><span class="line">    rear=DeQueue(top, rear);</span><br><span class="line">    rear=DeQueue(top, rear);</span><br><span class="line">    rear=DeQueue(top, rear);</span><br><span class="line">    rear=DeQueue(top, rear);</span><br><span class="line">    rear=DeQueue(top, rear);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch3-栈和队列-循环队列的实现</title>
    <link href="http://yoursite.com/2019/05/16/ch3-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/05/16/ch3-栈和队列-循环队列的实现/</id>
    <published>2019-05-16T14:26:46.000Z</published>
    <updated>2019-05-16T14:44:26.948Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现循环队列</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> front,<span class="keyword">int</span> rear,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((rear+<span class="number">1</span>)%maxsize==front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"空间已满，sorry"</span>);</span><br><span class="line"><span class="keyword">return</span> rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若当前队列未满，则执行入队操作</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"入队元素：%d\n"</span>,data);</span><br><span class="line">a[rear%maxsize]=data;<span class="comment">//若rear超过了maxsize，则直接将其从a[0]开始存储</span></span><br><span class="line"><span class="comment">//上面这句可以这样子理解：</span></span><br><span class="line"><span class="comment">//当raer&lt;maxsize时，说明rear未超过maxsize，此时按照普通顺序执行（rear%maxsize==rear）</span></span><br><span class="line"><span class="comment">//而当raer&gt;=maxsize时，说明raer超过了maxisize（能且只能超出1，所以取等号更准确，比如maxisize为5，rear指向4，则下一次rear变为5,5%5==0，于是rear从a[0]处开始存储）</span></span><br><span class="line">rear++;</span><br><span class="line"><span class="keyword">return</span> rear;<span class="comment">//入队涉及头指针rear，故返回rear</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deQueue</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> front,<span class="keyword">int</span> rear)</span></span>&#123;</span><br><span class="line"><span class="comment">//循环队列队空条件：rear==front</span></span><br><span class="line"><span class="keyword">if</span>(rear==front)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"队列为空"</span>);</span><br><span class="line"><span class="keyword">return</span> front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"出队元素，%d\n"</span>,a[front]);</span><br><span class="line">front=(front+<span class="number">1</span>)%maxsize;<span class="comment">//front不再直接 +1，而是+1后同max进行比较，如果=max，则直接跳转到 a[0]</span></span><br><span class="line"><span class="keyword">return</span> front;<span class="comment">//出队涉及头指针front，故返回front</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxsize];</span><br><span class="line"><span class="keyword">int</span> front,rear;</span><br><span class="line"><span class="comment">//设置队头指针和队尾指针，当队列中没有元素时，队头和队尾指向同一块地址</span></span><br><span class="line">rear=front=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//开始入队</span></span><br><span class="line">rear=enQueue(a,front,rear,<span class="number">1</span>);</span><br><span class="line">rear=enQueue(a,front,rear,<span class="number">2</span>);</span><br><span class="line">rear=enQueue(a,front,rear,<span class="number">3</span>);</span><br><span class="line">rear=enQueue(a,front,rear,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line">front=deQueue(a,front,rear);</span><br><span class="line"><span class="comment">//再入队</span></span><br><span class="line">    rear=enQueue(a,front,rear, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">//再出队</span></span><br><span class="line">    front=deQueue(a, front, rear);</span><br><span class="line">    <span class="comment">//再入队</span></span><br><span class="line">    rear=enQueue(a,front,rear, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//再出队</span></span><br><span class="line">    front=deQueue(a, front, rear);</span><br><span class="line">    front=deQueue(a, front, rear);</span><br><span class="line">    front=deQueue(a, front, rear);</span><br><span class="line">    front=deQueue(a, front, rear);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">入队元素：1</span><br><span class="line">入队元素：2</span><br><span class="line">入队元素：3</span><br><span class="line">入队元素：4</span><br><span class="line">出队元素，1</span><br><span class="line">入队元素：5</span><br><span class="line">出队元素，2</span><br><span class="line">入队元素：6</span><br><span class="line">出队元素，3</span><br><span class="line">出队元素，4</span><br><span class="line">出队元素，5</span><br><span class="line">出队元素，6</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch3-栈和队列-链栈的入栈与出栈操作</title>
    <link href="http://yoursite.com/2019/05/16/ch3-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-%E9%93%BE%E6%A0%88%E7%9A%84%E5%85%A5%E6%A0%88%E4%B8%8E%E5%87%BA%E6%A0%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/05/16/ch3-栈和队列-链栈的入栈与出栈操作/</id>
    <published>2019-05-16T14:26:10.000Z</published>
    <updated>2019-06-20T03:51:00.134Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//链表的的的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lineStack</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lineStack</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;lineStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈函数push，stack为当前的链栈，a表示入栈元素</span></span><br><span class="line"><span class="comment">//通常我们将链表的头部作为栈顶，尾部作为栈底,所以采用头插法</span></span><br><span class="line"><span class="comment">//stack初始为头结点</span></span><br><span class="line"><span class="function">lineStack *<span class="title">push</span><span class="params">(lineStack *<span class="built_in">stack</span>,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建存储新元素的结点</span></span><br><span class="line">lineStack *line=(lineStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(lineStack));</span><br><span class="line">line-&gt;data=a;</span><br><span class="line"><span class="comment">//创建好的结点，该建立新结点与头结点stack的逻辑关系了</span></span><br><span class="line">line-&gt;next=<span class="built_in">stack</span>;</span><br><span class="line"><span class="comment">//更新头指针的指向</span></span><br><span class="line"><span class="built_in">stack</span>=line;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;<span class="comment">//返回头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈顶元素出链栈的实现函数</span></span><br><span class="line"><span class="function">lineStack *<span class="title">pop</span><span class="params">(lineStack *<span class="built_in">stack</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//当栈不空时方可出栈</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>)&#123;</span><br><span class="line"><span class="comment">//声明一个新指针指向栈顶节点</span></span><br><span class="line">lineStack *p=<span class="built_in">stack</span>;</span><br><span class="line"><span class="comment">//更新头指针</span></span><br><span class="line"><span class="built_in">stack</span>=<span class="built_in">stack</span>-&gt;next;<span class="comment">//stack=p-&gt;next;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"出栈元素：%d\n"</span>,p-&gt;data);<span class="comment">//这里必须是p-&gt;data，不能是stack-&gt;data</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">stack</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"新栈顶元素：%d\n"</span>,<span class="built_in">stack</span>-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈已空\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"栈内无元素"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lineStack * <span class="built_in">stack</span>=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">stack</span>=push(<span class="built_in">stack</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">stack</span>=push(<span class="built_in">stack</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">stack</span>=push(<span class="built_in">stack</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">stack</span>=push(<span class="built_in">stack</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">stack</span>=pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span>=pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span>=pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span>=pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="built_in">stack</span>=pop(<span class="built_in">stack</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">出栈元素：4</span><br><span class="line">新栈顶元素：3</span><br><span class="line">出栈元素：3</span><br><span class="line">新栈顶元素：2</span><br><span class="line">出栈元素：2</span><br><span class="line">新栈顶元素：1</span><br><span class="line">出栈元素：1</span><br><span class="line">栈已空</span><br><span class="line">栈内无元素</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch3-栈和队列-顺序栈的入栈与出栈操作</title>
    <link href="http://yoursite.com/2019/05/16/ch3-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97-%E9%A1%BA%E5%BA%8F%E6%A0%88%E7%9A%84%E5%85%A5%E6%A0%88%E4%B8%8E%E5%87%BA%E6%A0%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/05/16/ch3-栈和队列-顺序栈的入栈与出栈操作/</id>
    <published>2019-05-16T14:25:22.000Z</published>
    <updated>2019-05-16T14:38:01.221Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素elem进栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> top,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">a[++top]=elem;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据元素出栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> top)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"空栈"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"弹栈元素：%d\n"</span>,a[top]);</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">-1</span>;</span><br><span class="line">    top=push(a, top, <span class="number">1</span>);</span><br><span class="line">    top=push(a, top, <span class="number">2</span>);</span><br><span class="line">    top=push(a, top, <span class="number">3</span>);</span><br><span class="line">    top=push(a, top, <span class="number">4</span>);</span><br><span class="line">    top=pop(a, top);</span><br><span class="line">    top=pop(a, top);</span><br><span class="line">    top=pop(a, top);</span><br><span class="line">    top=pop(a, top);</span><br><span class="line">    top=pop(a, top);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">弹栈元素：4</span><br><span class="line">弹栈元素：3</span><br><span class="line">弹栈元素：2</span><br><span class="line">弹栈元素：1</span><br><span class="line">空栈</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>回归分析作业题</title>
    <link href="http://yoursite.com/2019/05/05/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A%E9%A2%98/"/>
    <id>http://yoursite.com/2019/05/05/回归分析作业题/</id>
    <published>2019-05-05T10:03:23.000Z</published>
    <updated>2019-05-05T10:06:12.752Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt=""> <br><br><img src="2.jpg" alt=""> <br><br><img src="3.jpg" alt=""> <br><br><img src="4.jpg" alt=""> <br><br><img src="5.jpg" alt=""> <br><br><img src="6.jpg" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img 
      
    
    </summary>
    
      <category term="回归分析" scheme="http://yoursite.com/categories/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>多元回归分析知识点总结</title>
    <link href="http://yoursite.com/2019/05/05/%E5%A4%9A%E5%85%83%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/05/05/多元回归分析知识点总结/</id>
    <published>2019-05-05T10:00:15.000Z</published>
    <updated>2019-05-05T10:02:25.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt=""> <br><br><img src="2.jpg" alt=""> <br><br><img src="3.jpg" alt=""> <br><br><img src="4.jpg" alt=""> <br><br><img src="5.jpg" alt=""> <br><br><img src="6.jpg" alt=""> <br><br><img src="7.jpg" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;3.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;4.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img 
      
    
    </summary>
    
      <category term="回归分析" scheme="http://yoursite.com/categories/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>最小二乘估计的性质</title>
    <link href="http://yoursite.com/2019/03/30/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E4%BC%B0%E8%AE%A1%E7%9A%84%E6%80%A7%E8%B4%A8/"/>
    <id>http://yoursite.com/2019/03/30/最小二乘估计的性质/</id>
    <published>2019-03-30T13:58:28.000Z</published>
    <updated>2019-04-15T15:01:21.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt=""> <br><br><img src="2.jpg" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;br&gt;&lt;img src=&quot;2.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="回归分析" scheme="http://yoursite.com/categories/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>ch2-线性表-链表的插入，删除，查找及更新操作</title>
    <link href="http://yoursite.com/2019/03/30/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%EF%BC%8C%E5%88%A0%E9%99%A4%EF%BC%8C%E6%9F%A5%E6%89%BE%E5%8F%8A%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/03/30/ch2-线性表-链表的插入，删除，查找及更新操作/</id>
    <published>2019-03-30T13:54:49.000Z</published>
    <updated>2019-03-30T13:57:07.660Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//链表插入的函数，p是链表，elem是插入的结点的数据域，add是插入的位置</span></span><br><span class="line"><span class="function">link * <span class="title">insertElem</span><span class="params">(link * p,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="comment">//删除结点的函数，p代表操作链表，add代表删除节点的位置</span></span><br><span class="line"><span class="function">link * <span class="title">delElem</span><span class="params">(link * p,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="comment">//查找结点的函数，elem为目标结点的数据域的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectElem</span><span class="params">(link * p,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="comment">//更新结点的函数，newElem为新的数据域的值</span></span><br><span class="line"><span class="function">link *<span class="title">amendElem</span><span class="params">(link * p,<span class="keyword">int</span> add,<span class="keyword">int</span> newElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化链表（1，2，3，4）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表为：\n"</span>);</span><br><span class="line">    link *p=initLink();</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"在第4的位置插入元素5：\n"</span>);</span><br><span class="line">    p=insertElem(p, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除元素3:\n"</span>);</span><br><span class="line">    p=delElem(p, <span class="number">3</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"查找元素2的位置为：\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> address=selectElem(p, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (address==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"没有该元素"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"元素2的位置为：%d\n"</span>,address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"更改第3的位置上的数据为7:\n"</span>);</span><br><span class="line">    p=amendElem(p, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link * p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建一个头结点</span></span><br><span class="line">    link * temp=p;<span class="comment">//声明一个指针指向头结点，用于遍历链表</span></span><br><span class="line">    <span class="comment">//生成链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">        a-&gt;elem=i;</span><br><span class="line">        a-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        temp-&gt;next=a;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入元素函数，p为链表，elem为待插入的元素值，add为要插入的位置（从1开始）</span></span><br><span class="line"><span class="function">link * <span class="title">insertElem</span><span class="params">(link * p,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line"><span class="comment">//上来二话不说先搞个工作指针出来,并初始指向头结点</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="comment">//首先得来到待插入位置的前一个元素的位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;add;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入失败\n"</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//temp不是NULL时，工作指针temp就开始向前推进了</span></span><br><span class="line"><span class="comment">//并且根据for循环设定的次数，temp最终会来到待插入位置的前一个位置</span></span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;<span class="comment">//关于这个for循环更详细的解释：当i=1时，temp可以到达头结点后面的第一个结点位置；</span></span><br><span class="line"><span class="comment">//当i=2时，temp可以到达第二个结点位置</span></span><br><span class="line"><span class="comment">//一直下去...</span></span><br><span class="line"><span class="comment">//当i=add-1时，temp到达第add-1个结点位置，这正是我们的目标位置！</span></span><br><span class="line"><span class="comment">//当i=add时，就退出循环了，不执行</span></span><br><span class="line"><span class="comment">//***************//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在，应该准备造一个结点出来了</span></span><br><span class="line">link *c=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">c-&gt;elem=elem;</span><br><span class="line"><span class="comment">//造好了结点，接下来就把它插入到add位置处</span></span><br><span class="line"><span class="comment">//此时我们的工作指针已经在add-1处等候多时了</span></span><br><span class="line">c-&gt;next=temp-&gt;next;</span><br><span class="line">temp-&gt;next=c;</span><br><span class="line"><span class="comment">//temp=c;//不必了，这又不是建立链表</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除链表中add（从1开始计数）处的结点</span></span><br><span class="line"><span class="function">link * <span class="title">delElem</span><span class="params">(link * p,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line"><span class="comment">//同样也先搞个工作指针出来并且初始指向头结点</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="comment">//然后同理，让工作指针temp来到待删除结点的前一个结点所在位置处</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;add;++i)&#123;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;<span class="comment">//理解和前面一样：当i=1时，temp可以到达头结点后面的第一个结点位置；</span></span><br><span class="line"><span class="comment">//当i=2时，temp可以到达第二个结点位置</span></span><br><span class="line"><span class="comment">//一直下去...</span></span><br><span class="line"><span class="comment">//当i=add-1时，temp到达第add-1个结点位置，这正是我们的目标位置！</span></span><br><span class="line"><span class="comment">//当i=add时，就退出循环了，不执行</span></span><br><span class="line"><span class="comment">//***************//</span></span><br><span class="line"><span class="comment">//现在可以进行删除操作了</span></span><br><span class="line">link *q=temp-&gt;next;<span class="comment">//q保存了待删除的结点,以便于回收内存；因为下面的操作仅仅是断开了q结点与链表p的链接关系，q结点索然已无用，但仍然存在于内存，所以最后要释放掉</span></span><br><span class="line"><span class="comment">//开始删除啦</span></span><br><span class="line">temp-&gt;next=temp-&gt;next-&gt;next;<span class="comment">//temp-&gt;next=q-&gt;next;</span></span><br><span class="line"><span class="comment">////手动释放该结点，防止内存泄漏</span></span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找某一指定元素elem在链表中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">selectElem</span><span class="params">(link * p,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line"><span class="comment">//还是先搞个工作指针出来并初始指向头结点</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="comment">//开始遍历链表进行查找</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//i用来计数，即标明第几个位置</span></span><br><span class="line"><span class="keyword">while</span>(temp-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">temp=temp-&gt;next;<span class="comment">//i=1时，temp到达头结点之后的第一个结点；i=2，temp到达第二个结点；i=p-&gt;length时，temp来到第p-&gt;length个结点（最后一个结点）</span></span><br><span class="line"><span class="keyword">if</span>(temp-&gt;elem==elem) <span class="keyword">return</span> i;<span class="comment">//找到则返回其位置</span></span><br><span class="line">i++;<span class="comment">//每当运行至此，说明当前结点的元素值不等于elem，那么位置计数器i就自增1，开启下一次循环（if循环条件仍然满足的话）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//程序运行到这里说明查找失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新函数，其中，add 表示更改结点在链表中的位置，newElem 为新的数据域的值</span></span><br><span class="line"><span class="function">link *<span class="title">amendElem</span><span class="params">(link * p,<span class="keyword">int</span> add,<span class="keyword">int</span> newElem)</span></span>&#123;</span><br><span class="line">    link * temp=p;</span><br><span class="line">    temp=temp-&gt;next;<span class="comment">//tamp指向首元结点</span></span><br><span class="line">    <span class="comment">////遍历到被删除结点,temp指向被删除结点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;add; i++) &#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;elem=newElem;<span class="comment">//替换元素值</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">    link* temp=p;<span class="comment">//将temp指针重新指向头结点</span></span><br><span class="line">    <span class="comment">//只要temp指针指向的结点的next不是Null，就执行输出语句。</span></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,temp-&gt;elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch2_线性表_双链表的初始化</title>
    <link href="http://yoursite.com/2019/03/05/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/05/ch2-线性表-双链表的初始化/</id>
    <published>2019-03-05T14:02:49.000Z</published>
    <updated>2019-03-05T14:04:38.839Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//节点结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">line</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">line</span> * <span class="title">prior</span>;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">line</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;line;</span><br><span class="line"><span class="comment">//双链表的创建函数</span></span><br><span class="line"><span class="function">line* <span class="title">initLine</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//输出双链表的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(line * head)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用链表创建函数</span></span><br><span class="line">    line *head=initLine();</span><br><span class="line">    <span class="comment">//输出创建好的链表</span></span><br><span class="line">    display(head);</span><br><span class="line">    <span class="comment">//显示双链表的前驱关系</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"链表中第 4 个节点的直接前驱是：%d"</span>,head-&gt;next-&gt;next-&gt;next-&gt;next-&gt;prior-&gt;data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//带头结点的双链表的初始化</span></span><br><span class="line"><span class="function">line* <span class="title">initLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">line *head=(line*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line));<span class="comment">//搞了个头结点</span></span><br><span class="line">head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">head-&gt;prior=<span class="literal">NULL</span>;<span class="comment">//头结点初始状态置空</span></span><br><span class="line">line *h=head;<span class="comment">//h是工作指针，用于遍历赋值+连接操作</span></span><br><span class="line"><span class="comment">//开始赋值并连接各个新结点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="comment">//首先搞一个结点body出来，为连接提供原料</span></span><br><span class="line">line *body=(line*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(line));</span><br><span class="line"><span class="comment">//把刚刚造出来的结点初始化</span></span><br><span class="line">body-&gt;data=i;</span><br><span class="line">body-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">body-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//开始连接双链表</span></span><br><span class="line">h-&gt;next=body;</span><br><span class="line">body-&gt;prior=h;</span><br><span class="line">h=h-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;<span class="comment">//返回头结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(line * head)</span></span>&#123;</span><br><span class="line">    line * temp=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        <span class="comment">//如果该节点无后继节点，说明此节点是链表的最后一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (temp-&gt;next==<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,temp-&gt;data);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d &lt;-&gt; "</span>,temp-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5</span><br><span class="line">链表中第 4 个节点的直接前驱是：3</span><br></pre></td></tr></table></figure></p><p>说明：在原作者所写教程<a href="http://data.biancheng.net/view/166.html" target="_blank" rel="noopener">http://data.biancheng.net/view/166.html</a><br>中，构造的是不含头结点的双链表，并且函数initLine中有一个参数。为了方便阅读，我直接去掉了该参数并将之写入initLine函数体中，并且改成了含有头结点的双链表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch2_线性表_链表的增删改查</title>
    <link href="http://yoursite.com/2019/03/05/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://yoursite.com/2019/03/05/ch2-线性表-链表的增删改查/</id>
    <published>2019-03-05T14:00:06.000Z</published>
    <updated>2019-03-05T14:01:37.780Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//链表插入的函数，p是链表，elem是插入的结点的数据域，add是插入的位置</span></span><br><span class="line"><span class="function">link * <span class="title">insertElem</span><span class="params">(link * p,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="comment">//删除结点的函数，p代表操作链表，add代表删除节点的位置</span></span><br><span class="line"><span class="function">link * <span class="title">delElem</span><span class="params">(link * p,<span class="keyword">int</span> add)</span></span>;</span><br><span class="line"><span class="comment">//查找结点的函数，elem为目标结点的数据域的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchElem</span><span class="params">(link * p,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="comment">//更新结点的函数，newElem为新的数据域的值</span></span><br><span class="line"><span class="function">link *<span class="title">amendElem</span><span class="params">(link * p,<span class="keyword">int</span> add,<span class="keyword">int</span> newElem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化链表（1，2，3，4）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表为：\n"</span>);</span><br><span class="line">    link *p=initLink();</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"在第4的位置插入元素5：\n"</span>);</span><br><span class="line">    p=insertElem(p, <span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"删除元素3:\n"</span>);</span><br><span class="line">    p=delElem(p, <span class="number">3</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"查找元素2的位置为：\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> address=searchElem(p, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (address==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"没有该元素"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"元素2的位置为：%d\n"</span>,address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"更改第3的位置上的数据为7:\n"</span>);</span><br><span class="line">    p=amendElem(p, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">    display(p);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link * p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建一个头结点</span></span><br><span class="line">    link * temp=p;<span class="comment">//声明一个指针指向头结点，用于遍历链表</span></span><br><span class="line">    <span class="comment">//生成链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//a在每次循环中是变化的</span></span><br><span class="line">        a-&gt;elem=i;</span><br><span class="line">        a-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        temp-&gt;next=a;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//p是已经创建好的链表，add是待插入的位置，elem是元素值</span></span><br><span class="line"><span class="function">link * <span class="title">insertElem</span><span class="params">(link * p,<span class="keyword">int</span> elem,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">link *temp=p;<span class="comment">//创建一个工作指针</span></span><br><span class="line"><span class="comment">//找到插入位置的前一个位置，并用temp指向它</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;add<span class="number">-1</span>;i++)&#123;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始准备一个插入结点</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">a-&gt;elem=elem;</span><br><span class="line">a-&gt;next=temp-&gt;next;</span><br><span class="line">temp-&gt;next=a;<span class="comment">//至此插入完毕</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//add是待删除的结点的位置（第几个，从1开始，不是下标）</span></span><br><span class="line"><span class="function">link * <span class="title">delElem</span><span class="params">(link * p,<span class="keyword">int</span> add)</span></span>&#123;</span><br><span class="line">link *temp=p;<span class="comment">//创建一个工作指针指向p，即头结点</span></span><br><span class="line"><span class="comment">//来到待删除位置的前驱位置</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;add<span class="number">-1</span>;i++)&#123;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把待删除结点用q指向</span></span><br><span class="line">link *q;</span><br><span class="line">q=temp-&gt;next;</span><br><span class="line">temp-&gt;next=q-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchElem</span><span class="params">(link * p,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">link *temp=p-&gt;next;<span class="comment">//temp指向首元结点，因为含有头结点</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(temp)&#123;</span><br><span class="line"><span class="keyword">if</span> (temp-&gt;elem==elem)&#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//若程序能运行到此处，说明查找失败</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add是待更新位置</span></span><br><span class="line"><span class="function">link *<span class="title">amendElem</span><span class="params">(link * p,<span class="keyword">int</span> add,<span class="keyword">int</span> newElem)</span></span>&#123;</span><br><span class="line">link *temp=p;<span class="comment">//设置一个工作指针，初始指向头结点</span></span><br><span class="line"><span class="comment">//循环来到add处</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;add;i++)&#123;</span><br><span class="line">temp=temp-&gt;next;</span><br><span class="line">&#125;<span class="comment">//到add处啦</span></span><br><span class="line">temp-&gt;elem=newElem;<span class="comment">//开始更新</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">    link* temp=p;<span class="comment">//将temp指针重新指向头结点</span></span><br><span class="line">    <span class="comment">//只要temp指针指向的结点的next不是Null，就执行输出语句。</span></span><br><span class="line">    <span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">        temp=temp-&gt;next;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,temp-&gt;elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始化链表为：</span><br><span class="line">1 2 3 4 </span><br><span class="line">在第4的位置插入元素5：</span><br><span class="line">1 2 3 5 4 </span><br><span class="line">删除元素3:</span><br><span class="line">1 2 5 4 </span><br><span class="line">查找元素2的位置为：</span><br><span class="line">元素2的位置为：2</span><br><span class="line">更改第3的位置上的数据为7:</span><br><span class="line">1 2 7 4</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>普通最小二乘法的推导</title>
    <link href="http://yoursite.com/2019/03/05/%E6%99%AE%E9%80%9A%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E7%9A%84%E6%8E%A8%E5%AF%BC/"/>
    <id>http://yoursite.com/2019/03/05/普通最小二乘法的推导/</id>
    <published>2019-03-05T04:47:04.000Z</published>
    <updated>2019-04-15T15:00:29.944Z</updated>
    
    <content type="html"><![CDATA[<p><img src="1.jpg" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;1.jpg&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="回归分析" scheme="http://yoursite.com/categories/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    
    
      <category term="回归" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>ch2-线性表-链表及其初始化_有头结点和无头结点的初始化过程的区别</title>
    <link href="http://yoursite.com/2019/03/01/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96-%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9%E5%92%8C%E6%97%A0%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/03/01/ch2-线性表-链表及其初始化-有头结点和无头结点的初始化过程的区别/</id>
    <published>2019-03-01T05:07:30.000Z</published>
    <updated>2019-03-01T06:02:30.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不含头结点"><a href="#不含头结点" class="headerlink" title="不含头结点"></a>不含头结点</h3><p>对于<code>不含头结点</code>的链表，在进行初始化时，<br><br>首先为首元结点申请内存并赋值:<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">link *temp=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">temp-elem=<span class="number">1</span>;</span><br><span class="line">tem-&gt;next=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><p>接着弄一个头指针指向首元结点temp:<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link *p=temp;</span><br></pre></td></tr></table></figure></p><p>然后就可以遍历进行赋值了：<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">a-&gt;elem=i;</span><br><span class="line">temp-&gt;next=a;<span class="comment">//将其连接到首元结点后面</span></span><br><span class="line">temp=a;<span class="comment">//准备迎接下一个结点的到来</span></span><br></pre></td></tr></table></figure></p><p>最后返回头指针p<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure></p><p>此时的p后面已经串好了许多结点，这样就完成了不含头结点的链表的初始化.<br></p><h3 id="含头结点"><a href="#含头结点" class="headerlink" title="含头结点"></a>含头结点</h3><p>与上面（不含头结点）的区别如下：<br>1.刚开始只需为头结点申请一片内存即可，无需赋值，因为头结点不存储元素的信息<br><br>2.创建的头指针指向头结点，不指向首元结点<br><br>3.在展示初始化之后的元素(即display函数)时，从第二个位置开始打印元素的elem值,而不是像不含头结点的时候从第一个位置开始打印元素的elem值</p><p>不管含有头结点还是不含头结点，定义的头指针总是指向链表中第一个位置处的结点<br><br>在进行遍历时可以用头指针进行，也可以用头结点开始进行，因为头指针指向头结点，所以，下面的方法都是可以的：<br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不含头结点，用p遍历，返回f</span></span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    link * f = (link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建首元节点</span></span><br><span class="line">    <span class="comment">//首元节点先初始化</span></span><br><span class="line">    f-&gt;elem = <span class="number">1</span>;</span><br><span class="line">    f-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    link *p = f;<span class="comment">//头指针指向首元节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        link *temp=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">        temp-&gt;elem=i;</span><br><span class="line">        temp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;next=temp;</span><br><span class="line">        p=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不含头结点，用f遍历，返回p</span></span><br><span class="line"><span class="function">link * <span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line">    link * f = (link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));<span class="comment">//创建首元节点</span></span><br><span class="line">    <span class="comment">//首元节点先初始化</span></span><br><span class="line">    f-&gt;elem = <span class="number">1</span>;</span><br><span class="line">    f-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    link *p = f;<span class="comment">//头指针指向首元节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        link *temp=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">        temp-&gt;elem=i;</span><br><span class="line">        temp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        f-&gt;next=temp;</span><br><span class="line">        f=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含头结点，用头指针temp遍历，返回头结点p</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先搞个头结点粗来</span></span><br><span class="line">link *p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//再弄个工作指针，初始指向头结点p</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line"><span class="comment">//想初始化，得有原料，那就是一个一个的节点，现在还没有节点，那先搞一个粗来</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//光有空壳不够，该赋值了(对link结构体中的elem赋值)</span></span><br><span class="line">a-&gt;elem=i;</span><br><span class="line"><span class="comment">//有了原料节点，就用一根绳子把它们串起来（对link结构体中的next指针赋地址值）</span></span><br><span class="line">temp-&gt;next=a;<span class="comment">//串起来啦</span></span><br><span class="line">temp=a;<span class="comment">//工作指针temp后移，准备迎接下一个节点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//为了颜值和正义而生</span></span><br><span class="line"><span class="comment">//串完之后，原来的头结点p身后就有了一大堆节点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//return试试看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不含头结点，用头结点p遍历，返回头指针temp（temp指向刚开始的头结点）</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先搞个头结点粗来</span></span><br><span class="line">link *p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//再弄个工作指针，初始指向头结点p</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line"><span class="comment">//想初始化，得有原料，那就是一个一个的节点，现在还没有节点，那先搞一个粗来</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//光有空壳不够，该赋值了(对link结构体中的elem赋值)</span></span><br><span class="line">a-&gt;elem=i;</span><br><span class="line"><span class="comment">//有了原料节点，就用一根绳子把它们串起来（对link结构体中的next指针赋地址值）</span></span><br><span class="line">p-&gt;next=a;<span class="comment">//串起来啦</span></span><br><span class="line">p=a;<span class="comment">//工作指针temp后移，准备迎接下一个节点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//为了颜值和正义而生</span></span><br><span class="line"><span class="comment">//串完之后，原来的头结点p身后就有了一大堆节点</span></span><br><span class="line"><span class="keyword">return</span> temp;<span class="comment">//return试试看</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：一般都是用指针进行遍历，返回头结点<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;不含头结点&quot;&gt;&lt;a href=&quot;#不含头结点&quot; class=&quot;headerlink&quot; title=&quot;不含头结点&quot;&gt;&lt;/a&gt;不含头结点&lt;/h3&gt;&lt;p&gt;对于&lt;code&gt;不含头结点&lt;/code&gt;的链表，在进行初始化时，&lt;br&gt;&lt;br&gt;首先为首元结点申请内存并赋值:&lt;br
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch2_线性表_链表及其初始化_不含头结点</title>
    <link href="http://yoursite.com/2019/03/01/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96-%E4%B8%8D%E5%90%AB%E5%A4%B4%E7%BB%93%E7%82%B9/"/>
    <id>http://yoursite.com/2019/03/01/ch2-线性表-链表及其初始化-不含头结点/</id>
    <published>2019-03-01T05:02:01.000Z</published>
    <updated>2019-03-01T05:06:24.374Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不含头结点的链表的初始化函数</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个首元结点（申请内存地址+赋值）</span></span><br><span class="line">link *temp=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">temp-&gt;elem=<span class="number">1</span>;</span><br><span class="line">temp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//再初始化一个头指针指向首元结点</span></span><br><span class="line">link *p=temp;</span><br><span class="line"><span class="comment">//开始遍历进行链表的初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line">a-&gt;elem=i;</span><br><span class="line">temp-&gt;next=a;<span class="comment">//将其连接到首元结点后面</span></span><br><span class="line">temp=a;<span class="comment">//准备迎接下一个结点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;elem);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">link *p;</span><br><span class="line">p=initLink();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"初始化链表元素为："</span>);</span><br><span class="line">display(p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>ch2_线性表_链表及其初始化</title>
    <link href="http://yoursite.com/2019/03/01/ch2-%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8%E5%8F%8A%E5%85%B6%E5%88%9D%E5%A7%8B%E5%8C%96_%E5%90%AB%E6%9C%89%E5%A4%B4%E7%BB%93%E7%82%B9/"/>
    <id>http://yoursite.com/2019/03/01/ch2-线性表-链表及其初始化_含有头结点/</id>
    <published>2019-03-01T04:13:51.000Z</published>
    <updated>2019-03-01T04:18:24.794Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//链表的结构体定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Link</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;link;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表初始化函数</span></span><br><span class="line"><span class="function">link *<span class="title">initLink</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//先搞个头结点粗来</span></span><br><span class="line">link *p=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//再弄个工作指针，初始指向头结点p</span></span><br><span class="line">link *temp=p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;++i)&#123;</span><br><span class="line"><span class="comment">//想初始化，得有原料，那就是一个一个的节点，现在还没有节点，那先搞一个粗来</span></span><br><span class="line">link *a=(link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(link));</span><br><span class="line"><span class="comment">//光有空壳不够，该赋值了(对link结构体中的elem赋值)</span></span><br><span class="line">a-&gt;elem=i;</span><br><span class="line"><span class="comment">//有了原料节点，就用一根绳子把它们串起来（对link结构体中的next指针赋地址值）</span></span><br><span class="line">temp-&gt;next=a;<span class="comment">//串起来啦</span></span><br><span class="line">temp=a;<span class="comment">//工作指针temp后移，准备迎接下一个节点的到来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);<span class="comment">//为了颜值和正义而生</span></span><br><span class="line"><span class="comment">//串完之后，原来的头结点p身后就有了一大堆节点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//return试试看</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印初始化好的链表元素函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(link *p)</span></span>&#123;</span><br><span class="line">link *x=p;<span class="comment">//x初始指向头结点</span></span><br><span class="line"><span class="keyword">while</span>(x-&gt;next)&#123;</span><br><span class="line">x=x-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,x-&gt;elem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//初始化链表（1，2，3，4）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"初始化链表为：\n"</span>);</span><br><span class="line">    link *p=initLink();</span><br><span class="line">    display(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结构与算法的上机代码实现" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
</feed>

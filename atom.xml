<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个大学狗的日常</title>
  
  <subtitle>放弃不难，但坚持一定很酷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-06T06:18:13.102Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凡希</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>约瑟夫环问题--丢手绢</title>
    <link href="http://yoursite.com/2020/02/06/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98-%E4%B8%A2%E6%89%8B%E7%BB%A2/"/>
    <id>http://yoursite.com/2020/02/06/约瑟夫环问题-丢手绢/</id>
    <published>2020-02-06T06:13:05.000Z</published>
    <updated>2020-02-06T06:18:13.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是，给定了和，一开始要站在什么地方才能避免被处决？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。 <br></p></blockquote><blockquote><p>17世纪的法国数学家加斯帕在《数目的游戏问题》中讲了这样一个故事：15个教徒和15 个非教徒在深海上遇险，必须将一半的人投入海中，其余的人才能幸免于难，于是想了一个办法：30个人围成一圆圈，从第一个人开始依次报数，每数到第九个人就将他扔入大海，如此循环进行直到仅余15个人为止。问怎样排法，才能使每次投入大海的都是非教徒。<br></p></blockquote><h3 id="代码解决"><a href="#代码解决" class="headerlink" title="代码解决"></a>代码解决</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">list</span> *L = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));       <span class="comment">//头结点</span></span><br><span class="line">        L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n, k, i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);<span class="comment">//n：总人数；k：报数为为k者淘汰</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> *s, *q = L;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i)                                                     <span class="comment">//赋初值</span></span><br><span class="line">        &#123;</span><br><span class="line">                s = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">                s-&gt;data = i+<span class="number">1</span>;</span><br><span class="line">                s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                q-&gt;next = s;</span><br><span class="line">                q = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q-&gt;next = L-&gt;next;                                                      <span class="comment">//让尾结点指向头结点的下一个，即第一个人的位置，单向循环链表创建完成</span></span><br><span class="line">        q = L-&gt;next;    <span class="comment">//让q指向头结点的下一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心代码部分</span></span><br><span class="line">        <span class="keyword">while</span> (q-&gt;next != q)                                            <span class="comment">//只剩一个元素时，退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//令q指向删除节点的前驱结点</span></span><br><span class="line">                <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;k<span class="number">-1</span>; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                        q = q-&gt;next;</span><br><span class="line">                &#125;          </span><br><span class="line">                 s = q-&gt;next;                                                    <span class="comment">//s指向删除节点</span></span><br><span class="line">                q-&gt;next = s-&gt;next;                                              <span class="comment">//将去除s后的链表重新连接起来</span></span><br><span class="line">                q = q-&gt;next;                                                    <span class="comment">//让q指向下次循环的起始位置</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, s-&gt;data);</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">                s = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"%d\n"</span>, q-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(L);</span><br><span class="line">        L = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Jo
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数字黑洞[本地编译通过，OJ未通过]</title>
    <link href="http://yoursite.com/2020/01/31/%E6%95%B0%E5%AD%97%E9%BB%91%E6%B4%9E-%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91%E9%80%9A%E8%BF%87%EF%BC%8COJ%E6%9C%AA%E9%80%9A%E8%BF%87/"/>
    <id>http://yoursite.com/2020/01/31/数字黑洞-本地编译通过，OJ未通过/</id>
    <published>2020-01-31T14:53:00.000Z</published>
    <updated>2020-01-31T14:57:44.413Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1019 数字黑洞 (20分)</span><br><span class="line">给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</span><br><span class="line"></span><br><span class="line">例如，我们从6767开始，将得到</span><br><span class="line"></span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</span><br><span class="line"></span><br><span class="line">输入格式：</span><br><span class="line">输入给出一个正整数 N。</span><br><span class="line"></span><br><span class="line">输出格式：</span><br><span class="line">如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。</span><br><span class="line"></span><br><span class="line">输入样例 1：</span><br><span class="line">6767</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 1：</span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输入样例 2：</span><br><span class="line">2222</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 2：</span><br><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure><p>我写的辣鸡代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h2l</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//选择排序，由大到小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[j]&gt;arr[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">int</span> temp;</span><br><span class="line">                                temp=arr[i];</span><br><span class="line">                                arr[i]=arr[j];</span><br><span class="line">                                arr[j]=temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">l2h</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//选择排序，由小到大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> arr[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">arr[i]=str[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> high=h2l(arr);<span class="comment">//非递增排列</span></span><br><span class="line"><span class="keyword">int</span> low=l2h(arr);<span class="comment">//非递减排列,注意前面有0被去掉</span></span><br><span class="line"><span class="keyword">if</span>(high==low)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-%d=0000"</span>,high,low);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>((high-low)!=<span class="number">6174</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c=high-low;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;aa[<span class="number">2</span>]=<span class="number">0</span>;aa[<span class="number">3</span>]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">2</span>]=c/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=c%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">1</span>]=c/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=(c%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=(c%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=c/<span class="number">1000</span>;</span><br><span class="line">aa[<span class="number">1</span>]=(c%<span class="number">1000</span>)/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">high=h2l(aa);</span><br><span class="line">low=l2h(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line">        <span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">                &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"6174"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据链路层</title>
    <link href="http://yoursite.com/2020/01/30/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/30/数据链路层/</id>
    <published>2020-01-30T11:45:03.000Z</published>
    <updated>2020-01-30T12:41:52.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h3><p>结点：主机，路由器<br></p><p>链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路和无线链路<br></p><p>数据链路：网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路<br></p><p>帧：链路层的协议数据单元，封装网络层数据报<br></p><blockquote><p>数据链路层负责通过一条链路从一个加到向另一个物理链路直接相连的相邻结点传送数据报<br></p></blockquote><h3 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h3><p>数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传送到相邻结点的目标机网络层。其主要作用是<code>加强物理层传送原始比特流的功能</code>，将物理层提供的可能出错的物理连接改造为<code>逻辑上无差错的数据链路</code>，使之对网络层表现为一条无差错的链路。<br></p><blockquote><p>功能一：为网络层提供服务。无确认无连接服务，有确认无连接服务，有确认面向连接服务(tip:有链连接一定有确认)<br><br>功能二：链路管理，即连接的建立，维持，释放(用于面向连接的服务)<br><br>功能三：组帧<br><br>功能四：流量控制(限制发送方)<br><br>功能五：差错控制（帧错/位错）<br></p></blockquote><h3 id="封装成帧与透明传输"><a href="#封装成帧与透明传输" class="headerlink" title="封装成帧与透明传输"></a>封装成帧与透明传输</h3><p><img src="1.png" alt=""> <br><br><code>透明传输</code>是指不管所传数据时什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西<br><br>当所传数据的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息（例如下面的字符填充法中那样），这样才能保证数据链路层的传输是透明的。<br><br><img src="2.png" alt=""> <br><br><img src="3.png" alt=""> <br><br><img src="4.png" alt=""> <br><br><img src="5.png" alt=""> <br><br><img src="6.png" alt=""> <br></p><p>总结：由于字节计数法中count字段的脆弱性(其值若有差错将导致灾难性后果)以及字符填充法实现上的复杂性和不兼容性，目前较普遍使用的帧同步法时比特填充和违规编码法<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据链路层基本概念&quot;&gt;&lt;a href=&quot;#数据链路层基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据链路层基本概念&quot;&gt;&lt;/a&gt;数据链路层基本概念&lt;/h3&gt;&lt;p&gt;结点：主机，路由器&lt;br&gt;&lt;/p&gt;
&lt;p&gt;链路：网络中两个结点之间的物理通道，链路的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符数组</title>
    <link href="http://yoursite.com/2020/01/30/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/01/30/字符数组/</id>
    <published>2020-01-30T06:47:33.000Z</published>
    <updated>2020-01-30T07:46:42.703Z</updated>
    
    <content type="html"><![CDATA[<pre><font color="#5FD7FF">#include </font><font color="#AD7FA8">&lt;stdio.h&gt;</font><font color="#5FD7FF">#include </font><font color="#AD7FA8">&lt;string.h&gt;</font><font color="#87FFAF">int</font> main(){        <font color="#34E2E2">//strlen()用法</font>        <font color="#87FFAF">char</font> a[<font color="#AD7FA8">4</font>]=<font color="#AD7FA8">&quot;abc&quot;</font>;<font color="#34E2E2">//这里必须是</font><font color="#AD7FA8">4</font><font color="#34E2E2">，因为还有个‘</font><font color="#AD7FA8">0</font><font color="#34E2E2">’，否则打印时最后会乱码</font>        <font color="#87FFAF">int</font> len=strlen(a);        printf(<font color="#AD7FA8">&quot;a[]=</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,a);        printf(<font color="#AD7FA8">&quot;strlen(a)=</font><font color="#FFD7D7">%d\n</font><font color="#AD7FA8">&quot;</font>,len);        <font color="#34E2E2">//strcat()用法</font>        <font color="#87FFAF">char</font> str1[<font color="#AD7FA8">15</font>]=<font color="#AD7FA8">&quot;I am &quot;</font>;        <font color="#87FFAF">char</font> str2[]=<font color="#AD7FA8">&quot;student&quot;</font>;        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,strcat(str1,str2));        <font color="#34E2E2">//以上程序将str2连接到str1后面，所以str1的长度应足够大，否则报错</font>        <font color="#34E2E2">//strcpy()用法</font>        <font color="#87FFAF">char</font> s1[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;aaaaaaaaaa&quot;</font>,s2[]=<font color="#AD7FA8">&quot;bbb&quot;</font>;        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,strcpy(s1,s2));        printf(<font color="#AD7FA8">&quot;strlen(s1)=</font><font color="#FFD7D7">%ld\n</font><font color="#AD7FA8">&quot;</font>,strlen(s1));        <font color="#34E2E2">//strcmp()用法，按ascii码比大小</font>        <font color="#87FFAF">char</font> str[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;U.S.A&quot;</font>,temp[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;China&quot;</font>;        <font color="#87FFAF">int</font> x=strcmp(str,temp);        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%d\n</font><font color="#AD7FA8">&quot;</font>,x);        <font color="#34E2E2">//strlwr()：大写字母--&gt;小写字母</font>        <font color="#34E2E2">//strupr()：小写字母--&gt;大写字母</font>}</pre><p>输出结果：<br></p><pre>a[]=abcstrlen(a)=3I am studentbbbstrlen(s1)=318</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;font color=&quot;#5FD7FF&quot;&gt;#include &lt;/font&gt;&lt;font color=&quot;#AD7FA8&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/font&gt;
&lt;font color=&quot;#5FD7FF&quot;&gt;#include &lt;/font&gt;&lt;font color=&quot;#
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>使用keras进行手写数字识别</title>
    <link href="http://yoursite.com/2020/01/29/%E4%BD%BF%E7%94%A8keras%E8%BF%9B%E8%A1%8C%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2020/01/29/使用keras进行手写数字识别/</id>
    <published>2020-01-29T13:20:58.000Z</published>
    <updated>2020-01-29T13:36:39.322Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"><span class="comment">#载入数据</span></span><br><span class="line">(x_train,y_train),(x_test,y_test)=mnist.load_data()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'x_shape'</span>,x_train.shape)<span class="comment">#(60000,28,28)</span></span><br><span class="line">print(<span class="string">'y_shape:'</span>,y_train.shape)<span class="comment">#(6000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(60000,28,28)--&gt;(60000,784)</span></span><br><span class="line">x_train=x_train.reshape(x_train.shape[<span class="number">0</span>],<span class="number">-1</span>)/<span class="number">255.0</span><span class="comment">#除以255是做归一化，下同</span></span><br><span class="line">x_test=x_test.reshape(x_test.shape[<span class="number">0</span>],<span class="number">-1</span>)/<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#换one hot格式(独热编码)</span></span><br><span class="line">y_train=to_categorical(y_train,num_classes=<span class="number">10</span>)</span><br><span class="line">y_test=to_categorical(y_test,num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建模型，输入28*28=784个神经元，输出10个神经元</span></span><br><span class="line">model=Sequential([</span><br><span class="line">    Dense(units=<span class="number">10</span>,input_dim=<span class="number">784</span>,bias_initializer=<span class="string">'one'</span>,activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">#定义优化器,训练过程中计算准确率</span></span><br><span class="line">sgd=SGD(lr=<span class="number">0.2</span>)</span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=sgd,</span><br><span class="line">    loss=<span class="string">'mse'</span>,</span><br><span class="line">    metrics=[<span class="string">'accuracy'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line">model.fit(x_train,y_train,batch_size=<span class="number">32</span>,epochs=<span class="number">1</span>)<span class="comment">#epochs是训练周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#评估模型</span></span><br><span class="line">loss,accuracy=model.evaluate(x_test,y_test)</span><br><span class="line">print(<span class="string">'\ntest loss'</span>,loss)</span><br><span class="line">print(<span class="string">'accuracy'</span>,accuracy)</span><br></pre></td></tr></table></figure><p>运行上述代码，得到如下结果：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test loss 0.021694928619265558</span><br><span class="line">accuracy 0.8772</span><br></pre></td></tr></table></figure></p><p>可以提高训练周期epochs来提高准确率<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>keras中导入utls失败的解决办法</title>
    <link href="http://yoursite.com/2020/01/29/keras%E4%B8%AD%E5%AF%BC%E5%85%A5utls%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/29/keras中导入utls失败的解决办法/</id>
    <published>2020-01-29T13:01:04.000Z</published>
    <updated>2020-01-29T13:12:26.013Z</updated>
    
    <content type="html"><![CDATA[<p>环境：anoconda（Python3.7）<br></p><blockquote><p>在使用tensorflow.keras训练神经网络时，需要使用to_categorical()函数，于是运行下面的代码：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.utils import np_utils</span><br></pre></td></tr></table></figure></p></blockquote><p>会报错，错误信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImportError                               Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-20-ce1e713f73e2&gt; in &lt;module&gt;</span><br><span class="line">----&gt; 1 from tensorflow.keras.utils import np_utils</span><br><span class="line">ImportError: cannot import name &apos;np_utils&apos; from &apos;tensorflow.keras.utils&apos; (/home/fanxi/anaconda3/lib/python3.7/site-packages/tensorflow/_api/v1/keras/utils/__init__.py)</span><br></pre></td></tr></table></figure></p><p>为了解决这个问题，先根据报错信息显示的路径找到文件<strong>init</strong>.py，打开，内容如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2016 The TensorFlow Authors. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"># ==============================================================================</span><br><span class="line">&quot;&quot;&quot;Keras utilities.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from __future__ import absolute_import</span><br><span class="line">from __future__ import division</span><br><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">from tensorflow.python.keras.utils.data_utils import GeneratorEnqueuer</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import get_file</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import Sequence</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import SequenceEnqueuer</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import custom_object_scope</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import CustomObjectScope</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import deserialize_keras_object</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import get_custom_objects</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import Progbar</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import serialize_keras_object</span><br><span class="line">from tensorflow.python.keras.utils.io_utils import HDF5Matrix</span><br><span class="line">from tensorflow.python.keras.utils.layer_utils import convert_all_kernels_in_model</span><br><span class="line">from tensorflow.python.keras.utils.np_utils import normalize</span><br><span class="line">from tensorflow.python.keras.utils.np_utils import to_categorical</span><br><span class="line">from tensorflow.python.keras.utils.vis_utils import plot_model</span><br><span class="line"></span><br><span class="line">del absolute_import</span><br><span class="line">del division</span><br><span class="line">del print_function</span><br></pre></td></tr></table></figure></p><p>把之前运行的代码改为：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.python.keras.utils.np_utils import to_categorical</span><br></pre></td></tr></table></figure></p><p>便可以直接导入to_categorical函数了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：anoconda（Python3.7）&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用tensorflow.keras训练神经网络时，需要使用to_categorical()函数，于是运行下面的代码：&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Python日常小bug" scheme="http://yoursite.com/categories/Python%E6%97%A5%E5%B8%B8%E5%B0%8Fbug/"/>
    
    
  </entry>
  
  <entry>
    <title>keras--非线性回归</title>
    <link href="http://yoursite.com/2020/01/29/keras-%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2020/01/29/keras-非线性回归/</id>
    <published>2020-01-29T08:27:17.000Z</published>
    <updated>2020-01-29T08:55:30.149Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#Sequential：按顺序构成的模型（最简单的一种模型）</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="comment">#Dense:全连接层</span></span><br><span class="line"><span class="comment">#Activation:激活函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense,Activation</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成200个随机点</span></span><br><span class="line">x_data=np.linspace(<span class="number">-0.5</span>,<span class="number">0.5</span>,<span class="number">200</span>)</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.02</span>,x_data.shape)</span><br><span class="line">y_data=np.square(x_data)+noise</span><br><span class="line"><span class="comment">#显示随机点</span></span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""> <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#构建一个顺序模型</span><br><span class="line">model=Sequential()</span><br><span class="line">#在模型中添加一个全连接层</span><br><span class="line">#网络结构：1--10--1（输入层--隐藏层--输出层）</span><br><span class="line">model.add(Dense(units=10,input_dim=1,activation=&apos;tanh&apos;))#现在units是隐藏层的结点数：10</span><br><span class="line">#model.add(Activation(&apos;tanh&apos;))#添加激活函数的另外一种方法</span><br><span class="line">model.add(Dense(units=1,input_dim=10,activation=&apos;tanh&apos;))#这里的输入维度input_dim可以省略，默认就是上一层的输出：10</span><br><span class="line">#model.add(Activation(&apos;tanh&apos;))#添加激活函数的另外一种方法</span><br><span class="line">#定义优化算法</span><br><span class="line">sgd=SGD(lr=0.3)#增大sgd的学习率(默认是0.01)，以减少训练次数</span><br><span class="line">#编译模型</span><br><span class="line">model.compile(optimizer=sgd,loss=&apos;mse&apos;)</span><br><span class="line"></span><br><span class="line">#训练模型(训练3001个批次)</span><br><span class="line">for step in range(3001):</span><br><span class="line">    #每次训练一个批次</span><br><span class="line">    cost=model.train_on_batch(x_data,y_data)#把所有数据作为一个批次进行训练</span><br><span class="line">    #每500个batch打印一次cost值</span><br><span class="line">    if step%500==0:</span><br><span class="line">        print(&apos;cost:&apos;,cost)</span><br><span class="line">        </span><br><span class="line">#打印权值和偏置值</span><br><span class="line">W0,b0=model.layers[0].get_weights()</span><br><span class="line">print(&apos;W0:&apos;,W0,&apos;b0:&apos;,b0)</span><br><span class="line">W1,b1=model.layers[1].get_weights()</span><br><span class="line">print(&apos;W1:&apos;,W1,&apos;b1:&apos;,b1)</span><br><span class="line"></span><br><span class="line">#把x_data输入网络中，得到预测值y_pred</span><br><span class="line">y_pred=model.predict(x_data)</span><br><span class="line"></span><br><span class="line">#显示随机点</span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">#显示预测结果</span><br><span class="line">plt.plot(x_data,y_pred,&apos;r-&apos;,lw=3)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cost: 0.014056709</span><br><span class="line">cost: 0.00520279</span><br><span class="line">cost: 0.003079262</span><br><span class="line">cost: 0.0015911908</span><br><span class="line">cost: 0.0006481447</span><br><span class="line">cost: 0.0005247076</span><br><span class="line">cost: 0.00051465025</span><br><span class="line">W0: [[-1.3358053  -1.4224494   0.20232533 -0.6066645  -0.10370493  0.23419712</span><br><span class="line">   0.7197719  -0.36955625 -0.04164154 -0.24170761]] b0: [-0.54529893  0.5815663  -0.18308175 -0.08960333  0.16555873 -0.17367946</span><br><span class="line"> -0.21355069 -0.0029226  -0.2519434  -0.08364421]</span><br><span class="line">W1: [[ 0.8520078 ]</span><br><span class="line"> [-0.8093865 ]</span><br><span class="line"> [-0.4979416 ]</span><br><span class="line"> [ 0.18443288]</span><br><span class="line"> [ 0.3505873 ]</span><br><span class="line"> [-0.5481949 ]</span><br><span class="line"> [ 0.3195532 ]</span><br><span class="line"> [-0.2096716 ]</span><br><span class="line"> [-0.49501932]</span><br><span class="line"> [-0.30411953]] b1: [0.5309287]</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt=""> <br><br>对以上输出结果的理解：<br></p><blockquote><p>(1) W0和b0是输入层(1个结点)到隐藏层(10个结点)的权重和偏置值，因为从输入层到隐藏层是由1个结点映射到10个结点，即有10条线由输入层发出，分别指向到隐藏层的10个结点，所以两者所含参数个数都为10；<br><br>(2) W1和b1是隐藏层(10个结点)到输出层(1个结点)的权重和偏置值，因为从隐藏层到输出层是由10个结点映射到1个结点，即有10条线指向输出层的唯一结点，因而W1含有10个参数，b1含有1个参数；<br><br>通俗来讲，b的个数与该层所指向的下一层的结点数一样，W与本层发出的‘线’的条数一样</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>keras--线性回归</title>
    <link href="http://yoursite.com/2020/01/29/keras-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2020/01/29/keras-线性回归/</id>
    <published>2020-01-29T07:57:39.000Z</published>
    <updated>2020-01-29T08:02:28.144Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#Sequential：按顺序构成的模型（最简单的一种模型）</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="comment">#Dense:全连接层</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用numpy生成100个随机点</span></span><br><span class="line">x_data=np.random.rand(<span class="number">100</span>)</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.01</span>,x_data.shape)</span><br><span class="line">y_data=x_data*<span class="number">0.1</span>+<span class="number">0.2</span>+noise</span><br><span class="line"><span class="comment">#显示随机点</span></span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""> <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#构建一个顺序模型</span><br><span class="line">model=Sequential()</span><br><span class="line">#在模型中添加一个全连接层</span><br><span class="line">model.add(Dense(units=1,input_dim=1))#units是输出维度</span><br><span class="line">#编译模型</span><br><span class="line">model.compile(optimizer=&apos;sgd&apos;,loss=&apos;mse&apos;)</span><br><span class="line">#训练模型(训练3001个批次，若效果不好可以尝试增大训练次数)</span><br><span class="line">for step in range(3001):</span><br><span class="line">    #每次训练一个批次</span><br><span class="line">    cost=model.train_on_batch(x_data,y_data)#把所有数据作为一个批次进行训练</span><br><span class="line">    #每500个batch打印一次cost值</span><br><span class="line">    if step%500==0:</span><br><span class="line">        print(&apos;cost:&apos;,cost)</span><br><span class="line">        </span><br><span class="line">#打印权值和偏置值</span><br><span class="line">W,b=model.layers[0].get_weights()</span><br><span class="line">print(&apos;W:&apos;,W,&apos;b:&apos;,b)</span><br><span class="line"></span><br><span class="line">#把x_data输入网络中，得到预测值y_pred</span><br><span class="line">y_pred=model.predict(x_data)</span><br><span class="line"></span><br><span class="line">#显示随机点</span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">#显示预测结果</span><br><span class="line">plt.plot(x_data,y_pred,&apos;r-&apos;,lw=3)#预测值</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>输出结果： <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cost: 0.04835104</span><br><span class="line">cost: 0.00014408033</span><br><span class="line">cost: 0.00010225594</span><br><span class="line">cost: 9.2460454e-05</span><br><span class="line">cost: 9.016635e-05</span><br><span class="line">cost: 8.962906e-05</span><br><span class="line">cost: 8.9503264e-05</span><br><span class="line">W: [[0.10286073]] b: [0.198199]</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>物理层</title>
    <link href="http://yoursite.com/2020/01/27/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/27/物理层/</id>
    <published>2020-01-27T04:27:19.000Z</published>
    <updated>2020-01-27T12:49:59.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据通信的相关术语"><a href="#数据通信的相关术语" class="headerlink" title="数据通信的相关术语"></a>数据通信的相关术语</h3><p>通信的目的：传送消息<br><br>数据：传送信息的实体<br><br>信号：数据的电气/电磁的表现，是数据在传输过程中的存在形式<br></p><blockquote><p>数字信号：代表消息的参数取值是离散的<br><br>模拟信号：代表消息的参数取值时连续的<br></p></blockquote><p>信源：产生和发送数据的源头<br><br>信宿：接收数据的终点<br><br>信道：信号传输的媒介。一般用来表示向<code>某一个方向</code>传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道<br></p><blockquote><p>按照传输信号，信道可分为：模拟信道(传送模拟信号)和数字信道(传送数字信号)<br><br>按照传输介质，信道可分为：无线信道和有线信道<br></p></blockquote><h3 id="3种通信方式-按照通信双方信息的交互方式"><a href="#3种通信方式-按照通信双方信息的交互方式" class="headerlink" title="3种通信方式(按照通信双方信息的交互方式)"></a>3种通信方式(按照通信双方信息的交互方式)</h3><blockquote><p>单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道<br><br>半双工通信：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道<br><br>全双工通信：通信双方可以同时发送和接收信息，也需要两条信道<br></p></blockquote><h3 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h3><blockquote><p>串行传输：速度慢，费用低，适合远距离<br><br>并行传输：速度快，费用高，适合近距离<br></p></blockquote><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><p><code>码元</code>是指用一个<code>固定时长</code>的<code>信号波形(数字脉冲)</code>，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为<code>k进制码元</code>，而该时长称为<code>码元宽度</code>。当码元的离散状态有M个时(M大于2)，此时码元称为<code>M进制码元</code>。<br><br>1码元可以携带多个比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，一中代表1状态。<br></p><h3 id="速率，波特，带宽"><a href="#速率，波特，带宽" class="headerlink" title="速率，波特，带宽"></a>速率，波特，带宽</h3><p><code>速率</code>也叫<code>数据率</code>，是指数据的<code>传输速率</code>，表示单位时间内传输的数据量。可以用<code>码元传输速率</code>和<code>信息传输速率</code>表示。<br></p><blockquote><p>(1) 码元传输速率：别名码元速率，波形速率，调制速率，符号速率等，它表示单位时间内数字通信系统所传输的码元个数(也可称为脉冲个数或信号变化的次数)，单位是<code>波特(Baud)</code>。<br><br>1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，单码元速率与进制数无关<br></p></blockquote><blockquote><p>(2)信息传输速率：别名信息速率，比特率等，表示单位时间内数字通信系统传输的二进制码元个数(即比特数)，单位是比特/秒(b/s)<br></p></blockquote><p>两者关系：若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M*n bit/s<br></p><p>一言以蔽之：码元传输速率表示<code>1s传输多少个码元</code>,信息传输速率表示<code>1s传输多少个比特。</code>.<br></p><p>计算机网络中，<code>带宽</code>用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的<code>“最高数据率”</code>，可理解为网络设备所支持的最高速度。单位是”比特每秒”，b/s，kb/s，Mb/s，Gb/s<br></p><p>看一道题<br><br><img src="1.png" alt=""> <br></p><h3 id="基带信号与宽带信号-信道上传输的信号"><a href="#基带信号与宽带信号-信道上传输的信号" class="headerlink" title="基带信号与宽带信号(信道上传输的信号)"></a>基带信号与宽带信号(信道上传输的信号)</h3><blockquote><p>基带信号：将数字1和0直接用两种不同的电压表示，再传送到数字信道上去传输(基带传输)。来自信源的信号，比如计算机发出的代表各种文字或图像的数据信号都属于基带信号。基带信号就是发出的<code>直接表达了要传输的信息的信号</code>,比如说话的声音。<br></p></blockquote><blockquote><p>宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输(宽带传输)。把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输(即仅在一段频率范围内能够通过信道)。<br></p></blockquote><p>在传输距离较近时，计算机网络采用基带传输方式(近距离衰减小，从而信号内容不易发生变化)；<br><br>在传输距离较远时，计算机网络采用宽带传输方式(远距离衰减大，即使信号变化大也能最后过滤出来基带信号)；<br></p><p>栗子：   设备投屏 –&gt;基带传输； </p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><p>编码： 数据–&gt;数字信号<br><br>调制： 数据–&gt;模拟信号<br></p><blockquote><p>数字数据，经数字发送器，变为数字信号，此为调制<br><br>数字数据，经调制器，变为模拟信号，此为调制<br><br>模拟数据，经PCM编码器，变为数字信号，此为编码<br><br>模拟数据，经放大器调制器，变为模拟信号，此为调制<br></p></blockquote><h3 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h3><blockquote><p>非归零编码（NRZ）<br><br>曼彻斯特编码<br><br>差分曼彻斯特编码<br><br>归零编码（RZ）<br><br>反向不归零编码（NRZI）<br><br>4B/5B编码<br></p></blockquote><h3 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h3><p><img src="2.png" alt=""> <br></p><h3 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h3><p><img src="3.png" alt=""> <br></p><h3 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h3><p><img src="4.png" alt=""> <br></p><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><p>影响失真程度的因素</p><blockquote><p>码元传输速率（正相关），信号传输距离（正相关），噪声干扰（正相关），传输媒体质量（负相关）<br></p></blockquote><p>失真的一种现象<br><img src="5.png" alt=""> <br></p><h3 id="奈氏准则-奈奎斯特定理"><a href="#奈氏准则-奈奎斯特定理" class="headerlink" title="奈氏准则(奈奎斯特定理)"></a>奈氏准则(奈奎斯特定理)</h3><p><img src="6.png" alt=""> <br><br><img src="7.png" alt=""> <br></p><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p><img src="8.png" alt=""> <br><br><img src="9.png" alt=""> <br><br><img src="10.png" alt=""> <br></p><h3 id="奈氏与香农对比"><a href="#奈氏与香农对比" class="headerlink" title="奈氏与香农对比"></a>奈氏与香农对比</h3><p><img src="11.png" alt=""> <br></p><h3 id="物理层传输介质"><a href="#物理层传输介质" class="headerlink" title="物理层传输介质"></a>物理层传输介质</h3><p><img src="12.png" alt=""> <br><br><img src="13.png" alt=""> <br><br><img src="14.png" alt=""> <br><br><img src="15.png" alt=""> <br><br><img src="16.png" alt=""> <br><br><img src="17.png" alt=""> <br><br><img src="18.png" alt=""> <br></p><h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><p><img src="19.png" alt=""> <br><br><img src="20.png" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据通信的相关术语&quot;&gt;&lt;a href=&quot;#数据通信的相关术语&quot; class=&quot;headerlink&quot; title=&quot;数据通信的相关术语&quot;&gt;&lt;/a&gt;数据通信的相关术语&lt;/h3&gt;&lt;p&gt;通信的目的：传送消息&lt;br&gt;&lt;br&gt;数据：传送信息的实体&lt;br&gt;&lt;br&gt;信号：数据的
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>素数专题</title>
    <link href="http://yoursite.com/2020/01/21/%E7%B4%A0%E6%95%B0%E4%B8%93%E9%A2%98/"/>
    <id>http://yoursite.com/2020/01/21/素数专题/</id>
    <published>2020-01-21T12:57:14.000Z</published>
    <updated>2020-01-22T07:05:16.215Z</updated>
    
    <content type="html"><![CDATA[<h4 id="判断n是否为素数-sqrt-n-时间复杂度"><a href="#判断n是否为素数-sqrt-n-时间复杂度" class="headerlink" title="判断n是否为素数   (  sqrt(n)时间复杂度)"></a>判断n是否为素数   (  sqrt(n)时间复杂度)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int isprime(int n)</span><br><span class="line">&#123;</span><br><span class="line">        if(n&lt;=1)</span><br><span class="line">                return 0;</span><br><span class="line">        int sqr=(int)sqrt(1.0*n);</span><br><span class="line">        for(int i=2;i&lt;=sqr;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                if(n%i==0)</span><br><span class="line">                        return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求100以内的素数"><a href="#求100以内的素数" class="headerlink" title="求100以内的素数"></a>求100以内的素数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">int isprime(int n)</span><br><span class="line">&#123;</span><br><span class="line">        if(n&lt;=1)</span><br><span class="line">                return 0;</span><br><span class="line">        int sqr=(int)sqrt(1.0*n);</span><br><span class="line">        for(int i=2;i&lt;=sqr;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                if(n%i==0)</span><br><span class="line">                        return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int prime[101],pNum=0;</span><br><span class="line">int p[101]=&#123;0&#125;;</span><br><span class="line">void Find_Prime()</span><br><span class="line">&#123;</span><br><span class="line">        for(int i=1;i&lt;101;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                if(isprime(i))</span><br><span class="line">                &#123;</span><br><span class="line">                        prime[pNum++]=i;//存储素数i</span><br><span class="line">                        p[i]=1;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        Find_Prime();</span><br><span class="line">        for(int i=0;i&lt;pNum;i++)</span><br><span class="line">                printf(&quot;%d &quot;,prime[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">int maxn=10010;</span><br><span class="line"></span><br><span class="line">int is_prime(int n)</span><br><span class="line">&#123;</span><br><span class="line">if(n==1)</span><br><span class="line">return 0;</span><br><span class="line">int sqr=(int)sqrt(1.0*n);</span><br><span class="line">for(int i=2;i&lt;=sqr;++i)</span><br><span class="line">if(n%i==0)</span><br><span class="line">return 0;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int prime[10010],pNum=0;</span><br><span class="line"></span><br><span class="line">//获取素数表</span><br><span class="line">void Find_Prime()</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;maxn;++i)</span><br><span class="line">if(is_prime(i))</span><br><span class="line">prime[pNum++]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct factor</span><br><span class="line">&#123;</span><br><span class="line">int x,cnt;//x为质因子，cnt为其个数</span><br><span class="line">&#125;fac[10];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Find_Prime();</span><br><span class="line">int n,num=0;//num为n的不同质因子的个数</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">if(n==1)</span><br><span class="line">printf(&quot;1=1&quot;);//特判1的情况</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d=&quot;,n);</span><br><span class="line">int sqr=(int)sqrt(1.0*n);</span><br><span class="line">//枚举根号n以内的质因子</span><br><span class="line">for(int i=0;i&lt;pNum&amp;&amp;prime[i]&lt;=sqr;++i)</span><br><span class="line">&#123;</span><br><span class="line">if(n%prime[i]==0)</span><br><span class="line">&#123;</span><br><span class="line">fac[num].x=prime[i];//记录该因子</span><br><span class="line">fac[num].cnt=0;</span><br><span class="line">//计算出质因子prime[i]的个数</span><br><span class="line">while(n%prime[i]==0)</span><br><span class="line">&#123;</span><br><span class="line">fac[num].cnt++;</span><br><span class="line">n/=prime[i];</span><br><span class="line">&#125;</span><br><span class="line">num++;//不同质因子的个数加1</span><br><span class="line">&#125;</span><br><span class="line">if(n==1)</span><br><span class="line">break;//及时退出循环，节省点时间</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果不能被根号n以内的质因子除尽，那么一定有一个大于根号n的因子</span><br><span class="line">if(n!=1)</span><br><span class="line">&#123;</span><br><span class="line">fac[num].x=n;</span><br><span class="line">fac[num++].cnt=1;</span><br><span class="line">&#125;</span><br><span class="line">//按照格式输出结果</span><br><span class="line">for(int i=0;i&lt;num;++i)</span><br><span class="line">&#123;</span><br><span class="line">if(i&gt;0)</span><br><span class="line">printf(&quot;*&quot;);</span><br><span class="line">printf(&quot;%d&quot;,fac[i].x);</span><br><span class="line">if(fac[i].cnt&gt;1)</span><br><span class="line">printf(&quot;^%d&quot;,fac[i].cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;判断n是否为素数-sqrt-n-时间复杂度&quot;&gt;&lt;a href=&quot;#判断n是否为素数-sqrt-n-时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;判断n是否为素数   (  sqrt(n)时间复杂度)&quot;&gt;&lt;/a&gt;判断n是否为素数   (  sqr
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>【习题】计算机网络基本概念</title>
    <link href="http://yoursite.com/2020/01/19/%E3%80%90%E4%B9%A0%E9%A2%98%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2020/01/19/【习题】计算机网络基本概念/</id>
    <published>2020-01-19T03:09:56.000Z</published>
    <updated>2020-01-19T05:11:20.490Z</updated>
    
    <content type="html"><![CDATA[<p>1-01 计算机网络可以向用户提供哪些服务？<br></p><blockquote><p>答： 连通性和共享</p></blockquote><p>1-02 试简述分组交换的要点。<br></p><blockquote></blockquote><p>1-03 试从多个方面比较电路交换、 报文交换和<br>分组交换的主要优缺点。<br><br>1-04 为什么说互联网是自印刷术以来人类在存<br>储和交换信息领域中的最大变革？<br><br>1-05 互联网基础结构的发展大致分为哪几个阶<br>段？ 请指出这几个阶段最主要的特点。<br><br>1-06 简述互联网标准制定的几个阶段。<br><br>1-07 小写和大写开头的英文名字internet和<br>Internet在意思上有何重要区别？<br><br>1-08 计算机网络都有哪些类别？ 各种类别的网<br>络都有哪些特点？<br><br>1-09 计算机网络中的主干网和本地接入网的主<br>要区别是什么？<br><br>1-10 试在下列条件下比较电路交换和分组交<br>换。 要传送的报文共x（bit） 。 从源点到终点共<br>经过k段链路， 每段链路的传播时延为d（s） ， 数<br>据率为b（bit/s） 。 在电路交换时电路的建立时间<br>为s（s） 。 在分组交换时分组长度为p（bit） ， 且<br>各结点的排队等待时间可忽略不计。 问在怎样的<br>条件下， 分组交换的时延比电路交换的要小？<br>（提示： 画一下草图观察k段链路共有几个结<br>点。 ）<br><br>1-11 在上题的分组交换网中， 设报文长度和分<br>组长度分别为x和（p＋h） （bit） ， 其中p为分组<br>的数据部分的长度， 而h为每个分组所带的控制<br>信息固定长度， 与p的大小无关。 通信的两端共<br>经过k段链路。 链路的数据率为b（bit/s） ， 但传<br>播时延和结点的排队时间均可忽略不计。 若打算<br>使总的时延为最小， 问分组的数据部分长度p应<br>取为多大？ （提示： 参考图1-12的分组交换部<br>分， 观察总的时延由哪几部分组成。 ）<br><br>1-12 互联网的两大组成部分（边缘部分与核心<br>部分） 的特点是什么？ 它们的工作方式各有什么<br>特点？<br><br>1-13 客户-服务器方式与P2P对等通信方式的主<br>要区别是什么？ 有没有相同的地方？<br><br>1-14 计算机网络有哪些常用的性能指标？<br><br>1-15 假定网络的利用率达到了90％。 试估算一<br>下现在的网络时延是它的最小值的多少倍？<br><br>1-16 计算机通信网有哪些非性能特征？ 非性能<br>特征与性能指标有什么区别？<br><br>1-17 收发两端之间的传输距离为1000km， 信号<br>在媒体上的传播速率为2×108m/s。 试计算以下两<br>种情况的发送时延和传播时延：<br>（1） 数据长度为107bit， 数据发送速率为<br>100kbit/s。<br>（2） 数据长度为103bit， 数据发送速率为<br>1Gbit/s。<br>从以上计算结果可得出什么结论？<br><br>1-18 假设信号在媒体上的传播速率为<br>2.3×108m/s。 媒体长度l分别为：<br>（1） 10cm（网络接口卡）<br>（2） 100m（局域网）<br>（3） 100km（城域网）<br>（4） 5000km（广域网）<br>试计算当数据率为1Mbit/s和10Gbit/s时在以<br>上媒体中正在传播的比特数。<br><br>1-19 长度为100字节的应用层数据交给运输层传<br>送， 需加上20字节的TCP首部。 再交给网络层传<br>送， 需加上20字节的IP首部。 最后交给数据链路<br>层的以太网传送， 加上首部和尾部共18字节。 试<br>求数据的传输效率。 数据的传输效率是指发送的<br>应用层数据除以所发送的总数据（即应用数据加<br>上各种首部和尾部的额外开销） 。<br>若应用层数据长度为1000字节， 数据的传输<br>效率是多少？<br><br>1-20 网络体系结构为什么要采用分层次的结<br>构？ 试举出一些与分层体系结构的思想相似的日<br>常生活的例子。<br><br>1-21 协议与服务有何区别？ 有何关系？<br><br>1-22 网络协议的三个要素是什么？ 各有什么含<br>义？<br><br>1-23 为什么一个网络协议必须把各种不利的情<br>况都考虑到？<br><br>1-24 试述具有五层协议的网络体系结构的要<br>点， 包括各层的主要功能。<br><br>1-25 试举出日常生活中有关“透明”这种名词的<br>例子。<br><br>1-26 试解释以下名词： 协议栈、 实体、 对等<br>层、 协议数据单元、 服务访问点、 客户、 服务<br>器、 客户-服务器方式。<br><br>1-27 试解释everything over IP和IP over everything<br>的含义。<br><br>1-28 假定要在网络上传送1.5MB的文件。 设分<br>组长度为1KB， 往返时间RTT＝80ms。 传送数据<br>之前还需要有建立TCP连接的时间， 这时间是<br>2×RTT＝160ms。 试计算在以下几种情况下接收<br>方收完该文件的最后一个比特所需的时间。<br>（ 1） 数据发送速率为10Mbit/s， 数据分组可<br>以连续发送。<br>（ 2） 数据发送速率为10Mbit/s， 但每发送完<br>一个分组后要等待一个RTT时间才能再发送下一<br>个分组。<br>（ 3） 数据发送速率极快， 可以不考虑发送<br>数据所需的时间。 但规定在每一个RTT往返时间<br>内只能发送20个分组。<br>（ 4） 数据发送速率极快， 可以不考虑发送<br>数据所需的时间。 但在第一个RTT往返时间内只<br>能发送一个分组， 在第二个RTT内可发送两个分<br>组， 在第三个RTT内可发送四个分组（ 即23–1＝22<br>＝4个分组） 。 （ 这种发送方式见教材第5章TCP<br>的拥塞控制部分。 ）<br><br>1-29 有一个点对点链路， 长度为50km。 若数据<br>在此链路上的传播速度为2×108m/s， 试问链路的<br>带宽应为多少才能使传播时延和发送100字节的<br>分组的发送时延一样大？ 如果发送的是512字节<br>长的分组， 结果又应如何？<br><br>1-30 有一个点对点链路， 长度为20000km。 数<br>据的发送速率是1kbit/s， 要发送的数据有100bit。<br>数据在此链路上的传播速度为2×108m/s。 假定我<br>们可以看见在线路上传输的比特， 试画出我们看<br>到的线路上的比特（画两个图， 一个在100bit刚<br>刚发送完时， 另一个是再经过0.05s后） 。<br><br>1-31 条件同上题。 但数据的发送速率改为<br>1Mbit/s。 和上题的结果相比较， 你可以得出什么<br>结论？<br><br>1-32 以1Gbit/s的速率发送数据。 试问在以距离<br>或时间为横坐标时， 一个比特的宽度分别是多<br>少？<br><br>1-33 我们在互联网上传送数据经常是从某个源<br>点传送到某个终点， 而并非传送过去又再传送回<br>来。 那么为什么往返时间RTT是个很重要的性能<br>指标呢？<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1-01 计算机网络可以向用户提供哪些服务？&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答： 连通性和共享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1-02 试简述分组交换的要点。&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;1-03
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络的基本概念</title>
    <link href="http://yoursite.com/2020/01/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2020/01/17/计算机网络的基本概念/</id>
    <published>2020-01-17T13:25:08.000Z</published>
    <updated>2020-01-19T02:59:51.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h4><p>计算机网络是一个将分散的，具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统 。<br><br>简而言之，计算机网络是互连(互联互通–经过通信链路)的，自治(无主从关系)的计算机集合。<br></p><h4 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h4><p>1.数据通信<br><br>2.资源共享，包括对硬件，软件，数据的共享<br><br>3.分布式处理(多台计算机各自承担同一工作任务的不同部分)<br><br>4.提高可靠性(替代机)<br><br>5.负载均衡<br><br>…<br></p><h4 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h4><p>1.按照<code>组成部分</code>可分为<code>硬件，软件，协议</code><br><br>2.按照<code>工作方式</code>可分为<code>边缘部分(用户直接使用，包括C/S方式和P2P模式)，核心部分(为边缘部分服务)</code><br><br>3.按照<code>功能组成</code>可分为<code>通信子网(实现数据通信，由各种传输介质，通信设备，相应的网络协议组成)，资源子网(实现资源共享/数据处理，是实现资源共享功能的设备和软件的集合)</code><br></p><h4 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h4><p>1.按分布范围分为<code>广域网WAN，城域网MAN，局域网WAN，个人区域网PAN</code><br><br>2.按使用者分为<code>公用网，专用网</code><br><br>3.按交换技术分为<code>电路交换，报文交换，分组交换</code><br><br>4.按拓扑结构分为<code>总线型，星型，环形，网状型(常用于广域网)</code><br><br>5.按传输技术分为<code>广播室网络(共享公共通信信道)，点对点网络(使用分组存储转发和路由选择机制)</code><br></p><h4 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h4><h6 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h6><p><code>速率</code>即<code>数据率</code>或称<code>数据传输率</code>或<code>比特率</code><br><br><code>速率的单位</code>为：b/s,kb/s,Mb/s,Gb/s,Tb/s <br><br>换算关系为：<br><br>1kb/s=10^3 b/s;<br><br>1Mb/s=10^3 kb/s=10^6 b/s;<br><br>…<br><br>这与<code>存储容量的单位</code>有些许不同(<code>大写，转换关系</code>)：<br><br>1KB=2^10B=1024B=1024*8 bit<br><br>1MB=2^10KB;<br>…<br></p><h6 id="带宽（理想状态）"><a href="#带宽（理想状态）" class="headerlink" title="带宽（理想状态）"></a>带宽（理想状态）</h6><p>带宽原本是指某个信号具有的频带宽度，即最高频率与最低频率之差，单位时赫兹(Hz)<br><br>计算机网络中，<code>带宽</code>用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的“最高数据率”，可理解为网络设备所支持的最高速度。单位是”比特每秒”，b/s，kb/s，Mb/s，Gb/s<br></p><h6 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h6><p>单位时间内通过某个网络(或信道、接口)的数据量，单位也是b/s,kb/s,Mb/s等，吞吐量受网络的带宽或网络的额定速率的限制<br><br>吞吐量&lt;带宽，所以说带宽是一种理想状态<br></p><h6 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h6><p>指数据(报文/分组/比特流)从网络的一端传送到另一端所需的时间，也叫<code>延迟</code>或<code>迟延</code>，单位是s<br><br>1.发送时延(传输时延)=数据长度/信道带宽(发送速率)，把数据从主机放到信道上所需的时间，通常所说的高速链路便是指发送时延较小(经优化)<br><br>2.传播时延=信道长度/电磁波在信道上的传播速率，取决于电磁波传播速度和链路长度，不好优化<br><br>3.排队时延：等待输入/输出链路可用<br><br>4.处理时延：检错，找出口<br></p><h6 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h6><p><code>时延带宽积=传播时延*带宽</code>，单位是bit<br><br>时延带宽积又称为<code>以比特为单位的链路长度</code>，即“某段链路现在有多少比特”，代表数据容量<br></p><h6 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h6><p>从发送方发送数据开始，到发送发收到接收方的确认(接收方收到数据后立即发送确认)总共经经历的时延<br><br>RTT越大，在收到确认之前，可以发送的数据越多<br><br>RTT包括<code>往返传播时延=2*传播时延</code>和<code>末端处理时间</code><br></p><h6 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h6><p><code>信道利用率</code>=有数据通过时间/（有+无）数据通过时间<br><br><code>网络利用率</code>时信道利用率加权平均值<br><br>当利用率接近于1时，时延D急剧增大，两者成凹函数(时延初始值为D0)关系<br></p><p>…</p><h4 id="计算机网络分层的原则"><a href="#计算机网络分层的原则" class="headerlink" title="计算机网络分层的原则"></a>计算机网络分层的原则</h4><p>1.各层之间相互立，每层只实现一种相对独立的功能<br><br>2.每层之间界面自然清晰，易于理解，相互交流尽可能少<br><br>3.结构上可分割开，每层都采用最合适的技术实现<br><br>4.保持下层对上层的独立性，上层单向使用下层提供的服务<br><br>5.整个分层结构应该能促进标准化工作<br></p><h4 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h4><p>实体</p><blockquote><p>第n层中的活动元素称为n层实体，同一层的实体叫对等实体<br></p></blockquote><p>协议</p><blockquote><p>为进行网络中的对等实体数据交换而建立的规则、标准或约定称为网络协议【水平】<br></p><blockquote><p>语法:规定传输数据的格式<br><br>语义：规定所要完成的功能<br><br>同步：规定各种操作的顺序<br></p></blockquote></blockquote><p>接口(访问服务点SAP)</p><blockquote><p>上层使用下层服务的入口<br></p></blockquote><p>服务</p><blockquote><p>下层为相邻上层提供的功能调用【垂直】<br><br><code>PCI+SDU=PDU</code>，即<code>协议控制信息+服务数据单元=协议数据单元</code><br></p><blockquote><p>SDU服务数据单元：为完成用户所要求的功能而应传送的数据<br><br>PCI协议控制信息：控制协议操作的信息<br><br>PDU协议数据单元：对等层次之间的数据单位<br></p></blockquote></blockquote><h4 id="OSI参考模型-7层，自上而下介绍"><a href="#OSI参考模型-7层，自上而下介绍" class="headerlink" title="OSI参考模型(7层，自上而下介绍)"></a>OSI参考模型(7层，自上而下介绍)</h4><h6 id="应用层-用户与网络的界面"><a href="#应用层-用户与网络的界面" class="headerlink" title="应用层(用户与网络的界面)"></a>应用层(用户与网络的界面)</h6><p>所有能和用户交互产生网络流量的程序<br></p><blockquote><p>典型的应用层服务：<br></p><blockquote><p>文件传输(FTP)<br><br>电子邮件(SMTP)<br><br>万维网(HTTP)<br></p></blockquote></blockquote><h6 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h6><p>用于处理在两个通信系统中交换信息的表示方式(语法和语义)<br></p><blockquote><p>功能：</p><blockquote><p>1.数据格式变换<br><br>数据加密解密<br><br>数据压缩和恢复<br></p></blockquote></blockquote><h6 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h6><p>向表示层实体/用户进程提供建立连接并在连接上有序地传输数据。这是会话，也是建立同步(SYN)<br></p><blockquote><p>功能：</p><blockquote><p>1.建立、管理、终止会话<br><br>2.使用校验点可使会话在通信失效时从校验点/同步点继续恢复通信，实现数据同步（适用于大文件的传输）<br></p></blockquote></blockquote><h6 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h6><p>负责主机中两个进程的通信，即端到端的通信。传输单位时报文段或用户数据报<br></p><blockquote><p>功能：</p><blockquote><p>1.可靠传输、不可靠传输<br><br>2.差错控制<br><br>3.流量控制(慢点儿发，跟不上了。。。)<br><br>4.复用分用</p><blockquote><p>复用：多个应用层进程可同时使用下面运输层的服务<br><br>分用：运输层把收到的信息分别交付给上面应用层中相应的进程<br></p></blockquote></blockquote></blockquote><h6 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h6><p>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位是数据报<br></p><blockquote><p>功能：</p><blockquote><p>1.路由选择<br><br>2.流量控制<br><br>3.差错控制<br><br>4.拥塞控制：若所有结点都来不及接收分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施来缓解这种拥塞<br></p></blockquote></blockquote><h6 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h6><p>主要任务是把网络层传下来的数据报组装成帧。<br><br>数据链路层/链路层的措施单位是帧<br></p><blockquote><p>功能：</p><blockquote><p>1.成帧(定义帧的开始和结束)<br><br>2.差错控制(帧错+位错)<br><br>3.流量控制(慢点儿发，跟不上了。。。)<br><br>4.访问(接入)控制–控制对信道的访问<br></p></blockquote></blockquote><h6 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h6><p>主要任务是在物理媒体上实现比特流的透明传输（不管所传输的数据是什么样的比特组合，都应当能在链路上传送）<br><br>传输单位是比特<br></p><blockquote><p>功能：</p><blockquote><p>1.定义接口特性<br><br>2.定义传输模式<br><br>3.定义传输速率<br><br>4.比特同步<br><br>比特编码<br></p></blockquote></blockquote><h4 id="TCP-IP参考模型（4层）"><a href="#TCP-IP参考模型（4层）" class="headerlink" title="TCP/IP参考模型（4层）"></a>TCP/IP参考模型（4层）</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;计算机网络的概念&quot;&gt;&lt;a href=&quot;#计算机网络的概念&quot; class=&quot;headerlink&quot; title=&quot;计算机网络的概念&quot;&gt;&lt;/a&gt;计算机网络的概念&lt;/h4&gt;&lt;p&gt;计算机网络是一个将分散的，具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="http://yoursite.com/2020/01/15/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>http://yoursite.com/2020/01/15/进制转换/</id>
    <published>2020-01-15T06:28:41.000Z</published>
    <updated>2020-01-15T07:33:15.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将P进制数X转换为十进制数y"><a href="#将P进制数X转换为十进制数y" class="headerlink" title="将P进制数X转换为十进制数y"></a>将P进制数X转换为十进制数y</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int y=0,priduct=1;//1是P的0次方</span><br><span class="line">while(x!=0)</span><br><span class="line">&#123;</span><br><span class="line">y=y+(x%10)*product;//x%10是为了每次获取x的个位(此时输入为数值型。对于非数值型，一般用字符串作为输入，比如16进制数中的A到F，见下面的栗子)</span><br><span class="line">    x=x/10;//去掉x的个位</span><br><span class="line">    product=product*P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一个完整的栗子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">//16进制转换为10进制</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">        char s[10];</span><br><span class="line">        scanf(&quot;%s&quot;,s);</span><br><span class="line">        int sum=0,prod=1,t;</span><br><span class="line">        for(int i=strlen(s)-1;i&gt;=0;--i)</span><br><span class="line">        &#123;</span><br><span class="line">                if(s[i]&gt;=&apos;0&apos;&amp;&amp;s[i]&lt;=&apos;9&apos;)</span><br><span class="line">                        t=s[i]-&apos;0&apos;;</span><br><span class="line">                if(s[i]&gt;=&apos;a&apos;&amp;&amp;s[i]&lt;=&apos;z&apos;)</span><br><span class="line">                        t=s[i]-&apos;a&apos;+10;</span><br><span class="line">                if(s[i]&gt;=&apos;A&apos;&amp;&amp;s[i]&lt;=&apos;Z&apos;)</span><br><span class="line">                        t=s[i]-&apos;A&apos;+10;</span><br><span class="line">                sum=sum+t*prod;</span><br><span class="line">                prod=prod*16;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d&quot;,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将十进制数y转换为Q进制数z"><a href="#将十进制数y转换为Q进制数z" class="headerlink" title="将十进制数y转换为Q进制数z"></a>将十进制数y转换为Q进制数z</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int z[40],num=0;//z[]存放Q的每一位，num为位数</span><br><span class="line">do&#123;</span><br><span class="line">z[num++]=y%Q;</span><br><span class="line">    y=y/Q;</span><br><span class="line">&#125;while(y!=0)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;将P进制数X转换为十进制数y&quot;&gt;&lt;a href=&quot;#将P进制数X转换为十进制数y&quot; class=&quot;headerlink&quot; title=&quot;将P进制数X转换为十进制数y&quot;&gt;&lt;/a&gt;将P进制数X转换为十进制数y&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>日期差值</title>
    <link href="http://yoursite.com/2020/01/15/%E6%97%A5%E6%9C%9F%E5%B7%AE%E5%80%BC/"/>
    <id>http://yoursite.com/2020/01/15/日期差值/</id>
    <published>2020-01-15T06:11:04.000Z</published>
    <updated>2020-01-15T06:18:13.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>有两个日期,求两个日期之间的天数，如果两个日期是连续的，则规定它们之间的天数为两天 <br></p></blockquote><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><blockquote><p>有多组数据，每组数据有两行，分别表示两个日期，形式为YYYYMMDD<br></p></blockquote><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><blockquote><p>每组数据输出一行，即日期差值<br></p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>]=</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">28</span>,<span class="number">29</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;,&#123;<span class="number">30</span>,<span class="number">30</span>&#125;,&#123;<span class="number">31</span>,<span class="number">31</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isleap</span><span class="params">(<span class="keyword">int</span> year)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> time1,y1,m1,d1;</span><br><span class="line"><span class="keyword">int</span> time2,y2,m2,d2;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;time1,&amp;time2))!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(time1&gt;time2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp=time1;</span><br><span class="line">time1=time2;</span><br><span class="line">time2=temp;</span><br><span class="line">&#125;</span><br><span class="line">y1=time1/<span class="number">10000</span>;m1=time1%<span class="number">10000</span>/<span class="number">100</span>;d1=time1%<span class="number">100</span>;</span><br><span class="line">y2=time2/<span class="number">10000</span>;m2=time2%<span class="number">10000</span>/<span class="number">100</span>;d2=time2%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;<span class="comment">//记录结果</span></span><br><span class="line"><span class="keyword">while</span>(y1&lt;y2||m1&lt;m2||d1&lt;d2)</span><br><span class="line">&#123;</span><br><span class="line">d1++;</span><br><span class="line"><span class="keyword">if</span>(d1==month[m1][isleap(y1)]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">m1++;</span><br><span class="line">d1=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m1==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">y1++;</span><br><span class="line">m1=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有两个日期,求两个日期之间的天数，如果两个日期是连续的，则规定它们之间的天数为两天 &lt;br&gt;&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言字符串处理的一些坑</title>
    <link href="http://yoursite.com/2020/01/13/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2020/01/13/C语言字符串处理的一些坑/</id>
    <published>2020-01-13T05:25:39.000Z</published>
    <updated>2020-01-13T05:40:26.711Z</updated>
    
    <content type="html"><![CDATA[<p><code>scanf()</code>接收到空格，回车等不可打印字符时，将停止接收，所以，在用<code>scanf(&quot;%s&quot;,arr)</code>接收字符串时，只能接收到第一个空格前面的字符串内容；可以用<code>gets()</code>来接收含有空格等不可打印字符的字符串<br></p><p>补充：可以用 <code>scanf(&quot;%[^\n]&quot; , str)</code>   来输入一行包含空格的字符串，直到遇到换行符<code>\n</code> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt;接收到空格，回车等不可打印字符时，将停止接收，所以，在用&lt;code&gt;scanf(&amp;quot;%s&amp;quot;,arr)&lt;/code&gt;接收字符串时，只能接收到第一个空格前面的字符串内容；可以用&lt;code&gt;gets()&lt;/code&gt;来接收
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言字符处理的一些坑</title>
    <link href="http://yoursite.com/2020/01/13/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2020/01/13/C语言字符处理的一些坑/</id>
    <published>2020-01-13T05:05:04.000Z</published>
    <updated>2020-01-13T05:20:35.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="getchar"><a href="#getchar" class="headerlink" title="getchar"></a>getchar</h2><p>一次接收一个字符，直到接收到回车时停止（回车也会被接收）;<br><br>回车，制表符，换行都会被接收<br></p><p>坑：并不是每次程序执行到while后停下来等你输入一个字符并按下回车后在屏幕上输出该字符<br><br>注：scanf()与getchar()机制一样<br><br><img src="1.png" alt=""> <br></p><p>经常用getchar()来接收回车，如下：<br><br><img src="2.png" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;getchar&quot;&gt;&lt;a href=&quot;#getchar&quot; class=&quot;headerlink&quot; title=&quot;getchar&quot;&gt;&lt;/a&gt;getchar&lt;/h2&gt;&lt;p&gt;一次接收一个字符，直到接收到回车时停止（回车也会被接收）;&lt;br&gt;&lt;br&gt;回车，制表符，换行都会被接
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>灰色预测</title>
    <link href="http://yoursite.com/2019/12/28/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/12/28/灰色预测/</id>
    <published>2019-12-28T04:37:46.000Z</published>
    <updated>2019-12-28T04:58:52.382Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#累加生成新序列</span></span><br><span class="line">x0=[<span class="number">455</span>,<span class="number">425</span>,<span class="number">489</span>,<span class="number">500</span>,<span class="number">549</span>,<span class="number">663</span>,<span class="number">777</span>]<span class="comment">#只需将此处更换为自己的待预测序列即可</span></span><br><span class="line">x1=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x0))]<span class="comment">#用于存储累加后的序列,初始化为全0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义累加函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cumsum</span><span class="params">(x0)</span>:</span></span><br><span class="line">    n=len(x0)</span><br><span class="line">    x1[<span class="number">0</span>]=x0[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">        x1[i]=x0[i]+x1[i<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> x1</span><br><span class="line"></span><br><span class="line">x1=cumsum(x0)<span class="comment">#执行累加函数,此时x1中存储了累加后的有规律序列，用于接下来建模</span></span><br><span class="line"></span><br><span class="line">alpha=<span class="number">0.5</span><span class="comment">#这里的调参很重要！！</span></span><br><span class="line">z=[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x0)<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义"计算x1的加权均值"的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weigh_mean</span><span class="params">(x1)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(x1)):</span><br><span class="line">        <span class="comment">#z[j-1]=alpha*x1[j]+(1-alpha)*x1[j-1]</span></span><br><span class="line">        z[j<span class="number">-1</span>]=-alpha*(x1[j]+x1[j<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">z=weigh_mean(x1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解灰参数a与b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_params</span><span class="params">(z,x0)</span>:</span></span><br><span class="line">    B=(np.array([[z[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(z))],[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x0)<span class="number">-1</span>)]])).T</span><br><span class="line">    Yn=np.array([x0[j] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(x0))])</span><br><span class="line">    grey_params=np.array([<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">    grey_params=((np.linalg.inv((B.T).dot(B))).dot(B.T)).dot(Yn)</span><br><span class="line">    <span class="keyword">return</span> grey_params</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行cal_params（），得到灰参数a与b</span></span><br><span class="line">grey_params=cal_params(z,x0)</span><br><span class="line">a=grey_params[<span class="number">0</span>]</span><br><span class="line">b=grey_params[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#建立灰色预测模型</span></span><br><span class="line">n=len(x0)</span><br><span class="line">X0 = np.zeros(n)</span><br><span class="line">X0[<span class="number">0</span>] = x0[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">    X0[i] = (x0[<span class="number">0</span>] - b/a)*(<span class="number">1</span>-math.exp(a))*math.exp(-a*(i));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#模型精度的后验差检验</span></span><br><span class="line">e = <span class="number">0</span>      <span class="comment">#求残差平均值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">    e += (x0[i] - X0[i])</span><br><span class="line">e /= n</span><br><span class="line"></span><br><span class="line"><span class="comment">#求历史数据平均值</span></span><br><span class="line">aver = <span class="number">0</span>;     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">    aver += x0[i]</span><br><span class="line">aver /= n</span><br><span class="line"></span><br><span class="line"><span class="comment">#求历史数据方差</span></span><br><span class="line">s12 = <span class="number">0</span>;     </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">    s12 += (x0[i]-aver)**<span class="number">2</span>;</span><br><span class="line">s12 /= n</span><br><span class="line"></span><br><span class="line"><span class="comment">#求残差方差</span></span><br><span class="line">s22 = <span class="number">0</span>;       </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">    s22 += ((x0[i] - X0[i]) - e)**<span class="number">2</span>;</span><br><span class="line">s22 /= n</span><br><span class="line"></span><br><span class="line"><span class="comment">#求后验差比值</span></span><br><span class="line">C = s22 / s12   </span><br><span class="line"></span><br><span class="line"><span class="comment">#求小误差概率</span></span><br><span class="line">cout = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,n):</span><br><span class="line">    <span class="keyword">if</span> abs((x0[i] - X0[i]) - e) &lt; <span class="number">0.6754</span>*math.sqrt(s12):</span><br><span class="line">        cout = cout+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cout = cout</span><br><span class="line">P = cout / n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (C &lt; <span class="number">0.35</span> <span class="keyword">and</span> P &gt; <span class="number">0.95</span>):</span><br><span class="line">    <span class="comment">#预测精度为一级</span></span><br><span class="line">    m = int(input(<span class="string">"要预测多少期的呀？"</span>))   <span class="comment">#请输入需要预测的年数</span></span><br><span class="line">    <span class="comment">#print('往后m各年负荷为：')</span></span><br><span class="line">    f = np.zeros(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,m):</span><br><span class="line">        f[i] = (x0[<span class="number">0</span>] - b/a)*(<span class="number">1</span>-math.exp(a))*math.exp(-a*(i+n))<span class="comment">#加n表示预测之后的年份</span></span><br><span class="line">    print(<span class="string">"各期预测值为：\n"</span>,f)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'灰色预测法不适用，请使用其他模型'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> font_manager</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</span><br><span class="line"><span class="comment">#my_font=my_font = font_manager.FontProperties(fname="C:\Windows\Fonts\STZHONGS.ttf")</span></span><br><span class="line"><span class="comment">#检验过去</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.title(<span class="string">'预测录取人数与实际录取人数比较'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"年份"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"录取人数（单位：人）"</span>)</span><br><span class="line">plt.scatter([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2013</span>,<span class="number">2013</span>+len(x0))],x0,color=<span class="string">'red'</span>,label=<span class="string">"真实值"</span>)</span><br><span class="line">plt.scatter([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2013</span>,<span class="number">2013</span>+len(X0))],X0,label=<span class="string">"预测值"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"upper left"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#展望未来</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">plt.scatter([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2020</span>,<span class="number">2020</span>+m)],f,color=<span class="string">'g'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"年份"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"录取人数（单位：人）"</span>)</span><br><span class="line">plt.title(<span class="string">"未来7年录取人数预测"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="建模算法" scheme="http://yoursite.com/categories/%E5%BB%BA%E6%A8%A1%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>考研操作系统知识整理</title>
    <link href="http://yoursite.com/2019/11/16/%E8%80%83%E7%A0%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2019/11/16/考研操作系统知识整理/</id>
    <published>2019-11-16T14:36:07.000Z</published>
    <updated>2019-11-24T14:34:16.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h4 id="（一）操作系统概述"><a href="#（一）操作系统概述" class="headerlink" title="（一）操作系统概述"></a>（一）操作系统概述</h4><h5 id="1、操作系统的概念、特征、功能和提供的服务"><a href="#1、操作系统的概念、特征、功能和提供的服务" class="headerlink" title="1、操作系统的概念、特征、功能和提供的服务"></a>1、操作系统的概念、特征、功能和提供的服务<br></h5><p>【操作系统的概念】<br></p><blockquote><p>用户观点：根据用户所使用计算机的不同而设计不同类型的操作系统<br><br>系统观点：操作系统是计算机系统的资源管理程序<br><br>进程观点：操作系统由若干个可以独立运行的程序和一个对这些程序进行协调的核心所组成<br><br>虚拟机观点：也称机器扩充，操作系统为用户使用计算机提供了许多服务功能和良好的工作环境<br></p></blockquote><p>【操作系统的特征】</p><blockquote><p>并发性：两个或多个事件在在同一时间间隔内发生（而并行性是指两个或多个事件在同一时刻发生）<br><br>共享性：系统中的硬件和软件资源不再为某个程序所独占，而是供多个用户共同使用（包括互斥共享（如<code>打印机，某些变量，队列等一段时间只能供一个作业使用的资源</code>）和同时访问（如<code>可重入代码，磁盘等</code>），后者作业访问资源的顺序不会影响访问的结果）<br><br>虚拟性：把一个物理上的实体变为若干个逻辑上的对应物<br><br>异步性：在多道程序环境中，由于资源等因素的限制，程序走走停停，以不可预知的速度向前推进<br></p></blockquote><p>【操作系统的功能】</p><blockquote><p>处理器管理：对处理器的分配和和运行（以进程为单位）实施有效的管理，包括<code>进程控制（负责进程的创建，撤销以及状态转换），进程同步（对并发执行的进程进行协调），进程通信（负责进程间的信息交流），进程调度（按一定算法进行处理器分配）</code> <br><br>存储器管理：对内存进行分配，保护和扩充，包括<code>内存分配（按一定策略为每道程序分配内存），内存保护（保证各程序在自己的内存区域内运行而不相互干扰），内存扩充（为允许大型最作业或多作业的运行，必须借助虚拟存储技术去获得增加内存的效果）</code>  <br><br>设备管理：对计算机系统内的所有设备进行管理。包括<code>设备分配（根据一定的设备分配原则对设备进行分配），设备传输控制（实现物理的输入输出操作），设备独立性（用户程序中的设备与实际使用的物理设备无关)</code> <br><br>文件管理：操作系统中负责信息管理的部分称为文件系统，文件管理的主要任务包括<code>文件存储空间的管理（存储空间的分配与回收），目录管理（提供按名存取的功能），文件操作管理（负责完成数据的读写），文件保护</code> <br><br>用户接口：方便用户使用操作系统，包括<code>命令接口（包括联机命令接口和脱机命令接口），程序接口（也称系统调用），图形接口</code><br></p></blockquote><p>【操作系统提供的服务】</p><blockquote><p>程序执行，I/O操作，文件操作，资源分配与保护，错误检测与排除 <br></p></blockquote><h5 id="2、操作系统的发展与分类"><a href="#2、操作系统的发展与分类" class="headerlink" title="2、操作系统的发展与分类"></a>2、操作系统的发展与分类<br></h5><p>【操作系统的发展】</p><blockquote><p>无操作系统阶段：用户独占资源，资源利用率低，CPU等待人工操作，手工操作的慢速CPU运算的高速矛盾（引入了脱机输入/输出技术）<br>单道批处理系统：自动性，顺序性，单道性<br>多道批处理系统：多道，宏观上并行，微观上串行 <br></p></blockquote><p>【操作系统的分类】</p><blockquote><p>批处理操作系统：运行过程无需用户干预，大大提高了系统资源利用率和系统吞吐量，但无交互性，使用不便<br></p><p>分时操作系统：在操作系统中采用分时技术（<code>把处理器的运行时间分成很短的时间片，按时间片轮流把处理器为分配给各联机作业使用</code>）而得,特征是多路性，交互性，独占性，及时性 <br></p><p>实时操作系统：提供及时响应和高可靠性 <br></p><p>嵌入式操作系统 <br></p><p>集群系统：将两个或多个独立的系统耦合起来，共同完成一项任务 <br></p><p>网络操作系统 <br></p><p>分布式操作系统 <br></p></blockquote><h4 id="（二）进程管理"><a href="#（二）进程管理" class="headerlink" title="（二）进程管理"></a>（二）进程管理</h4><h5 id="1、进程与线程的基本概念"><a href="#1、进程与线程的基本概念" class="headerlink" title="1、进程与线程的基本概念"></a>1、进程与线程的基本概念</h5><p>【进程的定义】</p><blockquote><p>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位<br></p></blockquote><p>【进程的组成】</p><blockquote><p>程序段：进程中能被进程调度程序调度到CPU上执行的代码段<br></p><p>数据段：进程对应的程序加工处理的原始数据或者程序执行时产生的中间或结果数据<br></p><p>PCB：既能标识进程存在，又能刻画执行瞬间的数据结构 <br></p></blockquote><p>【进程的特征】</p><blockquote><p>动态性：进程是程序的一次执行过程，是动态地产生，变化和消亡的 <br></p><p>并发性：内存中有多个进程实体，各进程可并发执行<br></p><p>独立性：进程是能独立运行，独立获得资源，独立接受调度的基本单位<br>-</p><p>异步性：各进程按各自独立的，不可预知的速度向前推进<br></p><p>结构性：每个进程都会配置一个PCB，结构上看，进程由数据段，程序段，PCB组成<br></p></blockquote><p>【进程与程序的关系】</p><blockquote><p>进程是动态的，程序是静态的<br></p><p>进程是暂时的，进程是永久的<br></p><p>进程与程序的组成不同<br></p><p>通过多次执行，一个程序可以产生多个不同的进程；通过调用关系，一个进程可以执行多个程序。进程可以创建其他进程，而程序不能形成新的程序<br></p><p>进程具有并行特性，而程序没有<br></p></blockquote><p>【进程与作业的关系】</p><blockquote><p>作业是用户向计算机提交任务的任务实体，而进程则是完成用户任务的执行实体，是向系统申请分配资源的基本单位<br></p><p>一个作业可由一个或多个进程组成，但一个进程不能构成多个作业<br></p><p>作业的概念主要用在批处理系统中，而进程的概念则几乎用在所有的多道程序系统中<br></p></blockquote><p>【为什么PCB是进程存在的唯一标志？】</p><blockquote><p>在系统调度到某进程后，要根据其PCB中所保存的处理机状态信息，设置该进程恢复运行的现场，并根据其PCB中的程序和数据的内存地址，找到其程序和数据<br></p><p>进程在执行过程中，当需要和与之合作的进程实现同步，通信或访问文件时，也都需要访问PCB<br></p><p>当程序由于某种原因暂停执行时，又需要将其断点的处理机环境保存在PCB中<br></p></blockquote><p>【导致进程创建的事件有哪些？】</p><blockquote><p>用户登录。在分时系统中，用户在终端输入登录信息，系统检测通过后就为该终端用户建立新进程并插入到就绪队列<br></p><p>作业调度。在批处理系统中，当作业调度程序按照一定的算法调度到某个作业时，将该作业装入内存，并为其分配资源并创建进程，并插入到就绪队列<br></p><p>请求服务。基于进程的需要，由其自身创建一个新进程并完成特定任务<br><br>-<br>【创建进程时，操作系统需要完成的主要工作是什么？】</p></blockquote><blockquote><p>先向系统申请一个空闲PCB，并指定唯一的进程标识符（PID）<br></p><p>为新进程分配必要的资源<br></p><p>将新进程的PCB初始化。为新进程的PCB填入进程名，家族信息，程序数据地址，优先级等信息<br></p><p>将新进程的PCB插入到就绪队列<br></p></blockquote><p>【导致进程撤销的事件有哪些？】</p><blockquote><p>进程正常结束，进程异常结束以及外界干预等<br></p></blockquote><p>【撤销一个进程时，操作系统主要完成的工作是什么？】</p><blockquote><p>先从PCB集合中找到被撤销进程的PCB<br></p><p>若被撤销进程正处于执行状态，则应立即停止该进程的执行，设置重新调度标识，以便进程重新后将处理器分配给其他进程<br></p><p>对后一种撤销策略，若被撤销进程有子孙进程，还应将该进程的子孙进程撤销<br></p><p>回收被撤销进程所占有的资源，或者归还给父进程，或者归还给系统。最后，回收其PCB<br></p></blockquote><p>【阻塞一个进程时，操作系统主要完成的工作是什么？】</p><blockquote><p>首先停止当前进程的运行。因该进程正处于执行状态，故应中断处理器<br></p><p>保存该进程的CPU现场以便之后可以重新调用该进程并从中断点开始执行<br></p><p>停止运行该进程，将进程状态由执行状态改为阻塞状态，然后将该进程插入到相应事件的等待队列中<br></p><p>转到进程调度程序，从就绪队列中选择一个新的进程投入运行<br></p></blockquote><p>【唤醒一个进程时，操作系统主要完成的工作是什么？】</p><blockquote><p>将被唤醒进程从相应的等待队列中移出<br></p><p>将状态改为就绪并插入相应的就绪队列<br></p></blockquote><p>【简述进程上下文切换的过程】==【切换进程时，操作系统主要完成的工作是什么？】</p><blockquote><p>保存处理及上下文，包括程序计数器和其他寄存器<br></p><p>更新PCB信息<br></p><p>把进程的PCB移入相应队列，如就绪，某事件的阻塞队列<br></p><p>选择另一个进程执行，更新其PCB<br></p><p>更新内存管理的数据结构<br></p><p>恢复处理器上下文<br></p></blockquote><p>【线程的定义】</p><blockquote><p>线程是进程内一个相对独立的，可调度的执行单元<br></p></blockquote><p>【线程的实现】</p><blockquote><p>内核级线程：依赖于内核，由操作系统内核完成创建和撤销工作的线程<br></p><p>用户级线程：不依赖于操作系统核心，由应用进程利用线程库提供创建，同步，调度和管理线程的函数来控制的线程<br></p><p>组合方式：同时提供内核线程控制机制和用户线程库<br></p></blockquote><p>【多线程模型】 <br></p><p>【线程与进程的比较】</p><blockquote><p>调度。引入线程后，线程是独立调度的基本单位，进程是拥有资源的基本单位；在同一进程中，线程的切换不会引起进程切换；在不同进程中进行线程切换，将引起进程切换<br></p><p>拥有资源。进程始终是拥有资源的基本单位，线程可以访问其隶属进程的系统资源<br></p><p>并发性。引入进程的操作系统中，不仅进程之间可以并发执行，而且同一进程内的多个线程之间也可以并发执行，这使得操作系统具有更好的并发性，大大提高了系统的资源吞吐量<br></p><p>系统开销。引入线程后，线程之间的切换开销很小，而且由于同一进程内的多个线程共享进程的地址空间，因此多线程之间的同步与通信容易实现<br></p></blockquote><h5 id="2、进程调度的基本概念、调度方式、调度算法"><a href="#2、进程调度的基本概念、调度方式、调度算法" class="headerlink" title="2、进程调度的基本概念、调度方式、调度算法"></a>2、进程调度的基本概念、调度方式、调度算法</h5><p>【操作系统中的3级调度】</p><blockquote><p>高级调度，又称作业调度，按照某种规则，从后备队列中选择合适的作业将其调入内存，并为其创建进程，发生频率最低<br></p><p>中级调度，又称内存调度，按照某种规则，从挂起队列中选择合适的进程将其数据调回内存，发生频率中等<br></p><p>低级调度，又称进程调度，按照某种规则，从就绪队列中选择一个进程为其分配处理机，发生频率最高</p></blockquote><p>【进程调度的概念】</p><blockquote><p>系统按照一定的策略动态地把处理器分配给就绪队列中的某个进程，以便使之执行<br></p></blockquote><p>【进程调度的功能】</p><blockquote><p>用PCB记录系统中所有进程的有关情况以及状态特征<br></p><p>选择获得处理器的进程<br></p><p>处理器分配<br></p></blockquote><p>【引起进程调度的原因】</p><blockquote><p>当前进程运行结束，包括任务完成而正常结束或者因出现错误而异常结束<br></p><p>当前运行进程因某种原因，如I/O请求，P操作，阻塞原语等从运行态变为阻塞态<br></p><p>执行完系统调用等系统程序后返回用户进程，这时可以看作系统进程执行完毕，从而可以调度一个新的用户进程<br></p><p>在采用抢占式调度方式的系统中，更高优先级的进程要求使用处理器，则使当前运行进程进入就绪队列<br></p><p>在分时系统中，分配给该进程的时间片已用完<br></p></blockquote><p>【不能进行进程调度的情况】</p><blockquote><p>处理中断的过程中。处理中断过程复杂，很难做到进程切换，而且中断处理是系统工作的一部分，逻辑上不属于某一进程，不应被剥夺处理器资源<br></p><p>在操作系统内核程序临界区中。进程进入临界区后，需要独占式地访问共享数据，理论上必须加锁，以防止其他并行程序进入，在解锁前不应切换到其他进程运行，以加快该共享数据的释放<br></p><p>在其他需要完全屏蔽中断的原子操作过程中。原子操作不可再分，不能进行进程切换<br></p></blockquote><p>【进程调度的方式】==【CPU调度算法中抢占式调度和非抢占式调度有何区别？】</p><blockquote><p>抢占方式，当一个进程正在处理器上运行时，若有更高优先级的进程进入就绪队列，则立即暂停执行当前进程，将处理器分配给新进程。可优先处理紧急进程，也可实现让各进程按时间片轮流执行，适用于分时操作系统，实时操作系统<br></p><p>非抢占方式，当一个进程正在处理器上运行时，即使有更高优先级的进程进入就绪队列，仍然让正在执行的进程继续执行，直到该进程完成或者因发生某种事件而进入完成或者阻塞状态时，才把处理器分配个新进程。实现简单，开销小，但无法处理紧急任务，适用于早期批处理系统<br></p></blockquote><p>【调度算法】</p><blockquote><p>先来先服务<br></p><p>短作业优先<br></p><p>优先级调度，分为抢占式和非抢占式，优先级相同时，通常按照先来先服务或者短作业优先的顺序执行<br></p><p>时间片轮转<br></p><p>高响应比优先，响应比=（等待时间+运行时间）/运行时间<br></p><p>多级反馈队列调度<br></p></blockquote><h5 id="3、进程同步的基本概念、临界区、信号量、经典同步问题"><a href="#3、进程同步的基本概念、临界区、信号量、经典同步问题" class="headerlink" title="3、进程同步的基本概念、临界区、信号量、经典同步问题"></a>3、进程同步的基本概念、临界区、信号量、经典同步问题</h5><p>【两种形式的制约关系】</p><blockquote><p>间接相互制约关系（互斥）<br></p><p>直接相互制约关系（同步）<br></p></blockquote><p>【临界资源与临界区】</p><blockquote><p>临界资源：同时仅允许一个进程使用的资源<br></p><p>临界区：进程中用于访问临界资源的代码，又称临界段<br></p></blockquote><p>【互斥的要求】</p><blockquote><p>空闲让进：当没有进程处于临界区时，可以允许一个请求进入临界区的进程立即进入临界区<br></p><p>忙则等待：当已有进程进入临界区时，其他师徒进入的进程必须等待<br></p><p>有限等待：对要求访问临界区的进程，应在有限的时间内进入自己的临界区<br></p><p>让权等待：当一个进程因为某些已有无法进入自己的临界区时，应释放处理器给其他进程<br></p></blockquote><p>【信号量】</p><blockquote><p>(1)整型信号量：未遵循让权等待<br></p><p>(2)记录型信号量（资源信号量），P&amp;V 操作主要用这个<br></p></blockquote><p>【经典同步问题】</p><blockquote><p>生产者-消费者</p><p>读者写者问题（读优先，读写公平，写优先）</p><p>哲学家进餐</p><p>理发师</p></blockquote><p>【PV操作的框架细节】</p><blockquote><p>根据实际进程类型来判断是否添加while循环代码</p><p>用cobegin和coend表示进程之间的并发执行</p></blockquote><h5 id="4、死锁的基本概念、处理策略、死锁预防和死锁避免的算法、死锁检测"><a href="#4、死锁的基本概念、处理策略、死锁预防和死锁避免的算法、死锁检测" class="headerlink" title="4、死锁的基本概念、处理策略、死锁预防和死锁避免的算法、死锁检测"></a>4、死锁的基本概念、处理策略、死锁预防和死锁避免的算法、死锁检测</h5><p>【死锁的定义】</p><blockquote><p>当多个进程因竞争系统资源或相互通信而处于永久阻塞状态时，若无外力作用，这些进程都将无法向前推进，均无限期地等待此组进程中某个其他进程占有的，自己永远无法得到的资源，这种现象称之为死锁<br></p></blockquote><p>【可剥夺资源与不可剥夺资源的区别】</p><blockquote><p>可剥夺资源是指虽然资源占有者进程需要使用该资源，但另一个进程可以强行把该资源剥夺来归自己使用<br></p><p>不可剥夺资源是指除占有者进程不再需要使用该资源而主动释放资源，其他进程不可在资源占有者使用资源过程中强行剥夺<br></p></blockquote><p>【死锁产生的原因】</p><blockquote><p>系统资源不足（根本原因）<br></p><p>进程推进顺序不当<br></p><p>信号量的使用不当<br></p><p><code>简而言之，对不可剥夺资源的不合理分配，可能导致死锁</code><br></p></blockquote><p>【死锁产生的必要条件】</p><blockquote><p>互斥条件：进程要求对所分配的资源进行排他性控制，即在一段时间内某种资源仅为一个进程所占有<br></p><p>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，只能由获得该资源的进程主动释放<br></p><p>请求和保持条件：也成部分分配条件，是指进程已经保持了至少一个资源，但又提出了新的资源请求，而在等待新的资源被分配的同时，又对已有资源保持占有<br></p><p>循环等待条件：存在一种资源的循环等待链，而链中每一个进程已获得的资源同时被链中的下一个进程所请求<br></p></blockquote><p>【处理死锁的基本方法】</p><blockquote><p>鸵鸟算法：视死锁不见<br></p><p>预防死锁：破坏死锁产生的4个必要条件中的一个或多个<br></p><p>避免死锁：在资源的动态分配过程中<br></p><p>检测及解除死锁<br></p></blockquote><p>【死锁的预防】</p><blockquote><p>破坏互斥条件：允许多个进程同时访问资源，可行性不高<br></p><p>破坏不剥夺条件：对于一个已经获得了某些资源的进程，若新的资源请求不能立即得到满足，则它必须释放所拥有的全部资源，以后需要时再重新申请，实现复杂，可能导致部分工作失效，导致系统开销增大，导致饥饿<br></p><p>破坏请求和保持条件：运行之前一次行分配好所需要的全部资源，简单安全，但资源利用率低，可能导致饥饿<br></p><p>破坏循环等待条件：给资源编号，必须按照编号从小到大的顺序申请资源，不方便增加新设备，会造成资源浪费，用户编程麻烦<br></p></blockquote><p>【死锁的避免】</p><blockquote><p>银行家算法</p></blockquote><p>【死锁定理】</p><blockquote><p>系统状态为死锁的条件是：当且仅当g该状态下的资源分配图是不可完全简化的<br></p></blockquote><p>【死锁的检测】</p><blockquote><p>死锁检测算法</p></blockquote><p>【死锁的解除】</p><blockquote><p>资源剥夺法：从其他进程中抢占足够的资源给死锁的进程以解除其死锁状态<br></p><p>撤销进程法：撤销一些进程，直到有足够的资源分配给其他进程，进程死锁状态<br></p><p>进程回退法：让一个或多个进程回退到足以避免死锁的地步，进程回退时资源释放资源而不是被剥夺，要求系统保持进程的历史信息，设置还原点<br></p></blockquote><h4 id="（三）内存管理"><a href="#（三）内存管理" class="headerlink" title="（三）内存管理"></a>（三）内存管理</h4><h5 id="1、内存管理基本概念"><a href="#1、内存管理基本概念" class="headerlink" title="1、内存管理基本概念"></a>1、内存管理基本概念</h5><p>【内存管理的功能】</p><blockquote><p>内存的分配与回收<br></p><p>地址变换<br></p><p>内存扩充<br></p><p>存储保护<br></p></blockquote><p>【链接的3种方式】</p><blockquote><p>静态链接：在程序运行之前，先把各个目标模块及所需库链接为一个完整的可执行程序，以后不再拆开<br></p><p>动态链接：将应用程序编译后所得到一组目标模块装入内存时采用边装入边链接的动态链接方式<br></p><p>运行时动态链接：在程序执行中需要该目标模块时，才对这些模块进行链接，便于修改和更新，便于实现对目标模块的共享<br></p></blockquote><p>【程序装入的3种方式】</p><blockquote><p>绝对装入：编译时就知道程序将要驻留在内存中的物理地址，编译程序产生含有物理地址的目标代码，不适合多道程序设计<br></p><p>可重定位装入：又称静态重定位，根据内存当前情况，将装入模块装入到内存的适当位置，地址变换通常在装入时一次完成，之后不再改变，适用于早期的多道批处理操作系统，容易实现，无需增加硬件地址变换机构，但要求为每个程序分配一个连续的存储区，而且在程序执行期间不能移动，不能再申请内存空间，难以做到程序和数据的共享<br></p><p>动态运行时装入：又称动态重定位，允许程序运行时在内存中移动位置，把地址变换推迟到程序真正要执行时才进行，需要一个重定位寄存器的支持：物理地址=基址寄存器内容+逻辑地址<br></p></blockquote><p>【内存保护的方法】</p><blockquote><p>界限寄存器方法，包括上、下界寄存器方法和基址和限长寄存器方法<br></p><p>存储保护键方法,给每个存储块分配一个单独的保护键<br></p></blockquote><h5 id="2、内存交换及分页、分段、段页式内存分配管理"><a href="#2、内存交换及分页、分段、段页式内存分配管理" class="headerlink" title="2、内存交换及分页、分段、段页式内存分配管理"></a>2、内存交换及分页、分段、段页式内存分配管理</h5><p>【内存空间的扩充】</p><blockquote><p>覆盖<br></p><p>交换<br></p></blockquote><p>【连续分配管理方式】</p><blockquote><p>单一连续分配<br></p><p>固定分区分配<br></p><p>动态分区分配<br></p></blockquote><p>【动态分区分配算法】</p><blockquote><p>首次适应算法<br></p><p>最佳适应算法<br></p><p>最坏适应算法<br></p><p>邻近适应算法<br></p></blockquote><p>【基本分页存储管理方式的优缺点】</p><blockquote><p>优点：内存利用率高，实现了离散分配，便于存储访问控制，无外部碎片<br></p><p>缺点：需要硬件支持（尤其是快表），内存访问效率下降，共享困难，有内部碎片<br></p></blockquote><p>【基本分段存储管理方式的优缺点】</p><blockquote><p>优点：便于程序模块化处理和处理变换的数据结构，便于动态链接和共享，无内部碎片<br></p><p>缺点：与分页类似，需要硬件支持；为满足分段的动态增长和减少外部碎片，要采用拼接技术；分段的最大尺寸受到主存可用空间的限制；有外部碎片<br></p></blockquote><p>【分段与分页的区别】</p><blockquote><p>页是信息的物理单位，段是信息的逻辑单位；<br></p><p>分页的目的是系统管理所需，为了提高内存利用率；分段的目的是为了更好的满足用户的需要<br></p><p>页的大小固定且由系统决定；段的长度不固定，段长由用户编写的程序决定<br></p><p>分页的地址空间是一维的，而分段的地址空间是二维的；<br></p><p>分页有内部碎片，无外部碎片；分段有外部碎片，无内部碎片<br></p></blockquote><p>【页式存储管理方式中设置快表的作用】</p><blockquote><p>快表，又称联想寄存器(TLB)，时一种访问速度比内存快很多的高速缓存，用来存放最近访问过的页表项的副本，若快表命中，则只要访问一次高速缓存以及一次主存即可，这样就可以加速地址变换的速度，从而提高了查找的速度和指令执行效率<br></p></blockquote><h5 id="3、虚拟内存"><a href="#3、虚拟内存" class="headerlink" title="3、虚拟内存"></a>3、虚拟内存</h5><p>（1）虚拟内存的基本概念</p><p>【虚拟内存的特征】</p><blockquote><p>离散性：程序在内存中离散存储<br></p><p>多次性：一个作业可以分成多次调入内存<br></p><p>对换性：又称交换性，指作业在运行过程中可以换入换出<br></p><p>虚拟性：从逻辑上扩充内存容量，用户可以使用的空间远大于实际内存容量<br></p></blockquote><p>【局部性原理】</p><blockquote><p>时间局部性：一条指令的一次执行和下次执行，一个数据的一次访问和下次访问，都集中在一个较短的时期内<br></p><p>空间局部性：当前指令和邻近的几条指令，当前访问的数据和邻近的数据，都集中在一个较小的区域内<br></p></blockquote><p>【请求分页存储管理原理】</p><blockquote><p>在分页存储管理系统的基础上，通过增加请求调页功能，页面置换功能所形成的一种虚拟存储系统;在资源运行之前，装入部分页面便可投入运行，运行时若缺页则调页，同时还可以通过页面置换功能将暂时用不到的页面调出到外存<br></p></blockquote><p>【请求分页管理方式的优缺点】</p><blockquote><p>优点：可以离散存储程序，降低了碎片数量；提供虚拟存储器，提高了主存利用率，有利于多道程序运行，方便用户<br></p><p>缺点：必须有硬件支持；有些情况下会产生抖动现象；程序最后一页仍存在未被利用的部分空间<br></p></blockquote><p>（2）页面置换算法</p><p>【页面置换算法】</p><blockquote><p>最佳置换算法（OPT)<br></p><p>先进先出算法(FIFO)<br></p><p>最近最少使用算法(LRU) <br></p><p>时钟置换算法（CLOCK） <br></p><p>改进型时钟置换算法<br></p></blockquote><p>【抖动现象】</p><blockquote><p>刚刚换出的页面，过后不久又要访问，并且调入不久后又被调出，如此反复，使得系统把大部分的时间用在了页面的调入调出上，而几乎不能有效的工作<br></p></blockquote><p>（3）页面分配策略</p><p>【工作集】</p><blockquote><p>定义：最近n次内存访问的页面集合，数字n被称作工作集窗口，也就是工作集的大小<br></p></blockquote><p>【页面分配策略】</p><blockquote><p>固定分配全局置换<br></p><p>可变分配全局置换<br></p><p>可变分配局部置换<br></p></blockquote><p>【页面调入策略】==【何时调入页面】</p><blockquote><p>请求调页策略，实现简单，但容易产生缺页中断，时间开销大，容易产生抖动现象<br></p><p>预调页策略，将之后可能用到的页面一次全部调入内存<br></p></blockquote><p>【从何处调入页面】</p><blockquote><p>系统拥有足够的对换区空间，则全部从对换区调入所需页面，以提高调页速度<br></p><p>系统缺少足够的对换区空间，凡是不会被修改的文件都从文件区调入，置换出这些页面时，由于他们没有被修改而不必再将它们换出，右后再调入时，仍从文件区直接调入。但对于那些可能被修改的部分，在将它们换出时，就应调换到对换区，以后需要时再从对换区调入<br></p><p>UNIX方式：进程运行前，相关数据全放在文件区，故未使用过的页面都可以从文件区调入；若被使用过的页面需要换出时，则写回对换区，下次需要时从调换区调入<br></p></blockquote><h4 id="（四）文件管理"><a href="#（四）文件管理" class="headerlink" title="（四）文件管理"></a>（四）文件管理</h4><h5 id="1、文件系统基础"><a href="#1、文件系统基础" class="headerlink" title="1、文件系统基础"></a>1、文件系统基础</h5><p>（1）文件概念</p><p>【文件的定义】</p><blockquote><p>文件是具有文件名的一组相关元素的集合，在文件系统中是一个最大的数据单位，它描述了一个对象集，每个文件都有一个文件名，用户通过文件名来访问文件<br></p></blockquote><p>【文件的组成结构】</p><blockquote><p>数据项，文件系统中最低级的数据组织形式，包括基本数据项(<code>用于描述一个对象是的某种特性的一个值</code>)和组合数据项(<code>由多个数据项组合而成</code>)<br></p><p>记录，是指一组相关的数据项的集合，用于描述一个对象在某一方面的属性<br></p><p>文件，是指由创建者所定义的一组相关数据的集合，逻辑上可分为有结构文件和无结构文件<br></p></blockquote><p>【文件的属性】</p><blockquote><p>名称。文件名唯一，以容易读取的形式保存<br></p><p>标识符。系统内文件的唯一标签，对用户透明<br></p><p>文件类型。被支持不同类型的文件系统使用<br></p><p>文件位置。指向文件的指针<br></p><p>文件的大小，建立时间，用户标识<br></p></blockquote><p>（2）文件的逻辑结构：顺序文件、索引文件和索引顺序文件</p><p>【3种有结构文件】</p><blockquote><p>顺序文件：定长记录的顺序文件，若物理上采用顺序存储则可以实现随机存取，若再能保证记录的顺序结构，则可实现快速检索，但因为文件存储要求连续的存储空间，所以会产生碎片，同时也不利于文件的动态扩充<br></p><p>索引文件：可以进行随机访问，易于文件的增删，但索引表的使用增加了存储空间的开销，并且索引表的查找策略对文件系统的影响很大<br></p><p>索引顺序文件：大大提高了了顺序存取速度，但仍需配置一个索引表，增加了存储开销<br></p></blockquote><p>（3）目录结构</p><p>【目录的功能】</p><blockquote><p>实现按名存取<br></p><p>提高检索速度<br></p><p>允许文件同名<br></p><p>允许文件共享<br></p></blockquote><p>【区分文件目录，目录文件】</p><blockquote><p>文件目录：FCB的有序集合，一个FCB称为一个文件目录项<br></p><p>目录文件：为了实现文件目录的管理，通常将文件目录以文件的形式保存在外存空间，这个文件就称为目录文件（它是长度固定的记录式文件)<br></p></blockquote><p>【文件控制块FCB】</p><blockquote><p>文件控制块是用于保存文件属性信息的数据结构，至少包含以下信息：文件名，文件的结构（有结构的记录式文件or无格式的流式文件），文件的物理位置，存取控制信息，管理信息<br></p></blockquote><p>【索引结点】</p><blockquote><p>FCB的改进，把除了文件名之外的其他文件描述信息都放到<code>索引结点（i结点）</code>，文件目录中的每个目录项仅由文件名和指向该文件i节点的指针构成；<br></p><p>存放在磁盘上的使用节点称为<code>磁盘索引节点</code>，每个文件都有唯一的磁盘索引节点，主要包括以下内容：文件主标识符，文件类型，文件存取权限，文件物理地址，文件长度，文件链接计数，文件存取时间；<br></p><p>存放在内存中的索引节点称为<code>内存索引节点</code>，主要包括以下内容：索引节点编号，状态，访问计数，逻辑设备号，链接指针<br></p></blockquote><p>【文件的目录结构】</p><blockquote><p>单级目录结构，在整个文件系统中只建立一张目录表，每个文件占据其中的一个表目，易于实现，管理简单，但不允许文件重名，文件查找速度慢<br></p><p>二级目录结构，将文件目录分为主文件目录和用户文件目录，允许文件重名，可获得较高的查找速度，但缺乏灵活性，用户不能对自己的文件进行分类<br></p><p>多级目录结构，又称树形目录结构，，使用路径名来唯一标识文件，便于对文件分类，层次结构清晰，能更有效的进行文件的管理与保护，但查找文件时需按照路径名逐级访问中间节点，增加了磁盘访问次数，进而影响了查询速度<br></p><p>无环图目录结构，实现了文件的共享，但使得系统的管理变得复杂<br></p></blockquote><p>（4）文件的访问类型及访问控制</p><p>【访问类型】</p><blockquote><p>读，写，执行，添加，删除，列表清单</p></blockquote><p>【访问控制】</p><blockquote><p>对不同的用户访问同一个文件采取不同的访问类型，访问控制通常有四种方法：<br></p><p>​    访问控制矩阵，访问控制表和用户权限表都是采用某种数据结构来记录用户或用户组对每个文件的操作权限，而口令和密码是另一种访问控制方法，口令直接存储在系统内部，不够安全，密码方法的保密性强，节省存储空间，但编码和译码要花费一定时间<br></p></blockquote><h5 id="2、文件系统实现"><a href="#2、文件系统实现" class="headerlink" title="2、文件系统实现"></a>2、文件系统实现</h5><p>（1）文件系统层次结构</p><p>【文件的层次结构】</p><blockquote><p>用户接口<br></p><p>文件目录系统<br></p><p>存取控制验证<br></p><p>逻辑文件系统与文件信息缓冲区<br></p><p>物理文件系统<br></p></blockquote><p>（2）目录实现</p><p>【目录的实现】</p><blockquote><p>线性表<br></p><p>散列表<br></p></blockquote><p>（3）文件实现</p><p>【外存分配方式】</p><blockquote><p>静态分配：在文件建立时一次性分配所需的全部空间<br></p><p>动态分配：根据动态增长的文件长度进行分配<br></p></blockquote><p>【连续分配】</p><blockquote><p>最简单的磁盘空间分配策略，为文件分配连续的磁盘区域，保证了逻辑文件中的记录顺序与存储器中文件占用盘块顺序一致；优点是查找速度快（只需起始块号和文件大小），目录中关于文件物理存储位置的信息也比较简单，缺点是不方便文件拓展，容易产生碎片，需要定期进行存储空间的紧缩<br></p></blockquote><p>【链接分配】</p><blockquote><p>分为隐式链接和显式链接。<br></p><p>隐式链接（默认）：目录项中有指向索引顺序文件的第一块盘块和最后一块盘块的指针，此外每个盘块中都含有指向下一个盘块的指针；缺点是不支持随机访问，访问效率低下，并且由于其中任何一个盘块的指针错误都会导致后面的盘块的位置丢失；另外，指向下一个盘块的指针也需要耗费少量的存储空间；优点是方便文件拓展，不会有碎片问题，外存利用率高<br></p><p>显式链接：把用于链接文件各物理块的指针显式地存放在一张表中，称为文件分配表(FAT)，一个磁盘仅设置一张FAT并且在开机时就将其读入内存且常驻内存；优点是既支持顺序访问，又支持随机访问，块号转换过程无需访问磁盘，因此访问速度较快；缺点是FAT需要占用一定的存储空间<br></p></blockquote><p>【索引分配】</p><blockquote><p>系统为每个文件分配一个索引块，索引块中存放索引表，索引表的每个表项对应分配给该文件的一个物理块；优点是支持随机访问，无外部碎片，便于文件拓展，缺点是访存次数增加导致文件的存取速度降低（可以通过提前将索引表调入内存来解决），索引表本身需占用一定的存储空间<br></p></blockquote><p>【文件的存储空间管理】</p><blockquote><p>空闲文件表</p><p>空闲块链表</p><p>位示图，保存在主存中<br></p><p>成组链接法(UNIX的文件存储空间管理方法)，适用于大型文件系统<br></p></blockquote><h5 id="3、磁盘组织与管理"><a href="#3、磁盘组织与管理" class="headerlink" title="3、磁盘组织与管理"></a>3、磁盘组织与管理</h5><p>（1）磁盘的结构</p><blockquote><p>引导控制块<br></p><p>分区控制块<br></p><p>目录结构<br></p><p>文件控制块<br></p></blockquote><p>（2）磁盘的调度算法</p><blockquote><p>先来先服务(FCFS)<br></p><p>最短寻道时间优先(SSTF)<br></p><p>扫描算法（电梯调度算法）(SCAN)<br></p><p>循环扫描算法(C-SCAN)<br></p></blockquote><h4 id="（五）输入输出（I-O）管理"><a href="#（五）输入输出（I-O）管理" class="headerlink" title="（五）输入输出（I/O）管理"></a>（五）输入输出（I/O）管理</h4><h5 id="1、I-O管理概述"><a href="#1、I-O管理概述" class="headerlink" title="1、I/O管理概述"></a>1、I/O管理概述</h5><p>【I/O设备的分类】</p><blockquote><p>（1）按照使用特性：存储设备，人机交互设备，网络通信设备<br></p><p>（2）按照信息交换单位：字符设备（如<code>键盘，打印机和显示器</code>），块设备（如<code>磁盘</code>）<br></p><p>（3）按照传输速率：低速设备，中速设备，高速设备<br></p><p>（4）按照设备的共享属性：独占设备，共享设备，虚拟设备<br></p></blockquote><p>【I/O管理的任务】</p><blockquote><p>完成用户提出的I/O请求，为用户分配I/O设备，提高I/O设备的利用率，方便用户使用I/O设备<br></p></blockquote><p>【I/O管理的功能】</p><blockquote><p>设备分配，按照设备类型和相应的分配算法决定将I/O设备分配给哪一个进程<br></p><p>设备处理，设备处理程序用以实现CPU和设备控制器之间的通信<br></p><p>缓冲管理，设置缓冲区的目的是为了缓和CPU与I/O设备速度不匹配的矛盾<br></p><p>设备独立性，又称设备无关性，是指应用程序独立于物理设备<br></p></blockquote><p>【I/O应用接口】</p><blockquote></blockquote><p>【I/O控制方式】</p><blockquote><p>程序直接控制方式，优点是工作过程非常简单，缺点是CPU利用率相当低，I/O设备的慢速跟不上CPU的高速，致使CPU的绝大部分时间都在测试I/O设备是否已完成数据传输，从而造成CPU的极大浪费<br></p><p>中断控制方式，优点是CPU和I/O设备间可以并行工作，缺点是每次输入/输出一个数据都要求中断CPU，导致一次数据传送的过程中的中断次数较多，从而耗费了大量CPU时间<br></p><p>DMA控方式，在外设和内设之间开辟直接的数据交换通路，优点是设备和CPU可以并行工作，同时设备与内存的数据交换速度加快，并且不需要CPU干预，缺点是DMA控制方式具有一定的局限性，CPU每发出一条指令，只能读/写一个或多个连续的数据块，若要读/写多个离散存储的数据块，或者要将数据分别写到不同的内存区域时，CPU要分别发出多条I/O指令，进行多次中断处理才能完成，并且每台设备都需要一个DMA控制器，当设备增加时不经济<br></p><p>通道控制方式，所需CPU干预更少，而且可以做到一个通道控制多台设备，优点是解决了I/O操作的独立性和各部件工作的并行性，CPU，通道，I/O设备可并行工作，资源利用率较高，缺点是由于需要更多硬件（通道处理器），因此其成本较高<br></p></blockquote><h5 id="2、I-O调度"><a href="#2、I-O调度" class="headerlink" title="2、I/O调度"></a>2、I/O调度</h5><p>【I/O调度基本概念】</p><blockquote><p>确定一个好的顺序来执行I/O请求<br></p></blockquote><p>【缓冲的分类】</p><blockquote><p>单缓冲，双缓冲，循环缓冲，缓冲池(由多个缓冲区组成）<br></p></blockquote><p>【高速缓存与缓冲区】</p><blockquote><p>高速缓存是可以保存数据备份的高速存储器，但不等价于缓冲区,因为：</p><p>(1)两者存放的数据不同。高度缓存上存放的是低速设备上的某些数据的一个备份，而缓冲区中存放的则是低速设备传送给高速设备的数据，，这些数据从低速设备传送到缓冲区，再从缓冲区传送到高速设备，而在低速设备中却不一定有备份<br></p><p>(2)两者的目的不同。引入高度缓存主要是为了存放低速设备上的经常要被访问到的数据的备份，这样高速设备就不需要每次都访问低速设备，但如果要访问的数据不在高速缓存中，那么高速设备还是需要访问低速设备；而缓冲区是为了缓和高速设备和低速设备间速度不匹配的矛盾，高速设备和低速设备间每次通信都要经过缓冲区，高速设备不会直接去访问低速设备<br></p></blockquote><p>【设备分配与回收】</p><blockquote></blockquote><p>【假脱机技术】</p><blockquote><p>通过共享设备来虚拟独占设备，将独占设备改造成好像设备，从而提高了设备利用率和系统的效率，该技术称之为假脱机(SPOOLing)技术<br></p></blockquote><p>【SPOOLing系统的组成】</p><blockquote><p>输入井和输出井<br></p><p>输入缓冲和输出缓冲<br></p><p>输入进程和输出进程<br></p></blockquote><p>【SPOOLing技术的特点】</p><blockquote><p>提高了I/O速度<br></p><p>设备并没有分配给任何进程<br></p><p>实现了虚拟设备功能<br></p><p>SPOOLing除了是一种速度匹配技术外，也是一种虚拟设备技术<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;h4 id=&quot;（一）操作系统概述&quot;&gt;&lt;a href=&quot;#（一）操作系统概述&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>二叉链表示的二叉树中增设双亲结点并输出所有结点到根结点的路径</title>
    <link href="http://yoursite.com/2019/10/05/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%A4%BA%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%A2%9E%E8%AE%BE%E5%8F%8C%E4%BA%B2%E7%BB%93%E7%82%B9%E5%B9%B6%E8%BE%93%E5%87%BA%E6%89%80%E6%9C%89%E7%BB%93%E7%82%B9%E5%88%B0%E6%A0%B9%E7%BB%93%E7%82%B9%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2019/10/05/二叉链表示的二叉树中增设双亲结点并输出所有结点到根结点的路径/</id>
    <published>2019-10-05T12:51:45.000Z</published>
    <updated>2019-10-05T12:53:30.313Z</updated>
    
    <content type="html"><![CDATA[<p>在二叉树的二叉链表存储结构中  ，增设一个双亲节点的parent指针，设计一个算法，给这个指针赋值，并输出所有节点到根节点的路径<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>,*<span class="title">parent</span>;</span><span class="comment">//左，右孩子,双亲指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree *T)</span></span>&#123;</span><br><span class="line">    *T=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;data=<span class="number">1</span>;</span><br><span class="line">(*T)-&gt;parent=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;data=<span class="number">2</span>;</span><br><span class="line">(*T)-&gt;lchild-&gt;parent=(*T);</span><br><span class="line">    (*T)-&gt;rchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;rchild-&gt;data=<span class="number">3</span>;</span><br><span class="line">(*T)-&gt;rchild-&gt;parent=(*T);</span><br><span class="line">    (*T)-&gt;rchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;rchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild=(BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;data=<span class="number">4</span>;</span><br><span class="line">(*T)-&gt;lchild-&gt;lchild-&gt;parent=(*T)-&gt;lchild;</span><br><span class="line">    (*T)-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">    (*T)-&gt;lchild-&gt;lchild-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增设双亲节点的解法1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(BiTNode *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BiTNode *pre;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pre=p;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>) </span><br><span class="line">p-&gt;lchild-&gt;parent=p;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)</span><br><span class="line">p-&gt;rchild-&gt;parent=p;</span><br><span class="line">f(p-&gt;lchild);</span><br><span class="line">f(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增设双亲节点的解法1 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">(BiTNode *p,BiTNode *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;parent=q;</span><br><span class="line">q=p;</span><br><span class="line">f2(p-&gt;lchild,q);</span><br><span class="line">f2(p-&gt;rchild,q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(BiTNode *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allpath</span><span class="params">(BiTNode *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">printPath(p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">allpath(p-&gt;lchild);</span><br><span class="line">allpath(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BiTree Tree;</span><br><span class="line">    CreateBiTree(&amp;Tree);</span><br><span class="line"><span class="comment">//f(Tree);</span></span><br><span class="line">BiTNode *q=<span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//f2(Tree,q);</span></span><br><span class="line">allpath(Tree);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在二叉树的二叉链表存储结构中  ，增设一个双亲节点的parent指针，设计一个算法，给这个指针赋值，并输出所有节点到根节点的路径&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="数据结构自学史" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%87%AA%E5%AD%A6%E5%8F%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>二叉链表示的二叉树中增设双亲结点</title>
    <link href="http://yoursite.com/2019/10/05/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%A4%BA%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%A2%9E%E8%AE%BE%E5%8F%8C%E4%BA%B2%E7%BB%93%E7%82%B9-1/"/>
    <id>http://yoursite.com/2019/10/05/二叉链表示的二叉树中增设双亲结点-1/</id>
    <published>2019-10-05T12:51:30.000Z</published>
    <updated>2019-10-05T12:51:31.031Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>

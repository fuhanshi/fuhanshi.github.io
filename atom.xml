<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个大学狗的日常</title>
  
  <subtitle>放弃不难，但坚持一定很酷</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-15T10:04:44.624Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>凡希</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>科学计数法【这题做了1个多小时才AC，记录一下】</title>
    <link href="http://yoursite.com/2020/03/15/%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95%E3%80%90%E8%BF%99%E9%A2%98%E5%81%9A%E4%BA%861%E4%B8%AA%E5%A4%9A%E5%B0%8F%E6%97%B6%E6%89%8DAC%EF%BC%8C%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E3%80%91/"/>
    <id>http://yoursite.com/2020/03/15/科学计数法【这题做了1个多小时才AC，记录一下】/</id>
    <published>2020-03-15T10:00:34.000Z</published>
    <updated>2020-03-15T10:04:44.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 <code>[+-][1-9].[0-9]+E[+-][0-9]+</code>，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。<br></p><p>现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。<br></p><p><code>输入格式</code>：<br></p><p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p><p><code>输出格式：</code><br><br>对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。<br></p><p><code>输入样例 1：</code><br>+1.23400E-03</p><p><code>输出样例 1：</code><br>0.00123400</p><p><code>输入样例 2：</code><br>-1.2E+10</p><p><code>输出样例 2：</code><br>-12000000000</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line"><span class="keyword">char</span> sign=a[<span class="number">0</span>];<span class="comment">//数的符号</span></span><br><span class="line"><span class="comment">//寻找E</span></span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> e=<span class="number">0</span>;<span class="comment">//指数大小</span></span><br><span class="line"><span class="keyword">char</span> sign1=a[i+<span class="number">1</span>];<span class="comment">//指数的符号</span></span><br><span class="line"><span class="comment">//计算指数的大小</span></span><br><span class="line"><span class="keyword">int</span> pro=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;=i+<span class="number">2</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line">e+=(a[j]-<span class="string">'0'</span>)*pro;</span><br><span class="line">pro*=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("e=%d\n",e);</span></span><br><span class="line"><span class="comment">//printf("sign1=%c\n",sign1);</span></span><br><span class="line"><span class="comment">//先把符号打印粗来</span></span><br><span class="line"><span class="keyword">if</span>(sign==<span class="string">'-'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键代码</span></span><br><span class="line"><span class="keyword">if</span>(sign1==<span class="string">'-'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0."</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;e<span class="number">-1</span>;++m)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">3</span>;q&lt;=i<span class="number">-1</span>;++q)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[q]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sign1==<span class="string">'+'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">3</span>;w&lt;=i<span class="number">-1</span>;++w)</span><br><span class="line">&#123;</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("cnt=%d\n",cnt);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不用小数点了</span></span><br><span class="line"><span class="keyword">if</span>(cnt&lt;=e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">3</span>;w&lt;=i<span class="number">-1</span>;++w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[w]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[w]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[w]==<span class="string">'0'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">3</span>;b&lt;=w<span class="number">-1</span>;++b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[b]!=<span class="string">'0'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>||a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[w]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(w=<span class="number">0</span>;w&lt;e-cnt;++w)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//需要小数点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="comment">//打印小数点之前的，注意判断是否打印0</span></span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">3</span>;k&lt;<span class="number">3</span>+e;++k)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span>(a[k]!=<span class="string">'0'</span>)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">                                <span class="keyword">else</span> <span class="keyword">if</span>(a[k]==<span class="string">'0'</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">3</span>;b&lt;=k<span class="number">-1</span>;++b)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                                <span class="keyword">if</span>(a[b]!=<span class="string">'0'</span>)</span><br><span class="line">                                                &#123;</span><br><span class="line">                                                        flag=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span>(flag==<span class="number">1</span>||a[<span class="number">1</span>]!=<span class="string">'0'</span>)</span><br><span class="line">                                                <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"."</span>);</span><br><span class="line"><span class="comment">//小数点之后的是一定都要打印的</span></span><br><span class="line"><span class="keyword">for</span>(k+<span class="number">1</span>;k&lt;=i<span class="number">-1</span>;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 &lt;code&gt;[+-][1-9].[0-9]+E
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>竖式除法【转】</title>
    <link href="http://yoursite.com/2020/03/15/%E7%AB%96%E5%BC%8F%E9%99%A4%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/15/竖式除法/</id>
    <published>2020-03-15T07:49:40.000Z</published>
    <updated>2020-03-15T07:54:31.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</span><br><span class="line"></span><br><span class="line">输入格式：</span><br><span class="line">输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</span><br><span class="line"></span><br><span class="line">输出格式：</span><br><span class="line">在一行中依次输出 Q 和 R，中间以 1 空格分隔。</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">123456789050987654321 7</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例：</span><br><span class="line">17636684150141093474 3</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1、本题是高精度除法，1000位的数远远超过了整型的范围，所以我们需要选择字符数组来存储 A ，并且通过字符数组来存储 Q 。<br><br>2、由于已经限定 B 为 1 位整数，所以我们可以从 A 的最高位逐位进行除法，并将余数乘 10 加到下一位上。<br><br>3、注意存储时是数字字符，所以我们需要将数字字符转换为数字。<br><br>4、不要忘了在 Q 后添加 ‘\0’ 作为字符串的结束。<br><br>5、注意当 A 小于 B 时的情况。<br></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">char</span> A[<span class="number">1000</span>], Q[<span class="number">1000</span>];    </span><br><span class="line"><span class="keyword">int</span> B, R = <span class="number">0</span>;    </span><br><span class="line"><span class="keyword">int</span> i, j, len;    </span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, A, &amp;B);    </span><br><span class="line">len = <span class="built_in">strlen</span>(A);    </span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; len; i++, j++)    </span><br><span class="line">&#123;        </span><br><span class="line">Q[i] = (A[j] + <span class="number">10</span> * R - <span class="string">'0'</span>) / B + <span class="string">'0'</span>;        </span><br><span class="line">R = (A[j] + <span class="number">10</span> * R - <span class="string">'0'</span>) % B;        </span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; Q[i] == <span class="string">'0'</span>)        </span><br><span class="line">&#123;            </span><br><span class="line">i--;        </span><br><span class="line">&#125;    </span><br><span class="line">&#125;    </span><br><span class="line">Q[i] = <span class="string">'\0'</span>;    </span><br><span class="line">len = <span class="built_in">strlen</span>(Q);    </span><br><span class="line"><span class="keyword">if</span> (!len)    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0 %d\n"</span>, R);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">else</span>    </span><br><span class="line">&#123;        </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d\n"</span>, Q, R);    </span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/shiawaseli/article/details/89740352" target="_blank" rel="noopener">https://blog.csdn.net/shiawaseli/article/details/89740352</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>R语言原生数据结构总结</title>
    <link href="http://yoursite.com/2020/03/15/R%E8%AF%AD%E8%A8%80%E5%8E%9F%E7%94%9F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/03/15/R语言原生数据结构总结/</id>
    <published>2020-03-15T05:20:46.000Z</published>
    <updated>2020-03-15T07:05:10.645Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目录</strong>：向量、数组、矩阵、因子、列表、数据框</p><h3 id="一、向量"><a href="#一、向量" class="headerlink" title="一、向量"></a>一、向量</h3><blockquote><p>生成方法</p></blockquote><p><code>c()</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c(<span class="number">1</span>,<span class="number">7</span>:<span class="number">9</span>)</span><br><span class="line">c(<span class="number">1</span>:<span class="number">5</span>, <span class="number">10.5</span>, <span class="string">"next"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## uses with a single argument to drop attributes</span></span><br><span class="line">x &lt;- <span class="number">1</span>:<span class="number">4</span></span><br><span class="line">names(x) &lt;- letters[<span class="number">1</span>:<span class="number">4</span>]<span class="comment">#把字母表的前四个作为x的名字（利用names()函数）</span></span><br><span class="line">x</span><br><span class="line">c(x)          <span class="comment"># has names</span></span><br><span class="line">as.vector(x)  <span class="comment"># no names</span></span><br><span class="line">dim(x) &lt;- c(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">x</span><br><span class="line">c(x)</span><br><span class="line">as.vector(x)<span class="comment">#转换成向量格式</span></span><br></pre></td></tr></table></figure></p><p><code>seq()</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; seq(<span class="number">0</span>, <span class="number">1</span>, length.out = <span class="number">11</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">0.0</span> <span class="number">0.1</span> <span class="number">0.2</span> <span class="number">0.3</span> <span class="number">0.4</span> <span class="number">0.5</span> <span class="number">0.6</span> <span class="number">0.7</span> <span class="number">0.8</span> <span class="number">0.9</span> <span class="number">1.0</span></span><br><span class="line">&gt; seq(stats::rnorm(<span class="number">20</span>)) <span class="comment"># effectively 'along'</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">9</span>, by = <span class="number">2</span>)     <span class="comment"># matches 'end'</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">9</span>, by = pi)    <span class="comment"># stays below 'end'</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1.000000</span> <span class="number">4.141593</span> <span class="number">7.283185</span></span><br><span class="line">&gt; seq(<span class="number">1</span>, <span class="number">6</span>, by = <span class="number">3</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">4</span></span><br><span class="line">&gt; seq(<span class="number">1.575</span>, <span class="number">5.125</span>, by = <span class="number">0.05</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1.575</span> <span class="number">1.625</span> <span class="number">1.675</span> <span class="number">1.725</span> <span class="number">1.775</span> <span class="number">1.825</span> <span class="number">1.875</span> <span class="number">1.925</span> <span class="number">1.975</span> <span class="number">2.025</span></span><br><span class="line">[<span class="number">11</span>] <span class="number">2.075</span> <span class="number">2.125</span> <span class="number">2.175</span> <span class="number">2.225</span> <span class="number">2.275</span> <span class="number">2.325</span> <span class="number">2.375</span> <span class="number">2.425</span> <span class="number">2.475</span> <span class="number">2.525</span></span><br><span class="line">[<span class="number">21</span>] <span class="number">2.575</span> <span class="number">2.625</span> <span class="number">2.675</span> <span class="number">2.725</span> <span class="number">2.775</span> <span class="number">2.825</span> <span class="number">2.875</span> <span class="number">2.925</span> <span class="number">2.975</span> <span class="number">3.025</span></span><br><span class="line">[<span class="number">31</span>] <span class="number">3.075</span> <span class="number">3.125</span> <span class="number">3.175</span> <span class="number">3.225</span> <span class="number">3.275</span> <span class="number">3.325</span> <span class="number">3.375</span> <span class="number">3.425</span> <span class="number">3.475</span> <span class="number">3.525</span></span><br><span class="line">[<span class="number">41</span>] <span class="number">3.575</span> <span class="number">3.625</span> <span class="number">3.675</span> <span class="number">3.725</span> <span class="number">3.775</span> <span class="number">3.825</span> <span class="number">3.875</span> <span class="number">3.925</span> <span class="number">3.975</span> <span class="number">4.025</span></span><br><span class="line">[<span class="number">51</span>] <span class="number">4.075</span> <span class="number">4.125</span> <span class="number">4.175</span> <span class="number">4.225</span> <span class="number">4.275</span> <span class="number">4.325</span> <span class="number">4.375</span> <span class="number">4.425</span> <span class="number">4.475</span> <span class="number">4.525</span></span><br><span class="line">[<span class="number">61</span>] <span class="number">4.575</span> <span class="number">4.625</span> <span class="number">4.675</span> <span class="number">4.725</span> <span class="number">4.775</span> <span class="number">4.825</span> <span class="number">4.875</span> <span class="number">4.925</span> <span class="number">4.975</span> <span class="number">5.025</span></span><br><span class="line">[<span class="number">71</span>] <span class="number">5.075</span> <span class="number">5.125</span></span><br><span class="line">&gt; seq(<span class="number">17</span>) <span class="comment"># same as 1:17, or even better seq_len(17)</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br></pre></td></tr></table></figure></p><p><code>start:end</code><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span>:<span class="number">10</span> <span class="comment">#等价于seq(1:10)</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br><span class="line">&gt; seq(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><blockquote><p>可调用接口</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(data = <span class="literal">NA</span>, dim = length(data), dimnames = <span class="literal">NULL</span>)<span class="comment">#生成一个数组</span></span><br><span class="line">as.array(x, <span class="keyword">...</span>)<span class="comment">#强制类型转换为数组</span></span><br><span class="line">is.array(x)<span class="comment">#判断是否是数组类型</span></span><br><span class="line">dim(x)<span class="comment">#查看数组维度（注：dim是个通用函数）</span></span><br></pre></td></tr></table></figure><blockquote><p>生成方法</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    array(<span class="number">1</span>:<span class="number">3</span>, c(<span class="number">2</span>,<span class="number">4</span>)) <span class="comment"># recycle 1:3 "2 2/3 times"</span></span><br><span class="line">    <span class="comment">#     [,1] [,2] [,3] [,4]</span></span><br><span class="line">    <span class="comment">#[1,]    1    3    2    1</span></span><br><span class="line">    <span class="comment">#[2,]    2    1    3    2</span></span><br><span class="line"></span><br><span class="line">array(c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>),dim=c(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注：可以看到，若指定的维度所需元素个数大于已有元素个数，则按列重复<br></p></blockquote><h3 id="三、矩阵"><a href="#三、矩阵" class="headerlink" title="三、矩阵"></a>三、矩阵</h3><blockquote><p>可调用接口 </p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matrix(data = <span class="literal">NA</span>, nrow = <span class="number">1</span>, ncol = <span class="number">1</span>, byrow = <span class="literal">FALSE</span>,dimnames = <span class="literal">NULL</span>)</span><br><span class="line">    </span><br><span class="line">    as.matrix(x, <span class="keyword">...</span>)</span><br><span class="line">    <span class="comment">## S3 method for class 'data.frame'</span></span><br><span class="line">    as.matrix(x, rownames.force = <span class="literal">NA</span>, <span class="keyword">...</span>)</span><br><span class="line">    </span><br><span class="line">    is.matrix(x)</span><br></pre></td></tr></table></figure><blockquote><p>生成方法</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>,</span><br><span class="line">                    dimnames = list(c(<span class="string">"row1"</span>, <span class="string">"row2"</span>),</span><br><span class="line">                                    c(<span class="string">"C.1"</span>, <span class="string">"C.2"</span>, <span class="string">"C.3"</span>)))</span><br></pre></td></tr></table></figure><p>这里的dimnames是给矩阵的行列命名。<br><br>当然也可以事先不命名，等生成矩阵之后再命名：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt; dimnames(mdat)=list(c(<span class="string">'a'</span>,<span class="string">'b'</span>),c(<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'p'</span>))</span><br><span class="line">&gt; mdat</span><br><span class="line">   r  g  p</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br></pre></td></tr></table></figure></p><p>那单独给列或者行命名呢？可以这样：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; mdat &lt;- matrix(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>), nrow = <span class="number">2</span>, ncol = <span class="number">3</span>, byrow = <span class="literal">TRUE</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">11</span>   <span class="number">12</span>   <span class="number">13</span></span><br><span class="line">&gt; colnames(mdat) &lt;- c(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">      a  b  c</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">[<span class="number">2</span>,] <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line">&gt; rownames(mdat)=c(<span class="string">'zz'</span>,<span class="string">'hh'</span>)</span><br><span class="line">&gt; mdat</span><br><span class="line">    a  b  c</span><br><span class="line">zz  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">hh <span class="number">11</span> <span class="number">12</span> <span class="number">13</span></span><br></pre></td></tr></table></figure></p><h3 id="四、因子"><a href="#四、因子" class="headerlink" title="四、因子"></a>四、因子</h3><p>在R语言中，factor指的就是那些非数值型变量。<br></p><blockquote><p>可调用接口</p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">factor(x = character(), levels, labels = levels,</span><br><span class="line">           exclude = <span class="literal">NA</span>, ordered = is.ordered(x), nmax = <span class="literal">NA</span>)</span><br><span class="line">    </span><br><span class="line">    ordered(x, <span class="keyword">...</span>)</span><br><span class="line">    </span><br><span class="line">    is.factor(x)</span><br><span class="line">    is.ordered(x)</span><br><span class="line">    </span><br><span class="line">    as.factor(x)</span><br><span class="line">    as.ordered(x)</span><br><span class="line">    </span><br><span class="line">    addNA(x, ifany = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure><blockquote><p>生成方法<br></p></blockquote><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; x=c(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line">&gt; factor(x)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Levels: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>当然，在选取数据框中某一列非数值型变量时，返回的结果就是factor<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; a=data.frame(name=c(<span class="string">'Mike'</span>,<span class="string">'Jane'</span>,<span class="string">'King'</span>,<span class="string">'Tom'</span>),height=c(<span class="number">160</span>,<span class="number">155</span>,<span class="number">166</span>,<span class="number">159</span>),weight=c(<span class="number">65</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">53</span>))</span><br><span class="line">&gt; a</span><br><span class="line">  name height weight</span><br><span class="line"><span class="number">1</span> Mike    <span class="number">160</span>     <span class="number">65</span></span><br><span class="line"><span class="number">2</span> Jane    <span class="number">155</span>     <span class="number">48</span></span><br><span class="line"><span class="number">3</span> King    <span class="number">166</span>     <span class="number">55</span></span><br><span class="line"><span class="number">4</span>  Tom    <span class="number">159</span>     <span class="number">53</span></span><br><span class="line">&gt; a$name</span><br><span class="line">[<span class="number">1</span>] Mike Jane King Tom </span><br><span class="line">Levels: Jane King Mike Tom</span><br><span class="line">&gt; a$height</span><br><span class="line">[<span class="number">1</span>] <span class="number">160</span> <span class="number">155</span> <span class="number">166</span> <span class="number">159</span></span><br><span class="line">&gt; is.factor(a$name)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure></p><h3 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h3><p>列表是个大杂烩，啥都可以往里面装<br><br>最简单粗暴的方法，就是用list()函数去作用一下：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; s=<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">&gt; s</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">&gt; is.list(s)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line">&gt; lis=list(s)</span><br><span class="line">&gt; is.list(lis)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure></p><h3 id="六、数据框"><a href="#六、数据框" class="headerlink" title="六、数据框"></a>六、数据框</h3><p>不多说，直接上栗子<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; L3 &lt;- LETTERS[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#选定'A','B','C'</span></span><br><span class="line">&gt; fac &lt;- sample(L3, <span class="number">10</span>, replace = <span class="literal">TRUE</span>)<span class="comment">#从选定的'A','B','C'中随机取样，取10次</span></span><br><span class="line">&gt; d &lt;- data.frame(x = <span class="number">1</span>, y = <span class="number">1</span>:<span class="number">10</span>, fac = fac)</span><br><span class="line">&gt; d</span><br><span class="line">   x  y fac</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A</span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A</span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A</span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A</span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C</span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C</span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C</span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B</span><br></pre></td></tr></table></figure></p><p>上面的栗子指定了列名字，若不指定，则默认输出列名，如下：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; data.frame(<span class="number">1</span>, <span class="number">1</span>:<span class="number">10</span>, <span class="number">11</span>:<span class="number">20</span>)</span><br><span class="line">   X1 X1.10 X11.20</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>     <span class="number">1</span>     <span class="number">11</span></span><br><span class="line"><span class="number">2</span>   <span class="number">1</span>     <span class="number">2</span>     <span class="number">12</span></span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>     <span class="number">3</span>     <span class="number">13</span></span><br><span class="line"><span class="number">4</span>   <span class="number">1</span>     <span class="number">4</span>     <span class="number">14</span></span><br><span class="line"><span class="number">5</span>   <span class="number">1</span>     <span class="number">5</span>     <span class="number">15</span></span><br><span class="line"><span class="number">6</span>   <span class="number">1</span>     <span class="number">6</span>     <span class="number">16</span></span><br><span class="line"><span class="number">7</span>   <span class="number">1</span>     <span class="number">7</span>     <span class="number">17</span></span><br><span class="line"><span class="number">8</span>   <span class="number">1</span>     <span class="number">8</span>     <span class="number">18</span></span><br><span class="line"><span class="number">9</span>   <span class="number">1</span>     <span class="number">9</span>     <span class="number">19</span></span><br><span class="line"><span class="number">10</span>  <span class="number">1</span>    <span class="number">10</span>     <span class="number">20</span></span><br><span class="line">&gt; data.frame(<span class="number">2</span>, <span class="number">1</span>:<span class="number">10</span>, <span class="number">11</span>:<span class="number">20</span>)</span><br><span class="line">   X2 X1.10 X11.20</span><br><span class="line"><span class="number">1</span>   <span class="number">2</span>     <span class="number">1</span>     <span class="number">11</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span>     <span class="number">2</span>     <span class="number">12</span></span><br><span class="line"><span class="number">3</span>   <span class="number">2</span>     <span class="number">3</span>     <span class="number">13</span></span><br><span class="line"><span class="number">4</span>   <span class="number">2</span>     <span class="number">4</span>     <span class="number">14</span></span><br><span class="line"><span class="number">5</span>   <span class="number">2</span>     <span class="number">5</span>     <span class="number">15</span></span><br><span class="line"><span class="number">6</span>   <span class="number">2</span>     <span class="number">6</span>     <span class="number">16</span></span><br><span class="line"><span class="number">7</span>   <span class="number">2</span>     <span class="number">7</span>     <span class="number">17</span></span><br><span class="line"><span class="number">8</span>   <span class="number">2</span>     <span class="number">8</span>     <span class="number">18</span></span><br><span class="line"><span class="number">9</span>   <span class="number">2</span>     <span class="number">9</span>     <span class="number">19</span></span><br><span class="line"><span class="number">10</span>  <span class="number">2</span>    <span class="number">10</span>     <span class="number">20</span></span><br></pre></td></tr></table></figure></p><p>选取某一列的方法：<code>df[&#39;colname&#39;]</code>或者<code>df$colname</code><br><br>选取多个列的方法：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; d</span><br><span class="line">   x  y fac</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A</span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B</span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A</span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A</span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A</span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C</span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C</span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C</span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B</span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B</span><br><span class="line">&gt; d[,<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">   x  y</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>若要添加一列，直接将向量/数组赋值即可，继续上面的栗子：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; d[<span class="string">'newcol'</span>]=array(<span class="number">31</span>:<span class="number">40</span>)</span><br><span class="line">&gt; d</span><br><span class="line">   x  y fac newcol</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A     <span class="number">31</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B     <span class="number">32</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A     <span class="number">33</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A     <span class="number">34</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A     <span class="number">35</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C     <span class="number">36</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C     <span class="number">37</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C     <span class="number">38</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B     <span class="number">39</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B     <span class="number">40</span></span><br></pre></td></tr></table></figure></p><p>还有合并两个数据框可以用cbind（注意两个数据框的第一个维度（行）必须一样）：<br><br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; d1=data.frame(f1=seq(<span class="number">61</span>:<span class="number">70</span>),f2=c(<span class="number">101</span>:<span class="number">110</span>))</span><br><span class="line">&gt; d1</span><br><span class="line">   f1  f2</span><br><span class="line"><span class="number">1</span>   <span class="number">1</span> <span class="number">101</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2</span> <span class="number">102</span></span><br><span class="line"><span class="number">3</span>   <span class="number">3</span> <span class="number">103</span></span><br><span class="line"><span class="number">4</span>   <span class="number">4</span> <span class="number">104</span></span><br><span class="line"><span class="number">5</span>   <span class="number">5</span> <span class="number">105</span></span><br><span class="line"><span class="number">6</span>   <span class="number">6</span> <span class="number">106</span></span><br><span class="line"><span class="number">7</span>   <span class="number">7</span> <span class="number">107</span></span><br><span class="line"><span class="number">8</span>   <span class="number">8</span> <span class="number">108</span></span><br><span class="line"><span class="number">9</span>   <span class="number">9</span> <span class="number">109</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">110</span></span><br><span class="line">&gt; cbind(d,d1)</span><br><span class="line">   x  y fac newcol f1  f2</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>   A     <span class="number">31</span>  <span class="number">1</span> <span class="number">101</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>   B     <span class="number">32</span>  <span class="number">2</span> <span class="number">102</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>   A     <span class="number">33</span>  <span class="number">3</span> <span class="number">103</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span>   A     <span class="number">34</span>  <span class="number">4</span> <span class="number">104</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">5</span>   A     <span class="number">35</span>  <span class="number">5</span> <span class="number">105</span></span><br><span class="line"><span class="number">6</span>  <span class="number">1</span>  <span class="number">6</span>   C     <span class="number">36</span>  <span class="number">6</span> <span class="number">106</span></span><br><span class="line"><span class="number">7</span>  <span class="number">1</span>  <span class="number">7</span>   C     <span class="number">37</span>  <span class="number">7</span> <span class="number">107</span></span><br><span class="line"><span class="number">8</span>  <span class="number">1</span>  <span class="number">8</span>   C     <span class="number">38</span>  <span class="number">8</span> <span class="number">108</span></span><br><span class="line"><span class="number">9</span>  <span class="number">1</span>  <span class="number">9</span>   B     <span class="number">39</span>  <span class="number">9</span> <span class="number">109</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">10</span>   B     <span class="number">40</span> <span class="number">10</span> <span class="number">110</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;：向量、数组、矩阵、因子、列表、数据框&lt;/p&gt;
&lt;h3 id=&quot;一、向量&quot;&gt;&lt;a href=&quot;#一、向量&quot; class=&quot;headerlink&quot; title=&quot;一、向量&quot;&gt;&lt;/a&gt;一、向量&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;生成方
      
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/categories/R/"/>
    
    
  </entry>
  
  <entry>
    <title>计组问答</title>
    <link href="http://yoursite.com/2020/03/14/%E8%AE%A1%E7%BB%84%E9%97%AE%E7%AD%94/"/>
    <id>http://yoursite.com/2020/03/14/计组问答/</id>
    <published>2020-03-14T08:38:22.000Z</published>
    <updated>2020-03-14T09:22:33.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章、计算机系统概述"><a href="#第一章、计算机系统概述" class="headerlink" title="第一章、计算机系统概述"></a>第一章、计算机系统概述</h2><h3 id="1-计算机发展历程"><a href="#1-计算机发展历程" class="headerlink" title="1.计算机发展历程"></a>1.计算机发展历程</h3><blockquote><p><strong>计算机硬件发展历程</strong>：<br><br>电子管时代–&gt;晶体管时代–&gt;中小规模集成电路时代–&gt;超大规模集成电路时代–&gt;智能计算机–&gt;生物计算机和量子计算机。<br><br><strong>计算机的分类</strong>：<br><br>专用计算机、通用计算机。<br><br><strong>摩尔定律</strong>：<br><br>当价格不变时，集成电路上可容纳的元器件的数目，约每隔18~24个月便会增加一倍，性能也将提升一倍。揭示了信息技术进步的速度。<br><br><strong>其他</strong>：操作系统直接影响计算机系统性能。<br></p></blockquote><h3 id="2-计算机系统层次结构"><a href="#2-计算机系统层次结构" class="headerlink" title="2.计算机系统层次结构"></a>2.计算机系统层次结构</h3><p><code>计算机系统=硬件+软件=（中央处理器、存储器和外部设备等）+（计算机的运行程序和相应的文档）</code><br></p><h5 id="2-1-计算机硬件的基本组成"><a href="#2-1-计算机硬件的基本组成" class="headerlink" title="2.1 计算机硬件的基本组成"></a>2.1 计算机硬件的基本组成</h5><blockquote><p>(1)<strong>存储器</strong>：分为主存储器（内存储器）和辅助存储器（外存储器）。主存储器存放重程序和数据，辅助存储器中的信息必须调入主存后才能被CPU访问。<br><br>(2)<strong>运算器</strong>：主要功能时进行算术运算和逻辑运算，核心是算数逻辑单元（ALU）。运算器包含若干通用寄存器。<br><br>(3)<strong>控制器</strong>：计算机的指挥中心。由<code>程序计数器（PC）</code>、<code>指令寄存器（IR）</code>和<code>控制单元（CU）</code>组成。<br><br>(4)输入设备。<br><br>(5)输出设备。<br></p></blockquote><h4 id="2-2-计算机软件的分类"><a href="#2-2-计算机软件的分类" class="headerlink" title="2.2 计算机软件的分类"></a>2.2 计算机软件的分类</h4><blockquote><p>（1）系统软件；<br><br>（2）应用软件。<br></p></blockquote><h4 id="2-3-计算机编程语言分类"><a href="#2-3-计算机编程语言分类" class="headerlink" title="2.3 计算机编程语言分类"></a>2.3 计算机编程语言分类</h4><blockquote><p>机器语言、汇编语言、高级语言。<br></p></blockquote><h4 id="2-4-编译程序与解释程序的区别"><a href="#2-4-编译程序与解释程序的区别" class="headerlink" title="2.4 编译程序与解释程序的区别"></a>2.4 编译程序与解释程序的区别</h4><blockquote><p>编译程序生成目标代码，而解释程序不生成；编译程序产生目标代码的执行速度比解释程序的执行速度快。<br></p></blockquote><h4 id="2-5-计算机的工作过程"><a href="#2-5-计算机的工作过程" class="headerlink" title="2.5 计算机的工作过程"></a>2.5 计算机的工作过程</h4><blockquote><p>不断地从存储器中逐条取出指令，然后送至控制器，经分析后由CPU发出各种操作命令，指挥各部件完成各种操作，直至程序中全部指令执行结束。<br></p></blockquote><h4 id="2-6-计算机系统的层次结构"><a href="#2-6-计算机系统的层次结构" class="headerlink" title="2.6 计算机系统的层次结构"></a>2.6 计算机系统的层次结构</h4><blockquote><p>(1)第1级。微程序机器级。微指令由硬件直接执行。<br><br>(2)第2级。传统机器级(机器语言)。用微程序解释指令系统。<br><br>(3)第3级。操作系统级。用机器语言解释作业控制语句；<br><br>(4)第4级。汇编语言机器级。用汇编程序翻译成汇编语言程序；<br><br>(5)第5级。高级语言机器级。用编译程序翻译成汇编程序或直接翻译成机器语言。<br></p></blockquote><h3 id="3-计算机性能指标"><a href="#3-计算机性能指标" class="headerlink" title="3.计算机性能指标"></a>3.计算机性能指标</h3><blockquote><p>(1)<strong>吞吐量</strong>：单位时间内的数据处理量，主要取决于主存的存取周期；<br><br>(2)<strong>响应时间</strong>：从提交作业到该作业得到CPU响应所经理的时间。响应时间越短，吞吐量越大。<br><br>(3)<strong>主频</strong>：机器内部主时钟的频率，衡量机器速度；<br><br>(4)<strong>CPU周期</strong>：又称机器周期，指的是从内存读取一条指令字的最短时间。一个指令周期由若干个CPU周期构成；<br><br>(5)<strong>CPU时钟周期</strong>：主频的倒数，是CPU中最小的时间单位。<br><br>(6)<strong>CPI、MIPS、FLOPS</strong>；<br><br>(7)<strong>CPU执行时间</strong>：CPU对某特定程序的执行时间。<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章、计算机系统概述&quot;&gt;&lt;a href=&quot;#第一章、计算机系统概述&quot; class=&quot;headerlink&quot; title=&quot;第一章、计算机系统概述&quot;&gt;&lt;/a&gt;第一章、计算机系统概述&lt;/h2&gt;&lt;h3 id=&quot;1-计算机发展历程&quot;&gt;&lt;a href=&quot;#1-计算机发展历
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各种各样的杨辉三角题目集合</title>
    <link href="http://yoursite.com/2020/03/11/%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E9%A2%98%E7%9B%AE%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2020/03/11/各种各样的杨辉三角题目集合/</id>
    <published>2020-03-11T10:13:06.000Z</published>
    <updated>2020-03-11T10:21:11.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一题（源：PTA）"><a href="#第一题（源：PTA）" class="headerlink" title="第一题（源：PTA）"></a>第一题（源：PTA）</h3><p><strong>输入格式</strong>：<br><code>输入在一行中给出N（1≤N≤10）。</code></p><p><strong>输出格式</strong>：<br><code>以正三角形的格式输出前N行杨辉三角。每个数字占固定4位。</code></p><p>输入样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></p><p>输出样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     1</span><br><span class="line">    1   1</span><br><span class="line">   1   2   1</span><br><span class="line">  1   3   3   1</span><br><span class="line"> 1   4   6   4   1</span><br><span class="line">1   5  10  10   5   1</span><br></pre></td></tr></table></figure></p><h4 id="关键点注释"><a href="#关键点注释" class="headerlink" title="关键点注释"></a>关键点注释</h4><blockquote><p>以<code>%4d</code>的格式输出每个数字，同时不要忘记每行前面有空格（最后一行0个，从下往上，每行空格数+1）<br></p></blockquote><h4 id="第一题AC代码"><a href="#第一题AC代码" class="headerlink" title="第一题AC代码"></a>第一题AC代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">int</span> a[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">                        a[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                a[i][<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//每行第一个数字为1</span></span><br><span class="line">                a[i][i]=<span class="number">1</span>;<span class="comment">//每行最后一个数字为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算其余数字a[i][j]=a[i-1][j-1]+a[i-1][j]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n<span class="number">-1</span>;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//只要数字非0就打印</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//别忘了打印每一行的空格</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=n;k&gt;i+<span class="number">1</span>;--k)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                <span class="comment">//再打印数字</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][j]!=<span class="number">0</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"%4d"</span>,a[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>做到再来补充…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一题（源：PTA）&quot;&gt;&lt;a href=&quot;#第一题（源：PTA）&quot; class=&quot;headerlink&quot; title=&quot;第一题（源：PTA）&quot;&gt;&lt;/a&gt;第一题（源：PTA）&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;输入格式&lt;/strong&gt;：&lt;br&gt;&lt;code&gt;输入在一行中
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>有理数均值【未AC】</title>
    <link href="http://yoursite.com/2020/03/10/%E6%9C%89%E7%90%86%E6%95%B0%E5%9D%87%E5%80%BC%E3%80%90%E6%9C%AAAC%E3%80%91/"/>
    <id>http://yoursite.com/2020/03/10/有理数均值【未AC】/</id>
    <published>2020-03-10T08:21:39.000Z</published>
    <updated>2020-03-10T08:29:09.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一个测试点<code>若不随时化简，则会溢出</code>未通过 <br><br><img src="1.png" alt=""> <br></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>本题要求编写程序，计算N个有理数的平均值。</p><p><strong>输入格式</strong>：<br>输入第一行给出正整数N（≤100）；第二行中按照a1/b1 a2/b2 …的格式给出N个分数形式的有理数，其中分子和分母全是整形范围内的整数；如果是负数，则负号一定出现在最前面。</p><p><strong>输出格式</strong>：<br>在一行中按照a/b的格式输出N个有理数的平均值。注意必须是该有理数的最简分数形式，若分母为1，则只输出分子。</p><p><strong>输入样例1</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1/2 1/6 3/6 -5/10</span><br></pre></td></tr></table></figure></p><p><strong>输出样例1</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1/6</span><br></pre></td></tr></table></figure></p><p><strong>输入样例2</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">4/3 2/3</span><br></pre></td></tr></table></figure></p><p><strong>输出样例2</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define long long int int</span></span><br><span class="line"><span class="comment">//求最小公倍数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gm</span><span class="params">(<span class="keyword">int</span> b1,<span class="keyword">int</span> b2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> max=b2,min=b1;</span><br><span class="line"><span class="keyword">if</span>(min&gt;max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> temp=min;min=max;max=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=max;i&lt;=max*min;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%min==<span class="number">0</span>&amp;&amp;i%max==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求最大公因数</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gy</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> b1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//局部嘛，反正对main里面的无影响，就这样喽</span></span><br><span class="line"><span class="keyword">if</span>(a1&gt;b1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> temp=a1;a1=b1;b1=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=a1;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a1%i==<span class="number">0</span>&amp;&amp;b1%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> nn=n;<span class="comment">//n的副本，因为后面n会自减</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a1,b1,a2,b2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;a1,&amp;b1);<span class="comment">//不动，只管累加</span></span><br><span class="line">n-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mbs;<span class="comment">//最小公倍数</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mys;<span class="comment">//最大公因数</span></span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>,&amp;a2,&amp;b2);<span class="comment">//循环接收新值</span></span><br><span class="line">mbs=gm(b1,b2);<span class="comment">//求b1和b2的最小公倍数</span></span><br><span class="line"><span class="comment">//a1=a1*(mbs/b1)+a2*(mbs/b2);b1=mbs;//通分累加</span></span><br><span class="line">a1=(mbs/b1)*a1+(mbs/b2)*a2;b1=mbs;<span class="comment">//通分累加</span></span><br><span class="line"><span class="comment">//printf("%d/%d\n",a1,b1);</span></span><br><span class="line"><span class="keyword">if</span>(a1!=<span class="number">0</span>)<span class="comment">//分子有可能变为0，那么此时就是0/b1了，分母是不可能变为0的，所以这里仅对分子讨论</span></span><br><span class="line">&#123;<span class="comment">//要及时化简，否则溢出 </span></span><br><span class="line">        mys=gy(<span class="built_in">fabs</span>(a1),b1);</span><br><span class="line">        a1/=mys;b1/=mys;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//a1=0</span></span><br><span class="line">&#123;</span><br><span class="line">b1=<span class="number">1</span>;<span class="comment">//b1是啥都行，只要b1不大（这样就能防止b1溢出），为了方便取1好了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后来求平均值</span></span><br><span class="line">b1=b1*nn;<span class="comment">//a1*1相当于不变</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fenzi=a1,fenmu=b1;</span><br><span class="line"><span class="keyword">if</span>(fenzi==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> g;<span class="comment">//分子和分母的最大公因数</span></span><br><span class="line">g=gy(<span class="built_in">fabs</span>(fenzi),fenmu);<span class="comment">//分子可能为负数</span></span><br><span class="line">fenzi/=g;fenmu/=g;</span><br><span class="line"><span class="keyword">if</span>(fenmu==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,fenzi);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld/%lld"</span>,fenzi,fenmu);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有一个测试点&lt;code&gt;若不随时化简，则会溢出&lt;/code&gt;未通过 &lt;br&gt;&lt;br&gt;&lt;img src=&quot;1.png&quot; alt=&quot;&quot;&gt; &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; clas
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>在Ubuntu上安装RStudio遇到的问题以及解决方法</title>
    <link href="http://yoursite.com/2020/03/08/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85RStudio%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/08/在Ubuntu上安装RStudio遇到的问题以及解决方法/</id>
    <published>2020-03-08T02:49:50.000Z</published>
    <updated>2020-03-08T03:19:31.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-配置R的运行环境"><a href="#1-配置R的运行环境" class="headerlink" title="1.配置R的运行环境"></a>1.配置R的运行环境</h3><p>在安装RStudio之前，首先需要配置R的运行环境：<br><br>先搜索一下，看看默认软件源有没有 <code>r</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search r</span><br></pre></td></tr></table></figure></p><p>我找到了<code>r-base</code>，其介绍文字如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GNU R statistical computation and graphics system</span><br></pre></td></tr></table></figure></p><p>没错就是这个了,现在来安装：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install R-base</span><br></pre></td></tr></table></figure></p><h3 id="2-安装RStudio"><a href="#2-安装RStudio" class="headerlink" title="2.安装RStudio"></a>2.安装RStudio</h3><p>首先依旧是看一下默认软件源有没有安装包，经测试，答案是没有。<br><br>所以我来到了RStudio的官网，下载了对应的安装包，这样就可以使用系统自带的软件商店进行安装了<br><br>但是，不知道什么原因，这种方法无法安装<br><br>于是继续使用命令行工具进行安装：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i rstudio-1.0.153-amd64.deb</span><br></pre></td></tr></table></figure></p><p>这时桌面上已经出现了RStudio的图标。<br><br>本以为一切即将结束的时候，却发现点击图标之后并没有如预期那样跳出图像界面。<br><br>回看命令行提示，发现有两个依赖包缺失，分别是<code>libgstreamer0.10-0</code>，<code>libgstreamer-plugins-base0.10-0</code>，所以去下载这两个包：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.ca.debian.org/debian/pool/main/g/gstreamer0.10/libgstreamer0.10-0_0.10.36-1.5_amd64.deb</span><br><span class="line">wget http://ftp.ca.debian.org/debian/pool/main/g/gst-plugins-base0.10/libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb</span><br></pre></td></tr></table></figure></p><p>现在来安装刚刚下载的缺失包：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i libgstreamer0.10-0_0.10.36-1.5_amd64.deb</span><br><span class="line">sudo dpkg -i libgstreamer-plugins-base0.10-0_0.10.36-2_amd64.deb</span><br></pre></td></tr></table></figure></p><p>还需要设置这两个包为不更新状态，否则在今后更新依赖包时会将现在的正确版本覆盖掉，导致RStudio不可用。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-mark hold libgstreamer-plugins-base0.10-0</span><br><span class="line">sudo apt-mark hold libgstreamer0.10</span><br></pre></td></tr></table></figure></p><p>到现在，就可以安装RStudio了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gdebi rstudio-1.0.153-amd64.deb</span><br></pre></td></tr></table></figure></p><p>至此，成功安装RStudio。<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-配置R的运行环境&quot;&gt;&lt;a href=&quot;#1-配置R的运行环境&quot; class=&quot;headerlink&quot; title=&quot;1.配置R的运行环境&quot;&gt;&lt;/a&gt;1.配置R的运行环境&lt;/h3&gt;&lt;p&gt;在安装RStudio之前，首先需要配置R的运行环境：&lt;br&gt;&lt;br&gt;先搜索一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>计网问答</title>
    <link href="http://yoursite.com/2020/03/07/%E8%AE%A1%E7%BD%91%E9%97%AE%E7%AD%94/"/>
    <id>http://yoursite.com/2020/03/07/计网问答/</id>
    <published>2020-03-07T11:33:50.000Z</published>
    <updated>2020-03-15T03:08:18.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章、计算机网络体系结构"><a href="#第一章、计算机网络体系结构" class="headerlink" title="第一章、计算机网络体系结构"></a>第一章、计算机网络体系结构</h1><h3 id="1-计算机网络的定义"><a href="#1-计算机网络的定义" class="headerlink" title="1.计算机网络的定义"></a>1.计算机网络的定义</h3><blockquote><p>计算机网络就是一些互连的，自治的计算机系统的集合。<br></p></blockquote><h3 id="2-计算机网络的组成"><a href="#2-计算机网络的组成" class="headerlink" title="2.计算机网络的组成"></a>2.计算机网络的组成</h3><blockquote><p>(1)物理组成：硬件（<code>由主机、通信处理剂、通信线路和交换设备组成</code>），软件（<code>实现资源共享的软件和方便用户使用的工具软件</code>），协议（<code>一种规则</code>）;<br><br>(2)工作方式组成：边缘部分(<code>由所有连接在互联网上，供用户直接使用的主机组成，用来进行通信和资源共享</code>)，核心部分(<code>由大量的网络和连接这些网络的路由器组成，它为边缘部分提供连通性和交换服务</code>)；<br><br>(3)功能组成：通信子网(<code>由各种传输介质、通信设备和相应的网络协议组成，为网络提供数据传输、交换和控制能力，实现互联网计算机之间的数据通信</code>)，资源子网(<code>由主机、终端以及各种软件资源、信息资源组成，负责全网的数据处理业务，向网络用户提供各种网络资源与服务</code>)。<br><br>&ensp;&ensp;&ensp;&ensp;注意：通信子网包括物理层，数据链路层和网络层<br></p></blockquote><h3 id="3-计算机网络的功能"><a href="#3-计算机网络的功能" class="headerlink" title="3.计算机网络的功能"></a>3.计算机网络的功能</h3><blockquote><p><strong>数据通信</strong>：计算机网络<code>最基本</code>和<code>最重要</code>的功能，包括连接控制、传输控制、差错控制、流量控制、路由选择、多路复用等子功能；<br><br><strong>资源共享</strong>：包括数据资源、软件资源以及硬件资源；<br><br><strong>分布式处理</strong>：当计算机网络中某个计算机系统负载过重时，可以将其处理的任务传送给网络中的其他计算机系统进行处理，利用空闲计算机资源提高整个系统的利用率；<br><br><strong>信息综合处理</strong>：将分散在各地计算机中的数据资料进行集中处理或分级处理；<br><br><strong>负载均衡</strong>：将工作任务均衡地分配给计算机网络中的各台计算机；<br><br><strong>提高可靠性</strong>：计算机网络中的各台计算机可以通过网络互为替代机。<br></p></blockquote><h3 id="4-计算机网络的分类"><a href="#4-计算机网络的分类" class="headerlink" title="4.计算机网络的分类"></a>4.计算机网络的分类</h3><blockquote><p>(1)按分布范围分类：广域网、城域网、局域网、个人区域网；<br><br>(2)按拓扑结构分类：星形网络、总线型网络、环形网络、网状型网络；<br><br>(3)按传输技术分类：广播式网络、点对点网络；<br><br>(4)按使用者分类：公用网、专用网；<br><br>(5)按数据交换技术分类：电路交换网络、报文交换网络、分组交换网络；<br></p></blockquote><h3 id="5-计算机网络的标准化工作及相关组织"><a href="#5-计算机网络的标准化工作及相关组织" class="headerlink" title="5.计算机网络的标准化工作及相关组织"></a>5.计算机网络的标准化工作及相关组织</h3><blockquote><p>互联网草案–&gt;建议标准（RFC文档）–&gt;草案标准–&gt;互联网标准。<br><br>ISO 、ITO 、IEEE<br></p></blockquote><h3 id="6-实体、对等层、对等实体"><a href="#6-实体、对等层、对等实体" class="headerlink" title="6. 实体、对等层、对等实体"></a>6. 实体、对等层、对等实体</h3><blockquote><p>实体：任何可发送或接收信息的硬件或软件进程，通常是一个特定的软件模块；<br><br>对等层：不同机器上的同一层；<br><br>对等实体：同一层上的实体。<br></p></blockquote><h3 id="7-协议"><a href="#7-协议" class="headerlink" title="7.协议"></a>7.协议</h3><blockquote><p>协议是控制两个对等实体进行通信的规则，也就是水平的。<br><br>协议的组成包括：<code>语义（对构成协议的元素含义的解释）</code>，<code>语法（数据与控制信息的结构或格式）</code>和<code>同步（规定了协议的控制顺序）</code>。<br></p></blockquote><h3 id="8-接口"><a href="#8-接口" class="headerlink" title="8.接口"></a>8.接口</h3><blockquote><p>接口又称<code>服务访问点</code>，没有接口就不能提供服务；<br><br>SDU、PCI、ICI、PDU、IDU。<br></p></blockquote><h3 id="9-服务"><a href="#9-服务" class="headerlink" title="9.服务"></a>9.服务</h3><blockquote><p>服务指下层为相邻上层提供的功能调用。<br><br>协议是水平的，而服务是垂直的。<br><br>服务主要包括以下三类：<br><br>&ensp;&ensp;&ensp;&ensp;(1)面向连接的服务（<code>建立连接、使用连接、释放连接</code>）和面<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;向无连接的服务（<code>把每个带有目的地址的包传送到线路上，由系统选定路线进行传输</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;(2)有应答服务（<code>接收方收到数据后向发送方给出相应的应答</code>）<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;和无应答服务（<code>接收方收到数据后不自动给出应答</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;(3)可靠服务(<code>网络具有检错、纠错、应答机制</code>)和不可靠服务（<code>尽力而为</code>）；<br></p></blockquote><h3 id="10-面向连接的服务和面向无连接服务的对比"><a href="#10-面向连接的服务和面向无连接服务的对比" class="headerlink" title="10.面向连接的服务和面向无连接服务的对比"></a>10.面向连接的服务和面向无连接服务的对比</h3><blockquote><p>面向连接的服务：<br><br>&ensp;&ensp;&ensp;&ensp;优点：可靠信息流（<code>只要被接收的都是正确的</code>）;<br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;信息回复确认（<code>每收到一条信息就回复一次，若出错则告诉发送方，要求重传</code>）<br><br>&ensp;&ensp;&ensp;&ensp;缺点：占用通信信道<br><br>面向无连接的服务：<br><br>&ensp;&ensp;&ensp;&ensp;优点：不占用通信信道<br><br>&ensp;&ensp;&ensp;&ensp;缺点：信息流可能丢失（<code>在传输过程中，信息可能丢失，对方可能收不到信息</code>）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;信息无回复确认（<code>收到信息就收下，不告诉对方已经收到</code>）。<br></p></blockquote><h3 id="11-计算机网络的性能指标"><a href="#11-计算机网络的性能指标" class="headerlink" title="11.计算机网络的性能指标"></a>11.计算机网络的性能指标</h3><blockquote><p>(1)<strong>时延</strong>：发送时延(传输时延)+传播时延+处理时延+排队时延;<br><br>(2)<strong>时延带宽积</strong>：传播时延<em>带宽;<br><br>(3)<strong>往返时间</strong>：从发送方发送数据开始，到发送方收到来自接收方的确认消息为止<br><br>(4)<strong>利用率</strong></em>：信道利用率（某信道有百分之几的时间时被利用的）+网络利用率（全网络的信道利用率的平均值）。<br></p></blockquote><h3 id="12-五层参考模型总结"><a href="#12-五层参考模型总结" class="headerlink" title="12.五层参考模型总结"></a>12.五层参考模型总结</h3><p><img src="1.png" alt=""><br></p><h3 id="13-OSI参考模型和TCP-IP参考模型的特性对比"><a href="#13-OSI参考模型和TCP-IP参考模型的特性对比" class="headerlink" title="13.OSI参考模型和TCP/IP参考模型的特性对比"></a>13.OSI参考模型和TCP/IP参考模型的特性对比</h3><p><img src="2.jpg" alt=""><br></p><h1 id="第二章、物理层"><a href="#第二章、物理层" class="headerlink" title="第二章、物理层"></a>第二章、物理层</h1><h3 id="1-信号"><a href="#1-信号" class="headerlink" title="1.信号"></a>1.信号</h3><blockquote><p><strong>信号</strong>是数据（<code>传送信息的实体</code>）的电气或电磁的表现。<br><br>信道上传送的信号可以分为<code>基带信号</code>和<code>宽带信号</code>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>基带信号</strong>是将数字信号0和1直接用两种不同的电压表示，然后传送到数字信道上去传输，称为<strong>基带传输</strong>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;<strong>宽带信号</strong>是将基带信号进行调制后形成模拟信号，然后再传送到模拟信道上去传输，称为<strong>宽带传输</strong>。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一句话：基带对应数字信号，宽带对应模拟信号。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;注意：宽带传输==频带传输(in 考研）。<br></p></blockquote><h3 id="2-信源、信道、信宿"><a href="#2-信源、信道、信宿" class="headerlink" title="2.信源、信道、信宿"></a>2.信源、信道、信宿</h3><blockquote><p><strong>信源</strong>：通信过程中产生和发送信息的设备或计算机。<br><br><strong>信道</strong>：信息传送的道路，也就是信号的传输媒质，分为有线信道和无线信道。<br><br><strong>信宿</strong>：通信过程中接收和处理信息的设备或计算机。<br></p></blockquote><h3 id="3-速率、波特、码元"><a href="#3-速率、波特、码元" class="headerlink" title="3.速率、波特、码元"></a>3.速率、波特、码元</h3><blockquote><p>速率就是单位时间内传输的数据量，可用波特率和比特率来描述。<br><br>波特率：又称<code>码元传输速率</code>，表示单位时间内数字通信系统所能传输的<code>码元个数</code>。<br><br>比特率：又称<code>信息传输速率</code>，表示单位时间内数字通信系统所能传输的<code>二进制码元个数</code>，即<code>比特数</code>，单位为<code>bit/s</code>。<br></p></blockquote><h3 id="4-带宽"><a href="#4-带宽" class="headerlink" title="4.带宽"></a>4.带宽</h3><blockquote><p>在计算机网络中，带宽是用来表示<code>网络的通信线路</code>所能<code>传送数据的能力</code>，表示单位时间内从网络中的某一点到另一点所能通过的<code>最高数据率</code>。<br><br>此时，带宽的单位不再是赫兹(Hz)，而是<code>bit/s</code>。<br></p></blockquote><h3 id="5-奈奎斯特定理"><a href="#5-奈奎斯特定理" class="headerlink" title="5.奈奎斯特定理"></a>5.奈奎斯特定理</h3><blockquote><p>由来：寻找在保证不出现码间串扰的条件下的码元的最大传输速率。<br><br>（<code>码间串扰：具体的信道所能通过的频率范围总是有限的，所以信号中的大部分高频分量就过不去了，这样在传输共享中会衰减，导致在接收端收到的信号的波形就失去了码元之间的清晰界限，这种现象就是码间串扰</code>）<br><br><strong>奈奎斯特定理</strong>:<br><br>$$C_{max}=f_{采样}*log_2N(bit/s)$$<br>其中，<code>f</code>代表<code>理想低通信道</code>的带宽，<code>N</code>表示每个码元的离散电平的数目。<br></p></blockquote><h3 id="6-区分低通信道和带通信道"><a href="#6-区分低通信道和带通信道" class="headerlink" title="6.区分低通信道和带通信道"></a>6.区分低通信道和带通信道</h3><p><code>低通信道</code>就是信号的频率只要不超过某个上限值，都可以不失真地通过信道（有上限，无下限），理想低通信道的最高码元传输速率是每秒2个码元；<br><br><code>带通信道</code>既有上限也有下限，，理想带通信道的最高码元传输速率是每秒1个码元。<br></p><h3 id="7-香农定理"><a href="#7-香农定理" class="headerlink" title="7.香农定理"></a>7.香农定理</h3><blockquote><p>公式：<br><br>$$C_{max}=W*log_2(1+S/N)(bit/s)$$<br>其中，<code>W</code>为信道的带宽，$S/N$为信噪比。<br><br>想要提高信息的传输速率，需要增大信噪比或者提高带宽（注意：仅仅提高改善编码不可能超过香农公式算出的速率）。<br></p></blockquote><h3 id="8-对比奈奎斯特定理和香农定理"><a href="#8-对比奈奎斯特定理和香农定理" class="headerlink" title="8.对比奈奎斯特定理和香农定理"></a>8.对比奈奎斯特定理和香农定理</h3><blockquote><p><strong>奈奎斯特定理</strong>：<br><br>(1)指出了码元的传输速率是受限的，不能任意提高，否则在接收端就无法判定码元是0还是1（码间串扰）;<br><br>(2)是在理想条件下推出来的(无噪声);<br><br>(3)并没有对信息传输速率给出限制（可以无限大，只要编码技术足够好）。<br><br><strong>香农定理</strong>:<br><br>(1)给出了信息传输速率的极限值，只要传输带宽（Hz）和信噪比确定了，传输速率也就确定了;<br><br>(2)有噪声。<br></p></blockquote><h3 id="9-编码与调制"><a href="#9-编码与调制" class="headerlink" title="9.编码与调制"></a>9.编码与调制</h3><blockquote><p><strong>编码</strong>：将模拟数据或数字数据转换为数字信号的过程。<br><br><strong>调制</strong>：将模拟数据或数字数据转化为模拟信号的过程。<br></p></blockquote><h4 id="9-1调制"><a href="#9-1调制" class="headerlink" title="9.1调制"></a>9.1调制</h4><blockquote><p>(1)数字数据调制为模拟信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;1)带通调制：将基带信号的频带范围搬移到较高的频段以便在信道中传输（3种方法：调频，调幅，调相）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;2)基带调制：改变基带信号的低频成分的波形（仍是基带信号）。<br><br>(2)模拟数据调制为模拟信号：（原因）<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;1)为了实现传输的有效性，可能需要较高的频率；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;2)充分利用带宽。<br></p></blockquote><h4 id="9-2编码"><a href="#9-2编码" class="headerlink" title="9.2编码"></a>9.2编码</h4><blockquote><p>(1)数字数据编码为数字信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;用于基带信号传输中。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;常用编码方式：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)非归零码；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)曼彻斯特编码；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)差分曼彻斯特编码。<br><br>(2)模拟数据编码为数字信号：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;典型例子就是<code>脉冲编码调制</code>，有3个步骤：采样、量化、编码。<br></p></blockquote><h3 id="10-数据传输方式-电路交换、报文交换、分组交换"><a href="#10-数据传输方式-电路交换、报文交换、分组交换" class="headerlink" title="10.数据传输方式(电路交换、报文交换、分组交换)"></a>10.数据传输方式(电路交换、报文交换、分组交换)</h3><blockquote><p>(1)电路交换：在通信之前，通信双方建立一条被双方独占的物理通路。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)通信时延小；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)实时性强；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)有序传输；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)使用范围广（数字/模拟信号均可传输）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)控制简单；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;6)避免冲突。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)建立连接时间长；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)信道利用率低；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)缺乏统一标准(电路交换时，数据之大，不同规格终端难以相互通信，也很难进行差错控制)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)灵活性差（任一节点出错都需要建立新的连接）。<br></p></blockquote><blockquote><p>(2)报文交换：数据交换的单位是报文，报文携带目的地址、源地址等信息；报文交换在交换节点时采用存储转发方式。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)无需建立连接(因此不存在连接时延)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）动态分配线路；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3提高了可靠性；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)提高线路利用率；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)提供多目标服务（一个报文可以发送到多个目的地址）。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)由于数据进入交换节点后要经理存储、转发这一过程，从而引起转发时延；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)报文交换对报文的大小没有限制，这就要求网络节点有大量的存储缓存空间。<br><br>【注】：报文交换主要用于早起的电报通信网中，现在被较先进的分组交换方式取代。<br></p></blockquote><blockquote><p>(3)分组交换：仍采用存储转发方式，但将一个长报文先分割为若干较短的分组，然后逐个转发分组（每个分组都携带目的地址、源地址和编号信息）。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;优点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)加速传输（分组是逐个传输的，所以可以使后一个分组的存储操作与前一个分组的转发操作并行；传输一个分组所需缓冲区较小，因此因缓冲区不足而等待发送的概率以及等待时间也会减小）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)简化了存储管理（分组长度固定，相应缓冲区大小也固定）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)减少了出错概率和重发数据量(因为分组较短，所以出错概率也较小，这样既提高了可靠性，又降低了传输时延)；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;缺点：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)存在传输时延（尽管比报文交换的传输时延少，但相对于电路交换，仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力）；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)当分组交换采用数据报服务时，可能会出现失序、丢失或重复分组的现象，分组到达目的节点时，要重排，很麻烦；若采用虚电路服务，虽无失序问题，单有呼叫建立、数据传输和虚电路释放3个过程。<br></p></blockquote><h3 id="11-电路交换、报文交换、分组交换的应用场景"><a href="#11-电路交换、报文交换、分组交换的应用场景" class="headerlink" title="11.电路交换、报文交换、分组交换的应用场景"></a>11.电路交换、报文交换、分组交换的应用场景</h3><blockquote><p><code>传送的数据量很大，且其传送时间远大于呼叫时间</code>–&gt;电路交换；<br><br><code>端到端的通路由很多段链路组成</code>–&gt;分组交换；<br><br>从提高整个网络的信道利用率来看，报文交换和分组交换优于电路交换，其中分组交换比报文交换的时延小，尤其适合计算机之间的突发式的数据通信。<br></p></blockquote><h3 id="12-分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）"><a href="#12-分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）" class="headerlink" title="12.分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）"></a>12.分组交换的方式（无连接的数据报方式、面向连接的虚电路方式）</h3><blockquote><p>（1）数据报：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)发送分组前无需建立连接；<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)网络尽最大努力交付，传输不保证可靠性，可能乱序或丢失；<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)在具有多个分组的报文中，交换机尚未接收完第二个分组，已经收到的第一个分组就可以转发出去，不仅减小了延迟，而且大大提高了吞吐量；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 4)当某一台交换机或一段链路故障时，可相应地更新转发表，寻找到另一条替代路径转发分组，对故障适应能力强；<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;5)发送方和接收方不独占某一链路，所以资源利用率高。<br></p></blockquote><hr><blockquote><p>（2）虚电路：发送数据之前，在源主机和目的主机之间建立一条虚连接。<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）用户之间必须建立连接，数据传输过程中不再需要寻找路径，相对数据报方式开销小；<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)分组走相同路径，故按序到达；<br><br>   &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3）分组首部并不包含目的地址，而是包含虚电路标识符，相对数据报方式开销小；<br><br>    &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)当某个交换机或某条链路出现故障而彻底失效时，所有经过该交换机或该链路的虚电路将遭到破坏。<br></p></blockquote><h3 id="13-传输介质分类"><a href="#13-传输介质分类" class="headerlink" title="13.传输介质分类"></a>13.传输介质分类</h3><blockquote><p>（1）导向性传输介质：<br><br> &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;双绞线（无屏蔽双绞线和屏蔽双绞线）、同轴电缆、光纤；<br><br> (2)非导向性传输介质：<br><br>  &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;短波、微波、红外线与可见光。<br></p></blockquote><h3 id="14-物理层接口特性"><a href="#14-物理层接口特性" class="headerlink" title="14.物理层接口特性"></a>14.物理层接口特性</h3><blockquote><p>机械特性、电气特性、功能特性、规程特性。<br></p></blockquote><h3 id="15-物理层设备"><a href="#15-物理层设备" class="headerlink" title="15.物理层设备"></a>15.物理层设备</h3><blockquote><p>中继器、集线器（多端口的中继器，处在网络中心，也叫<code>HUb</code>）。<br><br>注意：中继器放大模拟信号，放大器放大数字信号<br><br>这俩货的缺点：<br><br>1）扩大了冲突域且总的吞吐量未提高；<br><br>2)不能互联使用不同以太网技术的局域网。<br></p></blockquote><h1 id="第三章、数据链路层"><a href="#第三章、数据链路层" class="headerlink" title="第三章、数据链路层"></a>第三章、数据链路层</h1><h3 id="1-数据链路层的功能"><a href="#1-数据链路层的功能" class="headerlink" title="1.数据链路层的功能"></a>1.数据链路层的功能</h3><p>数据链路层在物理层所提供的服务的基础上向网络层提供服务，即将原始的、有差错的物理线路改进成逻辑上无差错的数据链路，从而向网络层提供高质量的服务，包括3种：无确认的无连接服务、有确认的无连接服务和有确认的有连接服务（没有无确认的有连接服务）</p><blockquote><p>(1)<strong>链路管理</strong>：负责数据链路的建立、维持和释放，主要用于面向连接的服务；<br><br>(2)<strong>帧同步</strong>：接收方确定收到的比特流中以帧的开始位置和结束位置；<br><br>(3)<strong>差错控制</strong>：用于使接收方确定接收到的数据就是发送方发送的数据；<br><br>(4)<strong>透明传输</strong>：解决与控制符形同的数据如何发送，就是不管数据是什么样的比特组合，都应当能在链路上发送；<br></p></blockquote><h3 id="2-组帧（在网络中以帧为最小传输单位）"><a href="#2-组帧（在网络中以帧为最小传输单位）" class="headerlink" title="2.组帧（在网络中以帧为最小传输单位）"></a>2.组帧（在网络中以帧为最小传输单位）</h3><h4 id="2-1-为什么要组帧"><a href="#2-1-为什么要组帧" class="headerlink" title="2.1 为什么要组帧"></a>2.1 为什么要组帧</h4><blockquote><p>如果传输比特流出错，只需要重传出错的帧即可，无需重传全部比特流，值！<br></p></blockquote><h4 id="2-2-组帧的4种方法"><a href="#2-2-组帧的4种方法" class="headerlink" title="2.2 组帧的4种方法"></a>2.2 组帧的4种方法</h4><blockquote><p>(1)<strong>字符计数法</strong>：用一个<code>特殊的字符</code>表示一帧的开始，然后用一个计数字段来表明该帧包含的字节数。当目的主机接收到该帧时，根据此字段提供的字节数，便可知道该帧的结束位和下一帧的开始位。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;存在问题：若计算字段出错，就无法实现帧同步，因此该方法很少被使用。<br><br>(2)<strong>字节填充的首尾界符法</strong>：在数据中可能出现的<code>控制字符</code>前面加上转义字符<code>ESC</code>。<br><br>(3)<strong>比特填充的首尾标识法（零比特填充法）</strong>：使用<code>01111110</code>作为帧的开始和结束标志。若数据部分也出现<code>01111110</code>，可以这样子：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;只要数据帧检测到有5个连续的1，就麻黄素那个在后面插入0，而接收方没收到连续的5个1，就自动删除后面紧跟的0，以恢复原始数据。<br><br>(4)<strong>物理编码违例法</strong><br>利用物理介质上编码的违法标志来区分帧的开始和结束。<br></p></blockquote><h3 id="3-差错控制"><a href="#3-差错控制" class="headerlink" title="3.差错控制"></a>3.差错控制</h3><h4 id="3-1-检错编码"><a href="#3-1-检错编码" class="headerlink" title="3.1 检错编码"></a>3.1 检错编码</h4><blockquote><p>（1）<strong>奇偶校验码</strong>：在信息码后面添加一位校验码，分为<code>奇校验</code>和<code>偶校验</code>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)奇校验：添加一位校验码后，使得整个码字里面1的个数是奇数。接收端若检测到偶数个1，则认为数据出错，要求重发数据；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)偶校验：添加一位校验码后，使得整个码字里面1的个数是偶数。接收端若检测到奇数个1，则认为数据出错，要求重发数据；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;缺点：若同时有两位数据发送改变，则无法检出错误。检错率低<br></p></blockquote><blockquote><p>（2）<strong>循环冗余码(CRC)</strong><br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;优势：检错率极高、开销小、易实现。</p></blockquote><h4 id="3-2-纠错编码（不但能检错，还能纠错）"><a href="#3-2-纠错编码（不但能检错，还能纠错）" class="headerlink" title="3.2 纠错编码（不但能检错，还能纠错）"></a>3.2 纠错编码（不但能检错，还能纠错）</h4><p><strong>海明码</strong>。<br></p><h3 id="4-流量控制和可靠传输机制（in-传输层）"><a href="#4-流量控制和可靠传输机制（in-传输层）" class="headerlink" title="4.流量控制和可靠传输机制（in 传输层）"></a>4.流量控制和可靠传输机制（in 传输层）</h3><h4 id="4-1-流量控制"><a href="#4-1-流量控制" class="headerlink" title="4.1 流量控制"></a>4.1 流量控制</h4><blockquote><p><strong>含义</strong>：控制发送方发送数据的速率，使接收方来得及接收。<br><br><strong>基本方法</strong>：由接收方控制发送方的数据流，常见两种方法：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）<strong>停止-等待流量控制</strong>：发送方发出一帧，然后等待应答信号到达再发送下一帧；接收方每收到一帧后，返回一个应答信号，表示可以接收下一帧，如果接收方不返回应答，则发送方必须一直等待；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）<strong>滑动窗口流量控制</strong>：在任意时刻，发送方都维护了一组连续的允许发送的帧的序号，称为<code>发送窗口</code>；同时，接收方也维护了一组连续的允许接收的帧的序号，称为<code>接收窗口</code>。发送窗口内的序列号代表了那些已经被发送但是还没有被确认的帧，或者是那些可以被发送的帧。发送端每收到一个帧的确认，就发送串口就向前滑动一个帧的位置。当发送窗口尺寸达到最大尺寸时，发送方会强行关闭网络层，直到有一个空闲缓冲区出来。在接收端只有当收到的数据帧的发送序号落入接收窗口内才允许将该帧收下，并将窗口前移一个位置。若收到的数据帧落到接收窗口之外，就丢弃。<br></p></blockquote><h4 id="4-2-可靠传输机制-包括：停止-等待协议、后退N帧协议、选择重传协议"><a href="#4-2-可靠传输机制-包括：停止-等待协议、后退N帧协议、选择重传协议" class="headerlink" title="4.2 可靠传输机制(包括：停止-等待协议、后退N帧协议、选择重传协议)"></a>4.2 可靠传输机制(包括：停止-等待协议、后退N帧协议、选择重传协议)</h4><blockquote><p>与无差错接收（比如在数据链路层使用循环冗余码检验差错检测技术，凡是接收端接收的帧均无差错，有差错的被丢弃了呗）不同，可靠传输是指<code>数据链路层发送什么，接收端就接收什么</code>。传输差错包括<code>无比特差错（可用CRC检测）</code>和<code>无传输差错（更复杂，可能帧没问题，但出现了帧失序或者帧重复）</code>。<br></p></blockquote><h4 id="4-3-滑动窗口机制"><a href="#4-3-滑动窗口机制" class="headerlink" title="4.3.滑动窗口机制"></a>4.3.滑动窗口机制</h4><blockquote><p>只有在接收窗口向前滑动时（与此同时也发送了确认），发送窗口才有可能向前滑动。<br><br>当接收窗口大小为1时，可保证帧按序接收。<br></p></blockquote><h4 id="4-4-停止-等待协议（基于停止-等待流量控制技术）"><a href="#4-4-停止-等待协议（基于停止-等待流量控制技术）" class="headerlink" title="4.4 停止-等待协议（基于停止-等待流量控制技术）"></a>4.4 停止-等待协议（基于停止-等待流量控制技术）</h4><blockquote><p><strong>原理</strong>：发送方传输一个帧后，必须等待对方的确认才能发送下一帧。若在规定的时间内没有收到确认，则发送超时，并重传原始帧。<br></p></blockquote><h4 id="4-5后退N帧（GBN）协议（基于滑动窗口流量控制技术）"><a href="#4-5后退N帧（GBN）协议（基于滑动窗口流量控制技术）" class="headerlink" title="4.5后退N帧（GBN）协议（基于滑动窗口流量控制技术）"></a>4.5后退N帧（GBN）协议（基于滑动窗口流量控制技术）</h4><blockquote><p><strong>原理</strong>：发送方发送完一个数据帧后，不是停下来等待确认帧，而是可以连续再发送若干个数据帧。如果这是收到了接收方的确认帧，那么还可以接着再发送数据帧。如果某个帧出错了，接收方只能简单地丢弃该帧机器所有的后续帧。发送方超时后需重发该出错帧及其后续所有帧。<br><br><strong>评价</strong>：减少了等待时间，使得整个通信的吞吐量得到提高。但接收方已发行错误帧，就不再接收后续帧，造成了一定浪费。于是有了下面的<code>选择重传协议</code><br></p></blockquote><h4 id="4-6-选择重传（SR）协议（基于滑动窗口流量控制技术）"><a href="#4-6-选择重传（SR）协议（基于滑动窗口流量控制技术）" class="headerlink" title="4.6 选择重传（SR）协议（基于滑动窗口流量控制技术）"></a>4.6 选择重传（SR）协议（基于滑动窗口流量控制技术）</h4><blockquote><p><strong>原理</strong>：若一帧出错，则其后续帧先存入接收方的缓冲区帧，同时要求发送方重传出错帧，一旦收到重传帧后，就和原先存在缓冲区的其余帧一起按正确的顺序送至主机。<br><br><strong>评价</strong>：避免了重复传输那些本来已经正确到达接收方的数据帧，进一步提高了信道利用率，但代价是增加了缓冲空间。<br></p></blockquote><h3 id="5-介质访问控制"><a href="#5-介质访问控制" class="headerlink" title="5.介质访问控制"></a>5.介质访问控制</h3><blockquote><p>(1)信道划分介质访问控制；<br><br>(2)随机访问介质访问控制；<br><br>(3)轮询访问介质访问控制。<br></p></blockquote><h4 id="5-1-信道划分介质访问控制-静态划分信道"><a href="#5-1-信道划分介质访问控制-静态划分信道" class="headerlink" title="5.1 信道划分介质访问控制(静态划分信道)"></a>5.1 信道划分介质访问控制(静态划分信道)</h4><blockquote><p>1)频分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;将一条信道分割成多个不同频率的信道(类似将马路分割为多个车道)。<br><br>若复用数之间，则需增加信道的(频率)带宽。<br></p></blockquote><blockquote><p>2)时分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;将一个固定时间分割成多个时间段。<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;但是有可能某个时间段内，要使用的那个人不用了，此时会出现空等状态，太浪费<br><br>于是出现了改进版的，也就是<code>统计时分复用</code>，这是一种动态的时间分配，又称<code>异步时分复用</code>，可以避免浪费（只要没人用就自己用）。<br><br>3)波分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;光的频分多路复用。<br><br>4)码分多路复用：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;又称<code>码分多址（CDMA）</code>，既共享信道的频率，又共享时间，是一种真正的动态复用技术，抗干扰能力强、保密性强、语音质量好。<br></p></blockquote><h4 id="5-2-随机访问介质访问控制（动态划分信道–-gt-随机接入）"><a href="#5-2-随机访问介质访问控制（动态划分信道–-gt-随机接入）" class="headerlink" title="5.2 随机访问介质访问控制（动态划分信道–&gt;随机接入）"></a>5.2 随机访问介质访问控制（动态划分信道–&gt;随机接入）</h4><p>【注1】<code>动态划分信道</code>包括<code>随机接入</code>和<code>受控接入</code><br><br>【注2】<code>随机访问介质访问控制</code>又称<code>争用型协议</code>，因为其核心思想是通过争用，胜利者才可以获得信道，主要有4种协议：<br></p><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1）<br><strong>ALOHA协议</strong>：<br><br>当网络中的任何一个结点发送数据时，可以不进行任何检测就发送数据。如果在一段时间内没有收到确认，该结点就认为传输过程中发生了冲突。发生冲突的结点需要等待一个随机的数据后再次发生数据。直到发送成功。<br><br>缺点：信道利用率不理想<br><br>改进:时分ALOHA：所有结点的时间被划分为间隔相同的时隙，并规定每个节点只有当下一个时隙到来时才可以发送数据。<br></p></blockquote><blockquote><p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2）<strong>载波侦听多路访问(CSMA)协议</strong>：<br><br>每个节点在发送数据之前，使用载波侦听技术来判定通信信道是否空闲，常用<strong>3种策略</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1-坚持CSMA：一旦监听到信道空闲立即发送数据，否则继续监听；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;p-坚持CSMA：一旦监听到信道空闲，以概率p发送数据，以概率（1-p）延迟一段时间并重新监听；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;非坚持CSMA：一旦监听到信道空闲，便立即发送数据，否则延迟一段随机时间再重新监听。<br></p></blockquote><blockquote><p>3）<strong>带冲突检测的载波侦听多路访问（CSMA/CD）协议</strong>：<br><br><strong>策略</strong>：先听后发，边听边发，冲突停发，随机重发。<br><br><strong>争用期</strong>：以太网端到端的往返时延，又称<code>冲突窗口</code>或者<code>碰撞窗口</code>。只有经过争用期这段时间还没有检测到冲突，才能肯定这次发送不会发生冲突。<br></p></blockquote><blockquote><p>4)<strong>CSMA/CA协议</strong>：<br><br>在CSMA基础上增加了冲突避免功能。主要用在无线局域网中。<br><br>冲突避免要求每个结点在发送数据之前监听信道，若信道空闲，则发送数据。发送完一个帧后，必须等待一段时间，检查接收方是否发回了帧确认，若收到则继续发送，否则表明出现冲突，重发该帧。<br></p></blockquote><h4 id="5-3-轮询访问介质访问控制（动态划分信道–-gt-受控接入）"><a href="#5-3-轮询访问介质访问控制（动态划分信道–-gt-受控接入）" class="headerlink" title="5.3 轮询访问介质访问控制（动态划分信道–&gt;受控接入）"></a>5.3 轮询访问介质访问控制（动态划分信道–&gt;受控接入）</h4><p>用户不能随意地发送信息，而是通过一个集中控制的监控站经过轮询过程后再决定信道的分配。典型的轮询访问介质访问控制协议就是<code>令牌传递协议</code>。<br></p><h3 id="6-局域网"><a href="#6-局域网" class="headerlink" title="6.局域网"></a>6.局域网</h3><h4 id="6-1-局域网的基本概念"><a href="#6-1-局域网的基本概念" class="headerlink" title="6.1 局域网的基本概念"></a>6.1 局域网的基本概念</h4><h5 id="6-1-1-局域网的定义"><a href="#6-1-1-局域网的定义" class="headerlink" title="6.1.1 局域网的定义"></a>6.1.1 局域网的定义</h5><blockquote><p>局域网是指一个较小范围内的多台计算机或者其他通信设备，通过双绞线、同轴电缆等连接介质互连起来，以达到资源和信息共享目的的互联网络。<br></p></blockquote><h5 id="6-1-2-局域网的主要特点"><a href="#6-1-2-局域网的主要特点" class="headerlink" title="6.1.2 局域网的主要特点"></a>6.1.2 局域网的主要特点</h5><blockquote><p>1)局域网为一个单位所拥有；<br><br>2)地理范围和站点数目有限；<br><br>3)与以前的非光纤的广域网相比，局域网具有较高的数据率、较低的时延和较小的误码率。<br></p></blockquote><h5 id="6-1-3-局域网的主要优点"><a href="#6-1-3-局域网的主要优点" class="headerlink" title="6.1.3 局域网的主要优点"></a>6.1.3 局域网的主要优点</h5><blockquote><p>1）具有广播功能，从一个站点可很方便访问全网；<br><br>2）具有==便于系统的扩展和演变，各设备的位置可灵活的调整和改变；<br><br>3)提高了系统的可靠性、可用性；<br><br>4)各站为平等关系而不是主从关系。<br></p></blockquote><h5 id="6-1-4-局域网的主要技术要素"><a href="#6-1-4-局域网的主要技术要素" class="headerlink" title="6.1.4 局域网的主要技术要素"></a>6.1.4 局域网的主要技术要素</h5><blockquote><p>(1)<strong>网络拓扑结构</strong>：星形网、环形网、总线型网和树形网。<br><br>(2)<strong>传输介质</strong>：双绞线（主流）、铜缆、光纤。<br><br>(3)<strong>介质访问控制方法</strong>：CSMA/CD、令牌总线和令牌环。</p></blockquote><h4 id="6-2一个局域网的典型代表—-以太网"><a href="#6-2一个局域网的典型代表—-以太网" class="headerlink" title="6.2一个局域网的典型代表—-以太网"></a>6.2一个局域网的典型代表—-以太网</h4><blockquote><p><strong>工作原理</strong>：以太网采用<code>IEEE802.3</code>标准，采用总线拓扑结构，信息以广播形式发送，使用CSMA/CD技术对总线进行访问控制，提供的是不可靠的服务（无连接，不对发送的数据帧编号，也不要求接收方发回确认）。<br><br><strong>以太网的MAC帧</strong>：包括<code>前导码</code>和<code>目的地址、源地址</code>和<code>类型</code>和<code>数据</code>和<code>填充</code>和<code>校验码</code>。<br><br><strong>以太网的传输介质</strong>：10Base5（粗缆）、10Base2（细缆）、10Base-T（双绞线）、10Base-F（光纤）。<br></p></blockquote><h4 id="6-3-高速以太网（传输速率-gt-100Mbit-s）"><a href="#6-3-高速以太网（传输速率-gt-100Mbit-s）" class="headerlink" title="6.3 高速以太网（传输速率&gt;=100Mbit/s）"></a>6.3 高速以太网（传输速率&gt;=100Mbit/s）</h4><blockquote><p>100Base-T以太网、吉比特以太网（千兆以太网），10吉比特以太网。<br></p></blockquote><h4 id="6-4-无线局域网"><a href="#6-4-无线局域网" class="headerlink" title="6.4 无线局域网"></a>6.4 无线局域网</h4><blockquote><p>可分为有固定设施的无线局域网和无固定设施的无线局域网。<br></p></blockquote><h4 id="6-5-令牌环网的工作原理"><a href="#6-5-令牌环网的工作原理" class="headerlink" title="6.5 令牌环网的工作原理"></a>6.5 令牌环网的工作原理</h4><blockquote><p>(1）当网络空闲时，环路中只有令牌在网络中循环传递；<br><br>(2) 令牌传递到有数据要发送的结点处，该节点就修改令牌的一个标志位，然后在令牌中附加自己需要的数据，这样就将令牌改换成了一个数据帧，源结点将这个数据帧发送出去；<br><br>(3)数据帧沿着环路传递，接收到的结点一边转发数据，一边查看帧的目的地址，若是自己的就收下；<br><br>(4）当数据帧到达了源节点，源节点收到了自己发出去的数据帧，便不再转发了。同时，源节点要通过校验返回的数据帧进行检错，若出错，则重发；<br><br>(5源节点传送完数据后，重新产生一个令牌，并将其传递给下一个站点，以交出发送数据帧的权限。<br></p></blockquote><h3 id="7-广域网"><a href="#7-广域网" class="headerlink" title="7.广域网"></a>7.广域网</h3><h4 id="7-1-广域网定义"><a href="#7-1-广域网定义" class="headerlink" title="7.1 广域网定义"></a>7.1 广域网定义</h4><blockquote><p>覆盖范围很广的长距离网络。<br></p></blockquote><h4 id="7-2-PPP（面向字节）"><a href="#7-2-PPP（面向字节）" class="headerlink" title="7.2 PPP（面向字节）"></a>7.2 PPP（面向字节）</h4><blockquote><p><strong>组成</strong>：<br><br>1)一个将IP数据包封装到串行链路的方法；<br><br>2)一个链路控制协议（LCP）；<br><br>3)一套网络控制协议（NCP）。<br></p></blockquote><blockquote><p><strong>PPP的帧格式</strong>：<br><br>标志字段（F）、地址字段（A）、控制字段（C）、协议字段、信息部分、帧检验序列（FCS）。<br></p></blockquote><h4 id="7-3-HDLC协议（面向比特）"><a href="#7-3-HDLC协议（面向比特）" class="headerlink" title="7.3 HDLC协议（面向比特）"></a>7.3 HDLC协议（面向比特）</h4><blockquote><p>HDLC协议可适用于两种配置：非平衡配置（由一个主站控制整个链路的工作）和平衡配置（链路两端的两个站都是复合站，每个复合站都可以平等地发起数据传输，而怒需要得到对方复合站的允许）。<br><br>HDLC协议的帧格式：<br><br>标志字段（F）、地址字段（A）、控制字段（C）、信息字段、帧检验序列（FCS）。<br></p></blockquote><h3 id="8-数据链路层的设备"><a href="#8-数据链路层的设备" class="headerlink" title="8.数据链路层的设备"></a>8.数据链路层的设备</h3><h4 id="8-1-网桥"><a href="#8-1-网桥" class="headerlink" title="8.1 网桥"></a>8.1 网桥</h4><blockquote><p>具有过滤帧的功能。<br><br><strong>优点</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)过滤通信量；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)扩大了物理范围；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)提高了可靠性；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;4)可互连不同物理层、不同MAC子层和不同速率的以太网。<br><br><strong>缺点</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)存储转发增加了时延；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)在MAC子层并没有流量控制功能；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;3)具有不同MAC子层的网段桥接在一起时时延更大；<br><br>网桥只适合于用户数不太多和通信量不太大的局域网，否则产生广播风暴（传播过多的广播信息而产生网络拥塞）。<br><br><strong>分类</strong>：透明网桥（选择的不是最佳路由）、源选径网桥。<br></p></blockquote><h4 id="8-2-局域网交换机"><a href="#8-2-局域网交换机" class="headerlink" title="8.2 局域网交换机"></a>8.2 局域网交换机</h4><blockquote><p><strong>实质</strong>：多端口网桥。<br><br><strong>优点</strong>：不仅每个端口节点所占用的带宽不会因为端口节点数量的最佳而减少，而且整个交换机的带宽会随着带宽节点的增加而增加。<br><br><strong>两种交换模式</strong>：<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;1)直通式交换：只检查帧的目的地址，帧在被接收后立即发出。速度快，不安全，不支持具有不同速率的端口的交换；<br><br>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;2)存储转发式交换：先将接收到的帧存储在高速缓存中，检错，若不错则查找转发表，将该帧从查询到的端口转发出去；若出错则丢弃。可靠性高，支持不同速率端口间的转换，但延迟较大。<br><br><strong>工作原理</strong>：<br><br>和网桥类似，检测从某端口进入交换机的帧的源MAC地址和目的MAC地址，然后与系统内部的动态查找表进行比较，若数据报的MAC地址不在查找表中，则将该地址加入查找表中，并将数据报发送给相应的目的端口。<br></p></blockquote><h2 id="第四章、网络层"><a href="#第四章、网络层" class="headerlink" title="第四章、网络层"></a>第四章、网络层</h2><h3 id="1-网络层的功能"><a href="#1-网络层的功能" class="headerlink" title="1. 网络层的功能"></a>1. 网络层的功能</h3><blockquote><p>(1)异构网络互联；<br><br>(2)路由与转发：路由器的主要功能包括<code>路由选择</code>（根据路由算法确定一个进来的分组应该被传送到哪一条输出线路上）和<code>分组转发（路由器根据转发表将用户的IP数据报从合适的端口发送出去）</code>；<br><br>(3)拥塞控制：分为<code>开环控制（事先考虑发生拥塞的有关因素，力求避免拥塞）</code>和<code>闭环控制（事先不考虑，采用监视系统即时检测）</code>两大类。<br></p></blockquote><h3 id="2-路由算法"><a href="#2-路由算法" class="headerlink" title="2.路由算法"></a>2.路由算法</h3><p>（1）按照<code>路由算法能否随网络的通信量或一欧普自适应地进行调整变化来划分，</code>总体可分为<code>静态路由选择策略</code>和<code>动态路由选择策略</code>，前者手工做，简单开销小，适合小网络，后者能较好的适应网络状态的变化，但实现复杂。<br><br><strong>动态路由选择算法</strong>包括<code>距离-向量路由算法</code>和<code>链路状态路由算法</code>。<br></p><blockquote><p><strong>距离-向量路由算法</strong>中，路由器只掌握物理相邻的邻居以及链路费用，是一种分散性算法，典型代表是RIP；<br><br><strong>链路状态路由算法</strong>中，所有路由器掌握完整的物理拓扑和链路费用信息，是一种全局性算法，典型代表是OSPF。<br></p></blockquote><p>（2）按层次，因特网把<strong>路由选择协议</strong>划分为<code>内部网关协议（IGP）</code>和<code>外部网关协议（EGP）</code>。<br></p><blockquote><p>内部网关协议主要有RIP和OSPF，外部网关协议主要有BGP。<br></p></blockquote><h3 id="3-路由（选择）协议"><a href="#3-路由（选择）协议" class="headerlink" title="3.路由（选择）协议"></a>3.路由（选择）协议</h3><p>(1) <strong>RIP</strong>(内部网关协议)：<br></p><blockquote><p>基于距离-向量算法，仅和相邻路由器交换信息，交换的信息是当前本路由器所知道的全部信息，按照<code>固定时间间隔</code>交换路由信息。<br><br><strong>优点</strong>：实现简单，开销小，收敛速度快。<br><br><strong>缺点</strong>：限制了网络规模（16不可达）；由于路由器之间交换的路由信息是路由器中的完整路由表，所以随着网络规模扩大开销也变大；坏消息传播的慢，此时收敛时间长。<br></p></blockquote><p>(2) <strong>OSPF（内部网关协议）</strong>：<br></p><blockquote><p>基于链路状态协议，使用<code>洪泛法</code>（一传十，十传百）向本自制系统内的所有路由器发送信息，只有当链路状态改变时才更新。<br></p></blockquote><p>(3) <strong>BGP(外部网关协议)</strong>：<br></p><blockquote><p>基于<code>路径-向量协议，</code>自治系统之间路由器交换信息时使用这个。<br></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章、计算机网络体系结构&quot;&gt;&lt;a href=&quot;#第一章、计算机网络体系结构&quot; class=&quot;headerlink&quot; title=&quot;第一章、计算机网络体系结构&quot;&gt;&lt;/a&gt;第一章、计算机网络体系结构&lt;/h1&gt;&lt;h3 id=&quot;1-计算机网络的定义&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习算法评估--ROC曲线</title>
    <link href="http://yoursite.com/2020/02/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E8%AF%84%E4%BC%B0-ROC%E6%9B%B2%E7%BA%BF/"/>
    <id>http://yoursite.com/2020/02/26/机器学习算法评估-ROC曲线/</id>
    <published>2020-02-26T06:35:14.000Z</published>
    <updated>2020-03-07T11:43:10.894Z</updated>
    
    <content type="html"><![CDATA[<p>在分类问题中，正负样本不均衡时，使用ROC比准确率更佳。<br><br>细节以后再来补充…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在分类问题中，正负样本不均衡时，使用ROC比准确率更佳。&lt;br&gt;&lt;br&gt;细节以后再来补充…&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>锤子剪刀布游戏</title>
    <link href="http://yoursite.com/2020/02/11/%E9%94%A4%E5%AD%90%E5%89%AA%E5%88%80%E5%B8%83%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2020/02/11/锤子剪刀布游戏/</id>
    <published>2020-02-11T08:27:04.000Z</published>
    <updated>2020-02-11T08:43:54.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="刷题笔迹"><a href="#刷题笔迹" class="headerlink" title="刷题笔迹"></a>刷题笔迹</h3><p>这题花了俩小时，主要是卡在最后一行的输出上了。<br><br>刚开始我只是按照甲乙两人依靠锤子/剪刀/布获胜的次数大小直接比较得出最大值的索引，而没有考虑出现锤子/剪刀/布次数相同的情况。<br></p><blockquote><p>对于这种情况，我定义了一个数组<code>num[3]={&#39;B&#39;,&#39;C&#39;,&#39;J&#39;}</code>。<br><br>分别将甲乙两人依靠锤子/剪刀/布获胜的次数存入二维数组<code>s[2][3]</code>中，并且时按照<code>B,C,J</code>的顺序分别存在<code>s[][0],s[][1],s[][2]</code>中，之所以如此，是为了和num数组中存放顺序对应。<br><br>举个栗子，在甲的获胜局中，若遇到甲出锤子获胜的次数和甲出布获胜的次数相同，则比较其索引在num[]中的索引值(比较<code>ASCII</code>)，较小者便是字典序列中的较小者，取出打印即可。<br></p></blockquote><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>大家应该都会玩“锤子剪刀布”的游戏</p><p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><blockquote><p>输入格式：<br>输入第 1 行给出正整数 N（≤10<br>​5<br>​​ ），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p></blockquote><hr><blockquote><p>输出格式：<br>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p></blockquote><p>输入样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure></p><p>输出样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure></p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">char</span> a[n][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c %c"</span>,&amp;a[i][<span class="number">0</span>],&amp;a[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> awin=<span class="number">0</span>,eq=<span class="number">0</span>,alose=<span class="number">0</span>;<span class="comment">//awin==blose,alose=bwin</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//a,b分别获胜/输最多次的手势计数c,j,b;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'C'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'J'</span>)</span><br><span class="line">&#123;</span><br><span class="line">awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">eq++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'J'</span>)</span><br><span class="line">&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'B'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'C'</span>)</span><br><span class="line">&#123;</span><br><span class="line">alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                eq++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">                        <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'C'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> awin++;</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(a[i][<span class="number">1</span>]==<span class="string">'J'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> alose++;</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                eq++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n%d %d %d\n"</span>,awin,eq,alose,alose,eq,awin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> num[<span class="number">3</span>]=&#123;<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'J'</span>&#125;;</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="keyword">int</span> l,max=s[<span class="number">0</span>][<span class="number">0</span>],maxi=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">0</span>;l&lt;<span class="number">3</span>;++l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>][l]&gt;max)</span><br><span class="line">&#123;</span><br><span class="line">max=s[<span class="number">0</span>][l];</span><br><span class="line">maxi=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>][l]==max)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num[l]&lt;num[maxi])</span><br><span class="line">maxi=l;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//b</span></span><br><span class="line">        <span class="keyword">int</span> m,max1=s[<span class="number">1</span>][<span class="number">0</span>],max1i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">3</span>;++m)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[<span class="number">1</span>][m]&gt;max1)</span><br><span class="line">                &#123;</span><br><span class="line">                        max1=s[<span class="number">1</span>][m];</span><br><span class="line">                        max1i=m;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>][m]==max1)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(num[m]&lt;num[max1i])</span><br><span class="line">                                max1i=m;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c"</span>,num[maxi],num[max1i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;刷题笔迹&quot;&gt;&lt;a href=&quot;#刷题笔迹&quot; class=&quot;headerlink&quot; title=&quot;刷题笔迹&quot;&gt;&lt;/a&gt;刷题笔迹&lt;/h3&gt;&lt;p&gt;这题花了俩小时，主要是卡在最后一行的输出上了。&lt;br&gt;&lt;br&gt;刚开始我只是按照甲乙两人依靠锤子/剪刀/布获胜的次数大小直接比
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>[刷题]字符串处理专题</title>
    <link href="http://yoursite.com/2020/02/08/%E5%88%B7%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E4%B8%93%E9%A2%98/"/>
    <id>http://yoursite.com/2020/02/08/刷题-字符串处理专题/</id>
    <published>2020-02-08T07:44:00.000Z</published>
    <updated>2020-02-08T12:18:00.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-单词长度"><a href="#1-单词长度" class="headerlink" title="1.单词长度"></a>1.单词长度</h3><blockquote><p>你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长度。这里的单词与语言无关，可以包括各种符号，比如it’s算一个单词，长度为4。注意，行中可能出现连续的空格；最后的.不计算在内。</p></blockquote><hr><blockquote><p>输入格式：<br>输入在一行中给出一行文本，以<code>.</code>结束</p></blockquote><p><code>提示：用scanf(&quot;%c&quot;,...);来读入一个字符，直到读到.为止。</code></p><blockquote><p>输出格式：<br>在一行中输出这行文本对应的单词的长度，每个长度之间以空格隔开，行末没有最后的空格。</p></blockquote><hr><blockquote><p>输入样例：<br><code>It&#39;s great to see you here.</code></p></blockquote><blockquote><p>输出样例：<br><code>4 5 2 3 3 4</code></p></blockquote><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">1000</span>];<span class="comment">//接收字符串</span></span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">1000</span>];<span class="comment">//存储待输出序列</span></span><br><span class="line"><span class="comment">//      gets(str);//不能用个gets()，否则不通过</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;<span class="comment">//统计每个单词的字母个数</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str)<span class="number">-1</span>;<span class="comment">//不考虑最后的句号</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//单词</span></span><br><span class="line">                <span class="keyword">while</span>(str[i]!=<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                &#123;</span><br><span class="line">                        cnt++;</span><br><span class="line">                        ++i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cnt!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j++]=cnt;</span><br><span class="line">                        cnt=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//空格</span></span><br><span class="line">                <span class="keyword">while</span>(str[i]==<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                        ++i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&lt;j<span class="number">-1</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-说反话"><a href="#2-说反话" class="headerlink" title="2.说反话"></a>2.说反话</h3><blockquote><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p></blockquote><hr><blockquote><p>输入格式：<br>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p></blockquote><hr><blockquote><p>输出格式：<br>每个测试用例的输出占一行，输出倒序后的句子。</p></blockquote><hr><blockquote><p>输入样例：<br><code>Hello World Here I Come</code></p></blockquote><hr><blockquote><p>输出样例：<br><code>Come I Here World Hello</code></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">88</span>][<span class="number">88</span>];</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                k=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;len&amp;&amp;str[i]!=<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j][k++]=str[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//a[j][k]='\0';</span></span><br><span class="line">                ++j;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-说反话加强版【未AC】"><a href="#3-说反话加强版【未AC】" class="headerlink" title="3.说反话加强版【未AC】"></a>3.说反话加强版【未AC】</h3><blockquote><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p></blockquote><hr><blockquote><p>输入格式：<br>测试输入包含一个测试用例，在一行内给出总长度不超过500 000的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用若干个空格分开。</p></blockquote><hr><blockquote><p>输出格式：<br>每个测试用例的输出占一行，输出倒序后的句子，并且保证单词间只有1个空格。</p></blockquote><hr><blockquote><p>输入样例：<br><code>Hello World   Here I Come</code></p></blockquote><hr><blockquote><p>输出样例：<br><code>Come I Here World Hello</code></p></blockquote><p>我的代码（如下）没有通过最后一个测试点，可能是数组开小了<br><br><img src="1.png" alt=""> <br><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">char</span> a[<span class="number">88</span>][<span class="number">88</span>];</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">        &#123;</span><br><span class="line">                k=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;len&amp;&amp;str[i]!=<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        a[j][k++]=str[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//a[j][k]='\0';</span></span><br><span class="line">                <span class="keyword">if</span>(k!=<span class="number">0</span>)</span><br><span class="line">                        ++j;</span><br><span class="line">                <span class="keyword">while</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        ++i;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;--k)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s"</span>,a[k]);</span><br><span class="line">                <span class="keyword">if</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>于是把数组开到500001，但是编译时会提示<code>段错误 (核心已转储)</code><br><br>大佬看到帮忙解决下，谢谢! <br></p><h3 id="4-说反话新版-单词逆序，未AC"><a href="#4-说反话新版-单词逆序，未AC" class="headerlink" title="4.说反话新版(单词逆序，未AC)"></a>4.说反话新版(单词逆序，未AC)</h3><blockquote><p>Description:<br><br>Sakeven 正在对一段文字进行加密，规则如下：<br>把字符串中的每个单词进行逆序，比如 acm 变成 mca，其他字符顺序不变。<br><br>但是这个工作让他一个手写太麻烦啦，于是他想请你写个程序帮助他。<br></p></blockquote><hr><blockquote><p>Input:<br>输入有包括多组数据。每组数据包括一行字符串。</p></blockquote><hr><blockquote><p>Output:<br>输出加密后的字符串。</p></blockquote><hr><blockquote><p>Sample Input:<br><code>I Love You</code> </p></blockquote><hr><blockquote><p>Sample Output:<br><code>I evoL uoY</code></p></blockquote><p>这题我在本地编译能通过，但是提交时会超时<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">while</span>(gets(str)!=EOF)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">                <span class="keyword">char</span> out[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//二维数组存储每一个子字符串(可能是单词，也可能是其他)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数组out</span></span><br><span class="line"><span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(out)); </span><br><span class="line">                <span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line">                <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将用空格分割开的每一个子字符串(可能是单词，也可能是其他)</span></span><br><span class="line">                <span class="keyword">while</span>(i&lt;len)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">while</span>(str[i]!=<span class="string">' '</span>&amp;&amp;i&lt;len)</span><br><span class="line">                        &#123;</span><br><span class="line">                                out[j][k++]=str[i];</span><br><span class="line">                                ++i;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        k=<span class="number">0</span>;</span><br><span class="line">                        ++j;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>&amp;&amp;i&lt;len)<span class="comment">//跳过空格</span></span><br><span class="line">                                ++i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;j;++m)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(out[m]);</span><br><span class="line"><span class="comment">//if-else:只逆序单词，其余字符原样输出</span></span><br><span class="line">                        <span class="keyword">if</span>(out[m][<span class="number">0</span>]&gt;=<span class="string">'a'</span>&amp;&amp;out[m][<span class="number">0</span>]&lt;=<span class="string">'z'</span>||out[m][<span class="number">0</span>]&gt;=<span class="string">'A'</span>&amp;&amp;out[m][<span class="number">0</span>]&lt;=<span class="string">'Z'</span>)</span><br><span class="line">                        &#123;</span><br><span class="line"> </span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> j=l<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,out[m][j]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;l;++j)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"%c"</span>,out[m][j]);</span><br><span class="line"> </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(m&lt;j<span class="number">-1</span>)</span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是gets()的原因，所以换了scanf，但是会陷入死循环<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-单词长度&quot;&gt;&lt;a href=&quot;#1-单词长度&quot; class=&quot;headerlink&quot; title=&quot;1.单词长度&quot;&gt;&lt;/a&gt;1.单词长度&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;你的程序要读入一行文本，其中以空格分隔为若干个单词，以.结束。你要输出每个单词的长
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>约瑟夫环问题--丢手绢</title>
    <link href="http://yoursite.com/2020/02/06/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98-%E4%B8%A2%E6%89%8B%E7%BB%A2/"/>
    <id>http://yoursite.com/2020/02/06/约瑟夫环问题-丢手绢/</id>
    <published>2020-02-06T06:13:05.000Z</published>
    <updated>2020-02-06T06:18:13.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。问题是，给定了和，一开始要站在什么地方才能避免被处决？Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。 <br></p></blockquote><blockquote><p>17世纪的法国数学家加斯帕在《数目的游戏问题》中讲了这样一个故事：15个教徒和15 个非教徒在深海上遇险，必须将一半的人投入海中，其余的人才能幸免于难，于是想了一个办法：30个人围成一圆圈，从第一个人开始依次报数，每数到第九个人就将他扔入大海，如此循环进行直到仅余15个人为止。问怎样排法，才能使每次投入大海的都是非教徒。<br></p></blockquote><h3 id="代码解决"><a href="#代码解决" class="headerlink" title="代码解决"></a>代码解决</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>  data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">list</span> *L = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));       <span class="comment">//头结点</span></span><br><span class="line">        L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> n, k, i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);<span class="comment">//n：总人数；k：报数为为k者淘汰</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span> *s, *q = L;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; ++i)                                                     <span class="comment">//赋初值</span></span><br><span class="line">        &#123;</span><br><span class="line">                s = (<span class="built_in">list</span>*)<span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">                s-&gt;data = i+<span class="number">1</span>;</span><br><span class="line">                s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                q-&gt;next = s;</span><br><span class="line">                q = s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q-&gt;next = L-&gt;next;                                                      <span class="comment">//让尾结点指向头结点的下一个，即第一个人的位置，单向循环链表创建完成</span></span><br><span class="line">        q = L-&gt;next;    <span class="comment">//让q指向头结点的下一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//核心代码部分</span></span><br><span class="line">        <span class="keyword">while</span> (q-&gt;next != q)                                            <span class="comment">//只剩一个元素时，退出循环</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//令q指向删除节点的前驱结点</span></span><br><span class="line">                <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;k<span class="number">-1</span>; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                        q = q-&gt;next;</span><br><span class="line">                &#125;          </span><br><span class="line">                 s = q-&gt;next;                                                    <span class="comment">//s指向删除节点</span></span><br><span class="line">                q-&gt;next = s-&gt;next;                                              <span class="comment">//将去除s后的链表重新连接起来</span></span><br><span class="line">                q = q-&gt;next;                                                    <span class="comment">//让q指向下次循环的起始位置</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, s-&gt;data);</span><br><span class="line">                <span class="built_in">free</span>(s);</span><br><span class="line">                s = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"%d\n"</span>, q-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">        q = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">free</span>(L);</span><br><span class="line">        L = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;据说著名犹太历史学家 Josephus有过以下的故事：在罗马人占领乔塔帕特后，39 个犹太人与Jo
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数字黑洞[本地编译通过，OJ未通过]</title>
    <link href="http://yoursite.com/2020/01/31/%E6%95%B0%E5%AD%97%E9%BB%91%E6%B4%9E-%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%AF%91%E9%80%9A%E8%BF%87%EF%BC%8COJ%E6%9C%AA%E9%80%9A%E8%BF%87/"/>
    <id>http://yoursite.com/2020/01/31/数字黑洞-本地编译通过，OJ未通过/</id>
    <published>2020-01-31T14:53:00.000Z</published>
    <updated>2020-01-31T14:57:44.413Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">1019 数字黑洞 (20分)</span><br><span class="line">给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。</span><br><span class="line"></span><br><span class="line">例如，我们从6767开始，将得到</span><br><span class="line"></span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line">7641 - 1467 = 6174</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</span><br><span class="line"></span><br><span class="line">输入格式：</span><br><span class="line">输入给出一个正整数 N。</span><br><span class="line"></span><br><span class="line">输出格式：</span><br><span class="line">如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。</span><br><span class="line"></span><br><span class="line">输入样例 1：</span><br><span class="line">6767</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 1：</span><br><span class="line">7766 - 6677 = 1089</span><br><span class="line">9810 - 0189 = 9621</span><br><span class="line">9621 - 1269 = 8352</span><br><span class="line">8532 - 2358 = 6174</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输入样例 2：</span><br><span class="line">2222</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">    </span><br><span class="line">输出样例 2：</span><br><span class="line">2222 - 2222 = 0000</span><br></pre></td></tr></table></figure><p>我写的辣鸡代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h2l</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//选择排序，由大到小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(arr[j]&gt;arr[i])</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">int</span> temp;</span><br><span class="line">                                temp=arr[i];</span><br><span class="line">                                arr[i]=arr[j];</span><br><span class="line">                                arr[j]=temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">l2h</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//选择排序，由小到大</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&lt;arr[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line">temp=arr[i];</span><br><span class="line">arr[i]=arr[j];</span><br><span class="line">arr[j]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res=arr[<span class="number">0</span>]*<span class="number">1000</span>+arr[<span class="number">1</span>]*<span class="number">100</span>+arr[<span class="number">2</span>]*<span class="number">10</span>+arr[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line">gets(str);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> arr[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">arr[i]=str[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> high=h2l(arr);<span class="comment">//非递增排列</span></span><br><span class="line"><span class="keyword">int</span> low=l2h(arr);<span class="comment">//非递减排列,注意前面有0被去掉</span></span><br><span class="line"><span class="keyword">if</span>(high==low)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-%d=0000"</span>,high,low);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>((high-low)!=<span class="number">6174</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c=high-low;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">999</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"000%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;aa[<span class="number">2</span>]=<span class="number">0</span>;aa[<span class="number">3</span>]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"00%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;aa[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">2</span>]=c/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=c%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">aa[<span class="number">1</span>]=c/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=(c%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=(c%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</span><br><span class="line">aa[<span class="number">0</span>]=c/<span class="number">1000</span>;</span><br><span class="line">aa[<span class="number">1</span>]=(c%<span class="number">1000</span>)/<span class="number">100</span>;</span><br><span class="line">aa[<span class="number">2</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">aa[<span class="number">3</span>]=((c%<span class="number">1000</span>)%<span class="number">100</span>)%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">high=h2l(aa);</span><br><span class="line">low=l2h(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d-"</span>,high);</span><br><span class="line">        <span class="keyword">if</span>(low&lt;=<span class="number">999</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span>(low&lt;=<span class="number">99</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="keyword">if</span>(low&lt;=<span class="number">9</span>)</span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"000%d="</span>,low);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                        <span class="built_in">printf</span>(<span class="string">"00%d="</span>,low);</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                                <span class="built_in">printf</span>(<span class="string">"0%d="</span>,low);</span><br><span class="line">                &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d="</span>,low);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"6174"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>数据链路层</title>
    <link href="http://yoursite.com/2020/01/30/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/30/数据链路层/</id>
    <published>2020-01-30T11:45:03.000Z</published>
    <updated>2020-01-30T12:41:52.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据链路层基本概念"><a href="#数据链路层基本概念" class="headerlink" title="数据链路层基本概念"></a>数据链路层基本概念</h3><p>结点：主机，路由器<br></p><p>链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波。分为有线链路和无线链路<br></p><p>数据链路：网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成数据链路<br></p><p>帧：链路层的协议数据单元，封装网络层数据报<br></p><blockquote><p>数据链路层负责通过一条链路从一个加到向另一个物理链路直接相连的相邻结点传送数据报<br></p></blockquote><h3 id="数据链路层功能概述"><a href="#数据链路层功能概述" class="headerlink" title="数据链路层功能概述"></a>数据链路层功能概述</h3><p>数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠地传送到相邻结点的目标机网络层。其主要作用是<code>加强物理层传送原始比特流的功能</code>，将物理层提供的可能出错的物理连接改造为<code>逻辑上无差错的数据链路</code>，使之对网络层表现为一条无差错的链路。<br></p><blockquote><p>功能一：为网络层提供服务。无确认无连接服务，有确认无连接服务，有确认面向连接服务(tip:有链连接一定有确认)<br><br>功能二：链路管理，即连接的建立，维持，释放(用于面向连接的服务)<br><br>功能三：组帧<br><br>功能四：流量控制(限制发送方)<br><br>功能五：差错控制（帧错/位错）<br></p></blockquote><h3 id="封装成帧与透明传输"><a href="#封装成帧与透明传输" class="headerlink" title="封装成帧与透明传输"></a>封装成帧与透明传输</h3><p><img src="1.png" alt=""> <br><br><code>透明传输</code>是指不管所传数据时什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西<br><br>当所传数据的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使接收方不会将这样的数据误认为是某种控制信息（例如下面的字符填充法中那样），这样才能保证数据链路层的传输是透明的。<br><br><img src="2.png" alt=""> <br><br><img src="3.png" alt=""> <br><br><img src="4.png" alt=""> <br><br><img src="5.png" alt=""> <br><br><img src="6.png" alt=""> <br></p><p>总结：由于字节计数法中count字段的脆弱性(其值若有差错将导致灾难性后果)以及字符填充法实现上的复杂性和不兼容性，目前较普遍使用的帧同步法时比特填充和违规编码法<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据链路层基本概念&quot;&gt;&lt;a href=&quot;#数据链路层基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据链路层基本概念&quot;&gt;&lt;/a&gt;数据链路层基本概念&lt;/h3&gt;&lt;p&gt;结点：主机，路由器&lt;br&gt;&lt;/p&gt;
&lt;p&gt;链路：网络中两个结点之间的物理通道，链路的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符数组</title>
    <link href="http://yoursite.com/2020/01/30/%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2020/01/30/字符数组/</id>
    <published>2020-01-30T06:47:33.000Z</published>
    <updated>2020-01-30T07:46:42.703Z</updated>
    
    <content type="html"><![CDATA[<pre><font color="#5FD7FF">#include </font><font color="#AD7FA8">&lt;stdio.h&gt;</font><font color="#5FD7FF">#include </font><font color="#AD7FA8">&lt;string.h&gt;</font><font color="#87FFAF">int</font> main(){        <font color="#34E2E2">//strlen()用法</font>        <font color="#87FFAF">char</font> a[<font color="#AD7FA8">4</font>]=<font color="#AD7FA8">&quot;abc&quot;</font>;<font color="#34E2E2">//这里必须是</font><font color="#AD7FA8">4</font><font color="#34E2E2">，因为还有个‘</font><font color="#AD7FA8">0</font><font color="#34E2E2">’，否则打印时最后会乱码</font>        <font color="#87FFAF">int</font> len=strlen(a);        printf(<font color="#AD7FA8">&quot;a[]=</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,a);        printf(<font color="#AD7FA8">&quot;strlen(a)=</font><font color="#FFD7D7">%d\n</font><font color="#AD7FA8">&quot;</font>,len);        <font color="#34E2E2">//strcat()用法</font>        <font color="#87FFAF">char</font> str1[<font color="#AD7FA8">15</font>]=<font color="#AD7FA8">&quot;I am &quot;</font>;        <font color="#87FFAF">char</font> str2[]=<font color="#AD7FA8">&quot;student&quot;</font>;        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,strcat(str1,str2));        <font color="#34E2E2">//以上程序将str2连接到str1后面，所以str1的长度应足够大，否则报错</font>        <font color="#34E2E2">//strcpy()用法</font>        <font color="#87FFAF">char</font> s1[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;aaaaaaaaaa&quot;</font>,s2[]=<font color="#AD7FA8">&quot;bbb&quot;</font>;        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%s\n</font><font color="#AD7FA8">&quot;</font>,strcpy(s1,s2));        printf(<font color="#AD7FA8">&quot;strlen(s1)=</font><font color="#FFD7D7">%ld\n</font><font color="#AD7FA8">&quot;</font>,strlen(s1));        <font color="#34E2E2">//strcmp()用法，按ascii码比大小</font>        <font color="#87FFAF">char</font> str[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;U.S.A&quot;</font>,temp[<font color="#AD7FA8">10</font>]=<font color="#AD7FA8">&quot;China&quot;</font>;        <font color="#87FFAF">int</font> x=strcmp(str,temp);        printf(<font color="#AD7FA8">&quot;</font><font color="#FFD7D7">%d\n</font><font color="#AD7FA8">&quot;</font>,x);        <font color="#34E2E2">//strlwr()：大写字母--&gt;小写字母</font>        <font color="#34E2E2">//strupr()：小写字母--&gt;大写字母</font>}</pre><p>输出结果：<br></p><pre>a[]=abcstrlen(a)=3I am studentbbbstrlen(s1)=318</pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;font color=&quot;#5FD7FF&quot;&gt;#include &lt;/font&gt;&lt;font color=&quot;#AD7FA8&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/font&gt;
&lt;font color=&quot;#5FD7FF&quot;&gt;#include &lt;/font&gt;&lt;font color=&quot;#
      
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>使用keras进行手写数字识别</title>
    <link href="http://yoursite.com/2020/01/29/%E4%BD%BF%E7%94%A8keras%E8%BF%9B%E8%A1%8C%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>http://yoursite.com/2020/01/29/使用keras进行手写数字识别/</id>
    <published>2020-01-29T13:20:58.000Z</published>
    <updated>2020-01-29T13:36:39.322Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.datasets <span class="keyword">import</span> mnist</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.keras.utils.np_utils <span class="keyword">import</span> to_categorical</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"><span class="comment">#载入数据</span></span><br><span class="line">(x_train,y_train),(x_test,y_test)=mnist.load_data()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'x_shape'</span>,x_train.shape)<span class="comment">#(60000,28,28)</span></span><br><span class="line">print(<span class="string">'y_shape:'</span>,y_train.shape)<span class="comment">#(6000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#(60000,28,28)--&gt;(60000,784)</span></span><br><span class="line">x_train=x_train.reshape(x_train.shape[<span class="number">0</span>],<span class="number">-1</span>)/<span class="number">255.0</span><span class="comment">#除以255是做归一化，下同</span></span><br><span class="line">x_test=x_test.reshape(x_test.shape[<span class="number">0</span>],<span class="number">-1</span>)/<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#换one hot格式(独热编码)</span></span><br><span class="line">y_train=to_categorical(y_train,num_classes=<span class="number">10</span>)</span><br><span class="line">y_test=to_categorical(y_test,num_classes=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建模型，输入28*28=784个神经元，输出10个神经元</span></span><br><span class="line">model=Sequential([</span><br><span class="line">    Dense(units=<span class="number">10</span>,input_dim=<span class="number">784</span>,bias_initializer=<span class="string">'one'</span>,activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment">#定义优化器,训练过程中计算准确率</span></span><br><span class="line">sgd=SGD(lr=<span class="number">0.2</span>)</span><br><span class="line">model.compile(</span><br><span class="line">    optimizer=sgd,</span><br><span class="line">    loss=<span class="string">'mse'</span>,</span><br><span class="line">    metrics=[<span class="string">'accuracy'</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练模型</span></span><br><span class="line">model.fit(x_train,y_train,batch_size=<span class="number">32</span>,epochs=<span class="number">1</span>)<span class="comment">#epochs是训练周期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#评估模型</span></span><br><span class="line">loss,accuracy=model.evaluate(x_test,y_test)</span><br><span class="line">print(<span class="string">'\ntest loss'</span>,loss)</span><br><span class="line">print(<span class="string">'accuracy'</span>,accuracy)</span><br></pre></td></tr></table></figure><p>运行上述代码，得到如下结果：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test loss 0.021694928619265558</span><br><span class="line">accuracy 0.8772</span><br></pre></td></tr></table></figure></p><p>可以提高训练周期epochs来提高准确率<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>keras中导入utls失败的解决办法</title>
    <link href="http://yoursite.com/2020/01/29/keras%E4%B8%AD%E5%AF%BC%E5%85%A5utls%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/29/keras中导入utls失败的解决办法/</id>
    <published>2020-01-29T13:01:04.000Z</published>
    <updated>2020-01-29T13:12:26.013Z</updated>
    
    <content type="html"><![CDATA[<p>环境：anoconda（Python3.7）<br></p><blockquote><p>在使用tensorflow.keras训练神经网络时，需要使用to_categorical()函数，于是运行下面的代码：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.keras.utils import np_utils</span><br></pre></td></tr></table></figure></p></blockquote><p>会报错，错误信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ImportError                               Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-20-ce1e713f73e2&gt; in &lt;module&gt;</span><br><span class="line">----&gt; 1 from tensorflow.keras.utils import np_utils</span><br><span class="line">ImportError: cannot import name &apos;np_utils&apos; from &apos;tensorflow.keras.utils&apos; (/home/fanxi/anaconda3/lib/python3.7/site-packages/tensorflow/_api/v1/keras/utils/__init__.py)</span><br></pre></td></tr></table></figure></p><p>为了解决这个问题，先根据报错信息显示的路径找到文件<strong>init</strong>.py，打开，内容如下：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># Copyright 2016 The TensorFlow Authors. All Rights Reserved.</span><br><span class="line">#</span><br><span class="line"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"># you may not use this file except in compliance with the License.</span><br><span class="line"># You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"># ==============================================================================</span><br><span class="line">&quot;&quot;&quot;Keras utilities.&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from __future__ import absolute_import</span><br><span class="line">from __future__ import division</span><br><span class="line">from __future__ import print_function</span><br><span class="line"></span><br><span class="line">from tensorflow.python.keras.utils.data_utils import GeneratorEnqueuer</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import get_file</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import Sequence</span><br><span class="line">from tensorflow.python.keras.utils.data_utils import SequenceEnqueuer</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import custom_object_scope</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import CustomObjectScope</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import deserialize_keras_object</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import get_custom_objects</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import Progbar</span><br><span class="line">from tensorflow.python.keras.utils.generic_utils import serialize_keras_object</span><br><span class="line">from tensorflow.python.keras.utils.io_utils import HDF5Matrix</span><br><span class="line">from tensorflow.python.keras.utils.layer_utils import convert_all_kernels_in_model</span><br><span class="line">from tensorflow.python.keras.utils.np_utils import normalize</span><br><span class="line">from tensorflow.python.keras.utils.np_utils import to_categorical</span><br><span class="line">from tensorflow.python.keras.utils.vis_utils import plot_model</span><br><span class="line"></span><br><span class="line">del absolute_import</span><br><span class="line">del division</span><br><span class="line">del print_function</span><br></pre></td></tr></table></figure></p><p>把之前运行的代码改为：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from tensorflow.python.keras.utils.np_utils import to_categorical</span><br></pre></td></tr></table></figure></p><p>便可以直接导入to_categorical函数了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：anoconda（Python3.7）&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用tensorflow.keras训练神经网络时，需要使用to_categorical()函数，于是运行下面的代码：&lt;br&gt;&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Python日常小bug" scheme="http://yoursite.com/categories/Python%E6%97%A5%E5%B8%B8%E5%B0%8Fbug/"/>
    
    
  </entry>
  
  <entry>
    <title>keras--非线性回归</title>
    <link href="http://yoursite.com/2020/01/29/keras-%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2020/01/29/keras-非线性回归/</id>
    <published>2020-01-29T08:27:17.000Z</published>
    <updated>2020-01-29T08:55:30.149Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#Sequential：按顺序构成的模型（最简单的一种模型）</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="comment">#Dense:全连接层</span></span><br><span class="line"><span class="comment">#Activation:激活函数</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense,Activation</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.optimizers <span class="keyword">import</span> SGD</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成200个随机点</span></span><br><span class="line">x_data=np.linspace(<span class="number">-0.5</span>,<span class="number">0.5</span>,<span class="number">200</span>)</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.02</span>,x_data.shape)</span><br><span class="line">y_data=np.square(x_data)+noise</span><br><span class="line"><span class="comment">#显示随机点</span></span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""> <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#构建一个顺序模型</span><br><span class="line">model=Sequential()</span><br><span class="line">#在模型中添加一个全连接层</span><br><span class="line">#网络结构：1--10--1（输入层--隐藏层--输出层）</span><br><span class="line">model.add(Dense(units=10,input_dim=1,activation=&apos;tanh&apos;))#现在units是隐藏层的结点数：10</span><br><span class="line">#model.add(Activation(&apos;tanh&apos;))#添加激活函数的另外一种方法</span><br><span class="line">model.add(Dense(units=1,input_dim=10,activation=&apos;tanh&apos;))#这里的输入维度input_dim可以省略，默认就是上一层的输出：10</span><br><span class="line">#model.add(Activation(&apos;tanh&apos;))#添加激活函数的另外一种方法</span><br><span class="line">#定义优化算法</span><br><span class="line">sgd=SGD(lr=0.3)#增大sgd的学习率(默认是0.01)，以减少训练次数</span><br><span class="line">#编译模型</span><br><span class="line">model.compile(optimizer=sgd,loss=&apos;mse&apos;)</span><br><span class="line"></span><br><span class="line">#训练模型(训练3001个批次)</span><br><span class="line">for step in range(3001):</span><br><span class="line">    #每次训练一个批次</span><br><span class="line">    cost=model.train_on_batch(x_data,y_data)#把所有数据作为一个批次进行训练</span><br><span class="line">    #每500个batch打印一次cost值</span><br><span class="line">    if step%500==0:</span><br><span class="line">        print(&apos;cost:&apos;,cost)</span><br><span class="line">        </span><br><span class="line">#打印权值和偏置值</span><br><span class="line">W0,b0=model.layers[0].get_weights()</span><br><span class="line">print(&apos;W0:&apos;,W0,&apos;b0:&apos;,b0)</span><br><span class="line">W1,b1=model.layers[1].get_weights()</span><br><span class="line">print(&apos;W1:&apos;,W1,&apos;b1:&apos;,b1)</span><br><span class="line"></span><br><span class="line">#把x_data输入网络中，得到预测值y_pred</span><br><span class="line">y_pred=model.predict(x_data)</span><br><span class="line"></span><br><span class="line">#显示随机点</span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">#显示预测结果</span><br><span class="line">plt.plot(x_data,y_pred,&apos;r-&apos;,lw=3)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cost: 0.014056709</span><br><span class="line">cost: 0.00520279</span><br><span class="line">cost: 0.003079262</span><br><span class="line">cost: 0.0015911908</span><br><span class="line">cost: 0.0006481447</span><br><span class="line">cost: 0.0005247076</span><br><span class="line">cost: 0.00051465025</span><br><span class="line">W0: [[-1.3358053  -1.4224494   0.20232533 -0.6066645  -0.10370493  0.23419712</span><br><span class="line">   0.7197719  -0.36955625 -0.04164154 -0.24170761]] b0: [-0.54529893  0.5815663  -0.18308175 -0.08960333  0.16555873 -0.17367946</span><br><span class="line"> -0.21355069 -0.0029226  -0.2519434  -0.08364421]</span><br><span class="line">W1: [[ 0.8520078 ]</span><br><span class="line"> [-0.8093865 ]</span><br><span class="line"> [-0.4979416 ]</span><br><span class="line"> [ 0.18443288]</span><br><span class="line"> [ 0.3505873 ]</span><br><span class="line"> [-0.5481949 ]</span><br><span class="line"> [ 0.3195532 ]</span><br><span class="line"> [-0.2096716 ]</span><br><span class="line"> [-0.49501932]</span><br><span class="line"> [-0.30411953]] b1: [0.5309287]</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt=""> <br><br>对以上输出结果的理解：<br></p><blockquote><p>(1) W0和b0是输入层(1个结点)到隐藏层(10个结点)的权重和偏置值，因为从输入层到隐藏层是由1个结点映射到10个结点，即有10条线由输入层发出，分别指向到隐藏层的10个结点，所以两者所含参数个数都为10；<br><br>(2) W1和b1是隐藏层(10个结点)到输出层(1个结点)的权重和偏置值，因为从隐藏层到输出层是由10个结点映射到1个结点，即有10条线指向输出层的唯一结点，因而W1含有10个参数，b1含有1个参数；<br><br>通俗来讲，b的个数与该层所指向的下一层的结点数一样，W与本层发出的‘线’的条数一样</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>keras--线性回归</title>
    <link href="http://yoursite.com/2020/01/29/keras-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2020/01/29/keras-线性回归/</id>
    <published>2020-01-29T07:57:39.000Z</published>
    <updated>2020-01-29T08:02:28.144Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#Sequential：按顺序构成的模型（最简单的一种模型）</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="comment">#Dense:全连接层</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用numpy生成100个随机点</span></span><br><span class="line">x_data=np.random.rand(<span class="number">100</span>)</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.01</span>,x_data.shape)</span><br><span class="line">y_data=x_data*<span class="number">0.1</span>+<span class="number">0.2</span>+noise</span><br><span class="line"><span class="comment">#显示随机点</span></span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""> <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#构建一个顺序模型</span><br><span class="line">model=Sequential()</span><br><span class="line">#在模型中添加一个全连接层</span><br><span class="line">model.add(Dense(units=1,input_dim=1))#units是输出维度</span><br><span class="line">#编译模型</span><br><span class="line">model.compile(optimizer=&apos;sgd&apos;,loss=&apos;mse&apos;)</span><br><span class="line">#训练模型(训练3001个批次，若效果不好可以尝试增大训练次数)</span><br><span class="line">for step in range(3001):</span><br><span class="line">    #每次训练一个批次</span><br><span class="line">    cost=model.train_on_batch(x_data,y_data)#把所有数据作为一个批次进行训练</span><br><span class="line">    #每500个batch打印一次cost值</span><br><span class="line">    if step%500==0:</span><br><span class="line">        print(&apos;cost:&apos;,cost)</span><br><span class="line">        </span><br><span class="line">#打印权值和偏置值</span><br><span class="line">W,b=model.layers[0].get_weights()</span><br><span class="line">print(&apos;W:&apos;,W,&apos;b:&apos;,b)</span><br><span class="line"></span><br><span class="line">#把x_data输入网络中，得到预测值y_pred</span><br><span class="line">y_pred=model.predict(x_data)</span><br><span class="line"></span><br><span class="line">#显示随机点</span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">#显示预测结果</span><br><span class="line">plt.plot(x_data,y_pred,&apos;r-&apos;,lw=3)#预测值</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>输出结果： <br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cost: 0.04835104</span><br><span class="line">cost: 0.00014408033</span><br><span class="line">cost: 0.00010225594</span><br><span class="line">cost: 9.2460454e-05</span><br><span class="line">cost: 9.016635e-05</span><br><span class="line">cost: 8.962906e-05</span><br><span class="line">cost: 8.9503264e-05</span><br><span class="line">W: [[0.10286073]] b: [0.198199]</span><br></pre></td></tr></table></figure></p><p><img src="2.png" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="keras实战" scheme="http://yoursite.com/categories/keras%E5%AE%9E%E6%88%98/"/>
    
    
  </entry>
  
  <entry>
    <title>物理层</title>
    <link href="http://yoursite.com/2020/01/27/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://yoursite.com/2020/01/27/物理层/</id>
    <published>2020-01-27T04:27:19.000Z</published>
    <updated>2020-01-27T12:49:59.524Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据通信的相关术语"><a href="#数据通信的相关术语" class="headerlink" title="数据通信的相关术语"></a>数据通信的相关术语</h3><p>通信的目的：传送消息<br><br>数据：传送信息的实体<br><br>信号：数据的电气/电磁的表现，是数据在传输过程中的存在形式<br></p><blockquote><p>数字信号：代表消息的参数取值是离散的<br><br>模拟信号：代表消息的参数取值时连续的<br></p></blockquote><p>信源：产生和发送数据的源头<br><br>信宿：接收数据的终点<br><br>信道：信号传输的媒介。一般用来表示向<code>某一个方向</code>传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道<br></p><blockquote><p>按照传输信号，信道可分为：模拟信道(传送模拟信号)和数字信道(传送数字信号)<br><br>按照传输介质，信道可分为：无线信道和有线信道<br></p></blockquote><h3 id="3种通信方式-按照通信双方信息的交互方式"><a href="#3种通信方式-按照通信双方信息的交互方式" class="headerlink" title="3种通信方式(按照通信双方信息的交互方式)"></a>3种通信方式(按照通信双方信息的交互方式)</h3><blockquote><p>单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道<br><br>半双工通信：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道<br><br>全双工通信：通信双方可以同时发送和接收信息，也需要两条信道<br></p></blockquote><h3 id="两种数据传输方式"><a href="#两种数据传输方式" class="headerlink" title="两种数据传输方式"></a>两种数据传输方式</h3><blockquote><p>串行传输：速度慢，费用低，适合远距离<br><br>并行传输：速度快，费用高，适合近距离<br></p></blockquote><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><p><code>码元</code>是指用一个<code>固定时长</code>的<code>信号波形(数字脉冲)</code>，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为<code>k进制码元</code>，而该时长称为<code>码元宽度</code>。当码元的离散状态有M个时(M大于2)，此时码元称为<code>M进制码元</code>。<br><br>1码元可以携带多个比特的信息量。例如，在使用二进制编码时，只有两种不同的码元，一种代表0状态，一中代表1状态。<br></p><h3 id="速率，波特，带宽"><a href="#速率，波特，带宽" class="headerlink" title="速率，波特，带宽"></a>速率，波特，带宽</h3><p><code>速率</code>也叫<code>数据率</code>，是指数据的<code>传输速率</code>，表示单位时间内传输的数据量。可以用<code>码元传输速率</code>和<code>信息传输速率</code>表示。<br></p><blockquote><p>(1) 码元传输速率：别名码元速率，波形速率，调制速率，符号速率等，它表示单位时间内数字通信系统所传输的码元个数(也可称为脉冲个数或信号变化的次数)，单位是<code>波特(Baud)</code>。<br><br>1波特表示数字通信系统每秒传输一个码元。这里的码元可以是多进制的，也可以是二进制的，单码元速率与进制数无关<br></p></blockquote><blockquote><p>(2)信息传输速率：别名信息速率，比特率等，表示单位时间内数字通信系统传输的二进制码元个数(即比特数)，单位是比特/秒(b/s)<br></p></blockquote><p>两者关系：若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M*n bit/s<br></p><p>一言以蔽之：码元传输速率表示<code>1s传输多少个码元</code>,信息传输速率表示<code>1s传输多少个比特。</code>.<br></p><p>计算机网络中，<code>带宽</code>用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的<code>“最高数据率”</code>，可理解为网络设备所支持的最高速度。单位是”比特每秒”，b/s，kb/s，Mb/s，Gb/s<br></p><p>看一道题<br><br><img src="1.png" alt=""> <br></p><h3 id="基带信号与宽带信号-信道上传输的信号"><a href="#基带信号与宽带信号-信道上传输的信号" class="headerlink" title="基带信号与宽带信号(信道上传输的信号)"></a>基带信号与宽带信号(信道上传输的信号)</h3><blockquote><p>基带信号：将数字1和0直接用两种不同的电压表示，再传送到数字信道上去传输(基带传输)。来自信源的信号，比如计算机发出的代表各种文字或图像的数据信号都属于基带信号。基带信号就是发出的<code>直接表达了要传输的信息的信号</code>,比如说话的声音。<br></p></blockquote><blockquote><p>宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输(宽带传输)。把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输(即仅在一段频率范围内能够通过信道)。<br></p></blockquote><p>在传输距离较近时，计算机网络采用基带传输方式(近距离衰减小，从而信号内容不易发生变化)；<br><br>在传输距离较远时，计算机网络采用宽带传输方式(远距离衰减大，即使信号变化大也能最后过滤出来基带信号)；<br></p><p>栗子：   设备投屏 –&gt;基带传输； </p><h3 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h3><p>编码： 数据–&gt;数字信号<br><br>调制： 数据–&gt;模拟信号<br></p><blockquote><p>数字数据，经数字发送器，变为数字信号，此为调制<br><br>数字数据，经调制器，变为模拟信号，此为调制<br><br>模拟数据，经PCM编码器，变为数字信号，此为编码<br><br>模拟数据，经放大器调制器，变为模拟信号，此为调制<br></p></blockquote><h3 id="数字数据编码为数字信号"><a href="#数字数据编码为数字信号" class="headerlink" title="数字数据编码为数字信号"></a>数字数据编码为数字信号</h3><blockquote><p>非归零编码（NRZ）<br><br>曼彻斯特编码<br><br>差分曼彻斯特编码<br><br>归零编码（RZ）<br><br>反向不归零编码（NRZI）<br><br>4B/5B编码<br></p></blockquote><h3 id="数字数据调制为模拟信号"><a href="#数字数据调制为模拟信号" class="headerlink" title="数字数据调制为模拟信号"></a>数字数据调制为模拟信号</h3><p><img src="2.png" alt=""> <br></p><h3 id="模拟数据编码为数字信号"><a href="#模拟数据编码为数字信号" class="headerlink" title="模拟数据编码为数字信号"></a>模拟数据编码为数字信号</h3><p><img src="3.png" alt=""> <br></p><h3 id="模拟数据调制为模拟信号"><a href="#模拟数据调制为模拟信号" class="headerlink" title="模拟数据调制为模拟信号"></a>模拟数据调制为模拟信号</h3><p><img src="4.png" alt=""> <br></p><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><p>影响失真程度的因素</p><blockquote><p>码元传输速率（正相关），信号传输距离（正相关），噪声干扰（正相关），传输媒体质量（负相关）<br></p></blockquote><p>失真的一种现象<br><img src="5.png" alt=""> <br></p><h3 id="奈氏准则-奈奎斯特定理"><a href="#奈氏准则-奈奎斯特定理" class="headerlink" title="奈氏准则(奈奎斯特定理)"></a>奈氏准则(奈奎斯特定理)</h3><p><img src="6.png" alt=""> <br><br><img src="7.png" alt=""> <br></p><h3 id="香农定理"><a href="#香农定理" class="headerlink" title="香农定理"></a>香农定理</h3><p><img src="8.png" alt=""> <br><br><img src="9.png" alt=""> <br><br><img src="10.png" alt=""> <br></p><h3 id="奈氏与香农对比"><a href="#奈氏与香农对比" class="headerlink" title="奈氏与香农对比"></a>奈氏与香农对比</h3><p><img src="11.png" alt=""> <br></p><h3 id="物理层传输介质"><a href="#物理层传输介质" class="headerlink" title="物理层传输介质"></a>物理层传输介质</h3><p><img src="12.png" alt=""> <br><br><img src="13.png" alt=""> <br><br><img src="14.png" alt=""> <br><br><img src="15.png" alt=""> <br><br><img src="16.png" alt=""> <br><br><img src="17.png" alt=""> <br><br><img src="18.png" alt=""> <br></p><h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><p><img src="19.png" alt=""> <br><br><img src="20.png" alt=""> <br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据通信的相关术语&quot;&gt;&lt;a href=&quot;#数据通信的相关术语&quot; class=&quot;headerlink&quot; title=&quot;数据通信的相关术语&quot;&gt;&lt;/a&gt;数据通信的相关术语&lt;/h3&gt;&lt;p&gt;通信的目的：传送消息&lt;br&gt;&lt;br&gt;数据：传送信息的实体&lt;br&gt;&lt;br&gt;信号：数据的
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
</feed>
